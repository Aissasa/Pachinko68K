00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 10/14/2016 10:07:54 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Pachinko Game
00000000                             3  * Written by : Aissa Ben Zayed
00000000                             4  * Date       : 10-7-2016
00000000                             5  * Description: 
00000000                             6  *
00000000                             7  *-----------------------------------------------------------
00000000                             8  
00000000                             9  *
00000000                            10  
00001000                            11  START  ORG    $1000
00001000                            12  
00001000                            13      include "equates.X68"
00001000                            14  
00001000                            15  ALL_REG                     REG d0-d7/a0-a6
00001000                            16  
00001000  =00000001                 17  TRUE                        EQU 1
00001000  =00000000                 18  FALSE                       EQU 0
00001000                            19  
00001000  =0000FF00                 20  GREEN                       EQU $00FF00
00001000  =00FFFFFF                 21  WHITE                       EQU $FFFFFF
00001000                            22  
00001000                            23  ;math
00001000  =00000008                 24  FRACTION_BITS               EQU 8
00001000  =0000000D                 25  ONE_TWENTIETH               EQU 13
00001000  =00000011                 26  ONE_FIFTEENTH               EQU 17
00001000  =0000001A                 27  ONE_TENTH                   EQU 26
00001000  =00000020                 28  ONE_EIGHTH                  EQU 32
00001000  =00000040                 29  ONE_FOURTH                  EQU 64
00001000  =00000055                 30  ONE_THIRD                   EQU 85
00001000  =00000080                 31  HALF                        EQU 128
00001000  =000000CD                 32  EIGHT_TENTH                 EQU 205
00001000                            33  
00001000                            34  ;output window
00001000  =0000042F                 35  OUTPUT_WINDOW_WIDTH         EQU 1071        ;the output screen width in pixels
00001000  =00000320                 36  OUTPUT_WINDOW_HEIGHT        EQU 800         ;the output screen height in pixels
00001000                            37  
00001000                            38  ;pachinko board dimesions and key points
00001000  =000000F9                 39  TOP_LEFT_BOARD_X_POS        EQU 249
00001000  =00000030                 40  TOP_LEFT_BOARD_Y_POS        EQU 48
00001000  =0000033C                 41  BOTTOM_RIGHT_BOARD_X_POS    EQU 828
00001000  =000002AE                 42  BOTTOM_RIGHT_BOARD_Y_POS    EQU 686
00001000  =00000243                 43  BOARD_WIDTH                 EQU (BOTTOM_RIGHT_BOARD_X_POS-TOP_LEFT_BOARD_X_POS)
00001000  =0000027E                 44  BOARD_HEIGHT                EQU (BOTTOM_RIGHT_BOARD_Y_POS-TOP_LEFT_BOARD_Y_POS)
00001000                            45  
00001000                            46  ;ball
00001000  =00000032                 47  BALL_WIDTH                  EQU 50
00001000  =00000032                 48  BALL_HEIGHT                 EQU 50
00001000  =00000019                 49  BALL_RADIUS                 EQU 25
00001000  =000000F9                 50  BALL_INITIAL_X_POS          EQU TOP_LEFT_BOARD_X_POS
00001000  =00000030                 51  BALL_INITIAL_Y_POS          EQU TOP_LEFT_BOARD_Y_POS
00001000                            52  
00001000                            53  
00001000  =00000500                 54  BALL_SLIDE_VELOCITY         EQU $500
00001000                            55  
00001000  =00000030                 56  BALL_Y_ACCELERATION         EQU $30
00001000                            57  
00001000  =00000000                 58  BALL_INIT_X_VELOCITY        EQU 0     
00001000  =00000000                 59  BALL_INIT_Y_VELOCITY        EQU 0
00001000                            60  
00001000                            61  
00001000                            62  ;pegs
00001000  =00000022                 63  PEG_WIDTH                   EQU 34
00001000  =00000022                 64  PEG_HEIGHT                  EQU 34
00001000  =00000011                 65  PEG_RADIUS                  EQU 17
00001000                            66  
00001000                            67  
00001000                            68  ;collision
00001000  =0000002A                 69  MIN_DX_TO_CHECK_COLLISION   EQU (BALL_RADIUS+PEG_RADIUS)
00001000  =0000002A                 70  MIN_DY_TO_CHECK_COLLISION   EQU (BALL_RADIUS+PEG_RADIUS)
00001000  =00000055                 71  X_VELOCITY_SOFTNER          EQU ONE_THIRD
00001000  =00000020                 72  Y_VELOCITY_SOFTNER          EQU ONE_EIGHTH
00001000                            73  
00001000                            74  
00001000                            75  ;commands
00001000  =00000008                 76  GET_TIME_COMMAND            EQU 8       ;get current time trap code
00001000  =00000013                 77  INPUT_COMMAND               EQU 19      ;get input keys    
00001000  =00000021                 78  SET_OUTPUT_WINDOW_COMMAND   EQU 33      ;set output trap code
00001000  =00000049                 79  PLAY_SOUND_COMMAND          EQU 73
00001000  =00000050                 80  SET_PEN_COLOR_COMMAND       EQU 80      ;set pen color trap code
00001000  =00000052                 81  DRAW_A_PIXEL_COMMAND        EQU 82      ;draw pixel trap code
00001000  =00000054                 82  DRAW_LINE_COMMAND           EQU 84
00001000  =0000005C                 83  SET_DRAWING_MODE_COMMAND    EQU 92      ;set drawing mode used for enabeling double buffering
00001000  =0000005E                 84  REPAINT_SCREEN_COMMAND      EQU 94      ;repaints screen command from a buffer
00001000                            85  
00001000  =00000011                 86  DOUBLE_BUFFERING_MODE       EQU 17      ;double buffering mode option
00001000                            87  
00001000                            88  ;offsets in the bitmap
00001000  =0000000A                 89  OFFSET_TO_PIXEL_ARRAY       EQU $0A      ;the offset to the address containing the pixel array starting byte
00001000  =00000012                 90  OFFSET_IMAGE_WIDTH          EQU $12      ;the offset to the address containing the image width
00001000  =00000016                 91  OFFSET_IMAGE_HEIGHT         EQU $16      ;the offset to the address containing the image height
00001000                            92  
00001000                            93  
00001000                            94  ;Stack pointers for drawing chunks
00001000  =00000024                 95  FIRST_PIXEL_ADDRESS_STACK_OFFSET    EQU 36
00001000  =00000020                 96  IMAGE_WIDTH_STACK_OFFSET            EQU 32
00001000  =0000001C                 97  IMAGE_HEIGHT_STACK_OFFSET           EQU 28
00001000  =00000018                 98  DRAW_X_POS_STACK_OFFSET             EQU 24
00001000  =00000014                 99  DRAW_Y_POS_STACK_OFFSET             EQU 20
00001000  =00000010                100  CHUNK_X_POS_STACK_OFFSET            EQU 16
00001000  =0000000C                101  CHUNK_Y_POS_STACK_OFFSET            EQU 12
00001000  =00000008                102  CHUNK_WIDTH_STACK_OFFSET            EQU 8
00001000  =00000004                103  CHUNK_HEIGHT_STACK_OFFSET           EQU 4
00001000  =00000028                104  STACK_OFFSET_WHEN_DRAWING           EQU FIRST_PIXEL_ADDRESS_STACK_OFFSET+CHUNK_HEIGHT_STACK_OFFSET
00001000                           105  
00001000                           106  ;stack pointers for checking peg collision
00001000  =00000008                107  CURRENT_PEG_X_STACK_OFFSET          EQU 8
00001000  =00000004                108  CURRENT_PEG_Y_STACK_OFFSET          EQU 4
00001000  =00000008                109  STACK_OFFSET_IN_PEG_COL             EQU CURRENT_PEG_X_STACK_OFFSET
00001000                           110  
00001000                           111  
00001000                           112  
00001000                           113  ;input keycodes
00001000  =00000020                114  SPACE_KEY   EQU $20
00001000  =00000025                115  LEFT_ARROW  EQU $25
00001000  =00000027                116  RIGHT_ARROW EQU $27
00001000                           117  
00001000                           118  ;input location of keycode in d1
00001000  =00000010                119  SPACE_KEY_LOCATION          EQU 16
00001000  =00000008                120  LEFT_ARROW_LOCATION         EQU 8
00001000  =00000000                121  RIGHT_ARROW_LOCATION        EQU 0
00001000                           122  
00001000                           123  ;frame rate
00001000  =00000001                124  TIME_PER_FRAME              EQU 1
00001000                           125  
00001000                           126  ;random numbers
00001000  =00000079                127  MAX_RAND_X_VELOCITY         EQU $79
00001000  =00000070                128  MIN_RAND_X_VELOCITY         EQU $70
00001000  =00000075                129  MIN_RAND_X_VEL_ALLOWED      EQU $75
00001000                           130  
00001000                           131  ;leds
00001000  =0000002F                132  SCORE_LED_START_X           EQU 47
00001000  =00000056                133  SCORE_LED_START_Y           EQU 86
00001000  =00000019                134  SCORE_LED_DIGIT_WIDTH       EQU 25
00001000  =0000002A                135  SCORE_LED_DIGIT_HEIGHT      EQU 42
00001000  =00000015                136  SCORE_LED_LINE_HEIGHT       EQU (SCORE_LED_DIGIT_HEIGHT>>1)
00001000  =0000000A                137  SCORE_LED_DIGIT_OFFSET      EQU 10
00001000  =00000003                138  SCORE_LED_NUM_DIGITS        EQU 3
00001000  =00000069                139  SCORE_LED_TOTAL_WIDTH       EQU ((SCORE_LED_DIGIT_WIDTH+SCORE_LED_DIGIT_OFFSET)*SCORE_LED_NUM_DIGITS)
00001000  =00000005                140  OVERRIDE_OFFSET             EQU 5
00001000  =0000002A                141  SCORE_LED_START_X_OVER      EQU (SCORE_LED_START_X-OVERRIDE_OFFSET)
00001000  =00000051                142  SCORE_LED_START_Y_OVER      EQU (SCORE_LED_START_Y-OVERRIDE_OFFSET)
00001000  =00000073                143  SCORE_LED_DIGIT_WIDTH_OV    EQU (SCORE_LED_TOTAL_WIDTH+(OVERRIDE_OFFSET*2))
00001000  =00000034                144  SCORE_LED_DIGIT_HEIGHT_OV   EQU (SCORE_LED_DIGIT_HEIGHT+(OVERRIDE_OFFSET*2))
00001000                           145  
00001000                           146  
00001000  =0000002F                147  BALLS_LED_START_X           EQU 47
00001000  =00000197                148  BALLS_LED_START_Y           EQU 407
00001000  =00000019                149  BALLS_LED_DIGIT_WIDTH       EQU 25
00001000  =0000002A                150  BALLS_LED_DIGIT_HEIGHT      EQU 42
00001000  =00000015                151  BALLS_LED_LINE_HEIGHT       EQU (BALLS_LED_DIGIT_HEIGHT>>1)
00001000  =0000000A                152  BALLS_LED_DIGIT_OFFSET      EQU 10
00001000  =00000003                153  BALLS_LED_NUM_DIGITS        EQU 3
00001000  =00000069                154  BALLS_LED_TOTAL_WIDTH       EQU ((BALLS_LED_DIGIT_WIDTH+BALLS_LED_DIGIT_OFFSET)*BALLS_LED_NUM_DIGITS)
00001000                           155  ;OVERRIDE_OFFSET            EQU 5
00001000  =0000002A                156  BALLS_LED_START_X_OVER      EQU (BALLS_LED_START_X-OVERRIDE_OFFSET)
00001000  =00000192                157  BALLS_LED_START_Y_OVER      EQU (BALLS_LED_START_Y-OVERRIDE_OFFSET)
00001000  =00000073                158  BALLS_LED_DIGIT_WIDTH_OV    EQU (BALLS_LED_TOTAL_WIDTH+(OVERRIDE_OFFSET*2))
00001000  =00000034                159  BALLS_LED_DIGIT_HEIGHT_OV   EQU (BALLS_LED_DIGIT_HEIGHT+(OVERRIDE_OFFSET*2))
00001000                           160  
00001000                           161  
00001000                           162  
00001000                           163  
00001000                           164  
00001000                           165  
00001000                           166  
00001000                           167  
00001000                           168  
00001000                           169  -------------------- end include --------------------
00001000                           170  
00001000                           171  Main:
00001000                           172      
00001000  4EB9 00001068            173      jsr SetOutputWindow
00001006  4EB9 000013DE            174      jsr DrawLoading
0000100C  4EB9 0000133C            175      jsr SetSomeVars 
00001012  4EB9 00001616            176      jsr EnableDoubleBuffer
00001018  4EB9 000013CA            177      jsr DrawAllBackground
0000101E  4EB9 00001426            178      jsr DrawBallFirstTime
00001024  4EB9 000018F8            179      jsr UpdateScoreLed
0000102A  4EB9 00001970            180      jsr UpdateBallsLed
00001030  4EB9 0000161E            181      jsr PaintScreenBuffer
00001036                           182      
00001036                           183  GameLoop:
00001036                           184      
00001036  4EB9 0000131A            185      jsr SetFrameBeginTime
0000103C  4EB9 00001358            186      jsr HandleInput
00001042                           187      
00001042  4EB9 0000107A            188      jsr UpdateBallPosition
00001048                           189  
00001048  4EB9 000013F0            190      jsr DrawBackgroundChunk
0000104E  4EB9 00001434            191      jsr DrawBall
00001054                           192  
00001054  4EB9 00001326            193      jsr WaitToEndFrame
0000105A                           194      
0000105A  4EB9 0000161E            195      jsr PaintScreenBuffer
00001060                           196  
00001060  4EF8 1036                197      jmp GameLoop          
00001064                           198      
00001064  4E72 3000                199      STOP    #$3000                     
00001068                           200  
00001068                           201  SetOutputWindow:
00001068                           202  
00001068                           203      ;set the output window dimensions
00001068  7021                     204      move.l  #SET_OUTPUT_WINDOW_COMMAND, d0
0000106A  223C 0000042F            205      move.l  #OUTPUT_WINDOW_WIDTH, d1
00001070  4841                     206      swap.w  d1
00001072  323C 0320                207      move.w  #OUTPUT_WINDOW_HEIGHT, d1
00001076  4E4F                     208      Trap    #15
00001078                           209  
00001078  4E75                     210      rts
0000107A                           211  
0000107A                           212  
0000107A                           213  UpdateBallPosition:
0000107A                           214  
0000107A                           215      ;see if we have to RestartGame
0000107A  0C39 0001 0051CE4C       216      cmp.b   #(TRUE), (HaveToRestart)
00001082  6700 022A                217      beq     RestartGame
00001086                           218  
00001086                           219      ;initialize ball moved to false
00001086  13FC 0000 0051CD8D       220      move.b  #(FALSE), (BallMoved)
0000108E                           221  
0000108E                           222      ;see if the ball is already dropped
0000108E  0C39 0001 0051CD8C       223      cmp.b   #(TRUE), (BallDropped)
00001096  6700 008C                224      beq     BallDropping
0000109A                           225      
0000109A                           226      ;depending on user input, call drop or Move
0000109A  2039 0051CD74            227      move.l  (PlayerInput), d0
000010A0  E588                     228      lsl.l   #2,d0
000010A2  43F9 0051CD7C            229      lea BallCalls, a1
000010A8  2231 0000                230      move.l  (a1, d0),d1
000010AC                           231      
000010AC                           232      ;avoid null calls
000010AC  0C81 00000000            233      cmpi.l  #0, d1
000010B2  6700 0006                234      beq     EndBallUpdate
000010B6                           235      
000010B6  2441                     236      move.l  d1,a2
000010B8  4ED2                     237      jmp     (a2)
000010BA                           238  
000010BA                           239  EndBallUpdate:
000010BA                           240      
000010BA  4E75                     241      rts
000010BC                           242  
000010BC                           243  DropBall:
000010BC                           244  
000010BC  13FC 0001 0051CD8C       245      move.b  #(TRUE), (BallDropped)
000010C4                           246  
000010C4  4EF8 10BA                247      jmp     EndBallUpdate
000010C8                           248  
000010C8                           249  MoveBallToLeft:
000010C8                           250  
000010C8                           251      ;check if in bounds
000010C8  0CB9 000000F9 0051CD90   252      cmp.l   #(TOP_LEFT_BOARD_X_POS), (BallXPosition)
000010D2  6F00 001E                253      ble     .DontMove
000010D6                           254  
000010D6  2039 0051CD90            255      move.l  (BallXPosition),d0
000010DC  E188                     256      lsl.l   #8,d0
000010DE                           257  
000010DE  0480 00000500            258      sub.l   #(BALL_SLIDE_VELOCITY), d0
000010E4  23C0 0051CD94            259      move.l  d0, (BallXPositionFixed)
000010EA                           260  
000010EA                           261      ;ball moved
000010EA  13FC 0001 0051CD8D       262      move.b  #(TRUE), (BallMoved)
000010F2                           263  
000010F2                           264  .DontMove:
000010F2                           265  
000010F2  4EF8 10BA                266      jmp     EndBallUpdate
000010F6                           267  
000010F6                           268  MoveBallToRight:
000010F6                           269  
000010F6                           270      ;check if in bounds
000010F6  0CB9 0000030A 0051CD90   271      cmp.l   #(BOTTOM_RIGHT_BOARD_X_POS-BALL_WIDTH), (BallXPosition)
00001100  6C00 001E                272      bge     .DontMove
00001104                           273  
00001104  2039 0051CD90            274      move.l  (BallXPosition),d0
0000110A  E188                     275      lsl.l   #8,d0
0000110C                           276      
0000110C  0680 00000500            277      add.l   #(BALL_SLIDE_VELOCITY), d0
00001112  23C0 0051CD94            278      move.l  d0, (BallXPositionFixed)
00001118                           279  
00001118                           280      ;ball moved
00001118  13FC 0001 0051CD8D       281      move.b  #(TRUE), (BallMoved)
00001120                           282  
00001120                           283  .DontMove:
00001120                           284  
00001120  4EF8 10BA                285      jmp     EndBallUpdate
00001124                           286  
00001124                           287  
00001124                           288  BallDropping:
00001124                           289  
00001124  4EB9 00001664            290      jsr     CheckWallCollision
0000112A  B0BC 00000001            291      cmp.l   #(TRUE), d0
00001130  6600 0014                292      bne     .BallNotColWithWall 
00001134                           293  
00001134  0C39 0001 0051CD8F       294      cmp.b   #(TRUE), (BallJustWallCol)
0000113C  6600 0084                295      bne     .JustWallCollided
00001140                           296  
00001140  4EF9 00001202            297      jmp     .ContinueBallUpdate
00001146                           298  
00001146                           299  .BallNotColWithWall:
00001146                           300  
00001146  13FC 0000 0051CD8F       301      move.b  #(FALSE), (BallJustWallCol)
0000114E  4EF9 00001154            302      jmp     .MoveOnToPegs
00001154                           303  
00001154                           304  .MoveOnToPegs:
00001154                           305      ;check collisions with pegs
00001154                           306  
00001154  43F9 0051CDA8            307      lea     PegsXs, a1
0000115A  45F9 0051CDF0            308      lea     PegsYs, a2
00001160  2E39 0051CE40            309      move.l  (NumberOfPegs), d7
00001166                           310  
00001166                           311  .NextPeg:
00001166                           312      
00001166                           313      ;get current peg
00001166  2039 0051CE44            314      move.l (LoopCounter), d0
0000116C  E588                     315      lsl.l   #2, d0
0000116E  2F31 0000                316      move.l  (a1, d0), -(sp) ;push y to the stack
00001172  2F32 0000                317      move.l  (a2, d0), -(sp) ;push x to the stack
00001176                           318  
00001176  4EB9 0000168C            319      jsr     CheckPegCollision
0000117C                           320      ;free stack
0000117C  508F                     321      add.l   #(STACK_OFFSET_IN_PEG_COL), sp
0000117E                           322  
0000117E  B0BC 00000001            323      cmp.l   #(TRUE), d0     ;if colliding, end the loop
00001184  6700 001C                324      beq     .EndPegLoop
00001188                           325  
00001188  52B9 0051CE44            326      add.l   #1, (LoopCounter) 
0000118E  5387                     327      sub.l   #1, d7          ;else, if there are other oegs, check them, else no collision in this frame
00001190  66D4                     328      bne     .NextPeg
00001192                           329  
00001192                           330      ;reinit loop counter
00001192  23FC 00000000 0051CE44   331      move.l  #0, (LoopCounter)
0000119C                           332  
0000119C  4EF9 000011B4            333      jmp     .NotColliding
000011A2                           334  
000011A2                           335  .EndPegLoop:
000011A2                           336      ;check if it just collided
000011A2  0C39 0001 0051CD8E       337      cmp.b   #(TRUE), (BallJustPegCol)
000011AA  6600 0036                338      bne     .JustPegCollided
000011AE                           339  
000011AE  4EF9 00001202            340      jmp     .ContinueBallUpdate
000011B4                           341  
000011B4                           342  .NotColliding:
000011B4                           343  
000011B4  13FC 0000 0051CD8E       344      move.b  #(FALSE), (BallJustPegCol)
000011BC  4EF9 00001202            345      jmp     .ContinueBallUpdate
000011C2                           346  
000011C2                           347  .JustWallCollided:  
000011C2                           348  
000011C2                           349      ;bounce
000011C2  4EB9 0000172E            350      jsr BounceBallOffWall
000011C8                           351  
000011C8  43F9 004EC018            352      lea     WallCollisionSound, a1
000011CE  4EB9 00001314            353      jsr     PlaySound
000011D4                           354  
000011D4                           355  
000011D4  13FC 0001 0051CD8F       356      move.b  #(TRUE), (BallJustWallCol)
000011DC  4EF9 0000124A            357      jmp     .DontMove
000011E2                           358  
000011E2                           359  
000011E2                           360  .JustPegCollided:   
000011E2                           361  
000011E2                           362      ;bounce
000011E2  4EB9 0000173E            363      jsr BounceBallOffPeg
000011E8                           364  
000011E8                           365      ;set sound to play to a1
000011E8  43F9 004EC00A            366      lea     CollisionSound, a1
000011EE  4EB9 00001314            367      jsr     PlaySound
000011F4                           368  
000011F4  13FC 0001 0051CD8E       369      move.b  #(TRUE), (BallJustPegCol)
000011FC  4EF9 0000124A            370      jmp     .DontMove
00001202                           371  
00001202                           372  .ContinueBallUpdate:
00001202                           373  .SkipBounceOffPeg:
00001202                           374  
00001202  0CB9 0000027C 0051CD98   375      cmp.l   #(BOTTOM_RIGHT_BOARD_Y_POS-BALL_HEIGHT), (BallYPosition)
0000120C  6C00 0040                376      bge     .AddScore 
00001210                           377  
00001210                           378      ;update x pos
00001210  2039 0051CD90            379      move.l  (BallXPosition),d0
00001216  E188                     380      lsl.l   #8,d0
00001218                           381      
00001218  D0B9 0051CDA0            382      add.l   (BallXVelocity), d0
0000121E  23C0 0051CD94            383      move.l  d0, (BallXPositionFixed)
00001224                           384  
00001224                           385  
00001224                           386      ;update Y vel
00001224  06B9 00000030 0051CDA4   387      add.l   #(BALL_Y_ACCELERATION), (BallYVelocity)
0000122E                           388  
0000122E                           389      ;add the velocity to the y pos
0000122E  2039 0051CD98            390      move.l  (BallYPosition),d0
00001234  E188                     391      lsl.l   #8,d0
00001236                           392      
00001236  D0B9 0051CDA4            393      add.l   (BallYVelocity), d0
0000123C  23C0 0051CD9C            394      move.l  d0, (BallYPositionFixed)
00001242                           395  
00001242  13FC 0001 0051CD8D       396      move.b  #(TRUE), BallMoved
0000124A                           397  
0000124A                           398  
0000124A                           399  .DontMove:
0000124A                           400  
0000124A  4EF8 10BA                401      jmp     EndBallUpdate
0000124E                           402  
0000124E                           403  .AddScore:
0000124E                           404      
0000124E  203C 00000003            405      move.l  #(EndScoresInGame-ScoresInGame), d0
00001254  4DF9 0051CE72            406      lea     ScoresBounds, a6
0000125A                           407  
0000125A  4283                     408      clr.l   d3      ;counter
0000125C  2839 0051CD90            409      move.l (BallXPosition), d4
00001262  0684 00000032            410      add.l   #(BALL_WIDTH),d4
00001268                           411  
00001268                           412  .ScoreLoop:
00001268                           413  
00001268  221E                     414      move.l (a6)+, d1
0000126A  241E                     415      move.l (a6)+, d2
0000126C                           416  
0000126C  B284                     417      cmp.l   d4, d1
0000126E  6E00 0008                418      bgt     .NextIteration
00001272                           419  
00001272  B484                     420      cmp.l   d4, d2
00001274  6C00 000E                421      bge     .FoundScore
00001278                           422  
00001278                           423  
00001278                           424  .NextIteration:
00001278                           425  
00001278  5283                     426      add.l   #1, d3
0000127A  5380                     427      sub.l   #1, d0
0000127C  66EA                     428      bne     .ScoreLoop
0000127E                           429  
0000127E  4EF9 00001296            430      jmp     .ExitLoop       
00001284                           431  
00001284                           432  .FoundScore:
00001284                           433  
00001284  4281                     434      clr.l   d1
00001286  4DF9 0051CE8A            435      lea     ScoresInGame, a6
0000128C  DDC3                     436      add.l   d3, a6
0000128E  1216                     437      move.b  (a6), d1
00001290  D3B9 0051CE6E            438      add.l   d1, (Score)
00001296                           439  
00001296                           440  .ExitLoop:
00001296                           441      
00001296                           442      ;set sound to play to a1
00001296  43F9 004EC02A            443      lea     ScoreSound, a1
0000129C  4EB9 00001314            444      jsr     PlaySound
000012A2                           445  
000012A2  13FC 0001 0051CE4C       446      move.b  #(TRUE), (HaveToRestart)
000012AA  4EF8 10BA                447      jmp     EndBallUpdate
000012AE                           448  
000012AE                           449  RestartGame:
000012AE                           450  
000012AE  5239 0051CE6A            451      add.b   #1, (UsedBalls)
000012B4  13FC 0000 0051CE4C       452      move.b  #(FALSE), (HaveToRestart)
000012BC  13FC 0001 0051CD8D       453      move.b  #(TRUE), (BallMoved)
000012C4  13FC 0000 0051CD8C       454      move.b  #(FALSE), (BallDropped)
000012CC                           455  
000012CC                           456      ;reset pos
000012CC  203C 000000F9            457      move.l  #(BALL_INITIAL_X_POS), d0
000012D2  E188                     458      lsl.l   #(FRACTION_BITS), d0
000012D4  23C0 0051CD94            459      move.l  d0, (BallXPositionFixed)
000012DA                           460  
000012DA  7030                     461      move.l  #(BALL_INITIAL_Y_POS), d0
000012DC  E188                     462      lsl.l   #(FRACTION_BITS), d0
000012DE  23C0 0051CD9C            463      move.l  d0, (BallYPositionFixed)
000012E4                           464  
000012E4                           465  
000012E4                           466      ;reset velocity
000012E4  23FC 00000000 0051CDA0   467      move.l  #0, BallXVelocity
000012EE  23FC 00000000 0051CDA4   468      move.l  #0, BallYVelocity
000012F8                           469  
000012F8                           470  
000012F8  4EB9 0000140A            471      jsr OverrideScore
000012FE  4EB9 000018F8            472      jsr UpdateScoreLed
00001304                           473  
00001304  4EB9 00001418            474      jsr OverrideBalls
0000130A  4EB9 00001970            475      jsr UpdateBallsLed
00001310                           476  
00001310  4EF8 10BA                477      jmp     EndBallUpdate
00001314                           478  
00001314                           479  
00001314                           480  PlaySound:
00001314                           481  
00001314  7049                     482      move.l  #(PLAY_SOUND_COMMAND), d0
00001316  4E4F                     483      Trap    #15
00001318                           484  
00001318  4E75                     485      rts
0000131A                           486  
0000131A                           487  
0000131A                           488  SetFrameBeginTime:
0000131A                           489  
0000131A                           490      ;get current time
0000131A  7008                     491      move.l  #(GET_TIME_COMMAND), d0
0000131C  4E4F                     492      Trap    #15
0000131E                           493      ;set FrameBeginTime
0000131E  23C1 0051CD78            494      move.l  d1, (FrameBeginTime)
00001324                           495  
00001324  4E75                     496      rts
00001326                           497  
00001326                           498  
00001326                           499  WaitToEndFrame:
00001326                           500  
00001326  2439 0051CD78            501      move.l  (FrameBeginTime),d2
0000132C                           502  
0000132C                           503  .LoopAgain:
0000132C                           504      ;get current time
0000132C  7008                     505      move.l  #(GET_TIME_COMMAND), d0
0000132E  4E4F                     506      Trap    #15
00001330                           507      
00001330                           508      ;get DeltaTime in d1
00001330  9282                     509      sub.l   d2,d1
00001332                           510  
00001332  B2BC 00000001            511      cmp.l   #(TIME_PER_FRAME), d1
00001338  6DF2                     512      blt     .LoopAgain
0000133A                           513  
0000133A  4E75                     514      rts
0000133C                           515  
0000133C                           516  SetSomeVars:
0000133C                           517  
0000133C  4EB9 000018BE            518      jsr     SeedRandomNumber
00001342  4EB9 0000134A            519      jsr     RandomizeXVel
00001348                           520  
00001348  4E75                     521      rts
0000134A                           522  
0000134A                           523  
0000134A                           524  RandomizeXVel:
0000134A                           525  
0000134A  4EB9 00001824            526      jsr     GetRandomXVel
00001350  23C0 0051CDA0            527      move.l  d0, (BallXVelocity)
00001356                           528  
00001356  4E75                     529      rts
00001358                           530  
00001358                           531  
00001358                           532      include "InputHandler.x68"
00001358                           533  
00001358                           534  
00001358                           535  HandleInput:  
00001358                           536  
00001358                           537      ;reset PlayerInput
00001358  23FC 00000000 0051CD74   538      move.l  #0,(PlayerInput)
00001362                           539      ;Set the inputs    
00001362  7013                     540      move.l  #(INPUT_COMMAND),d0
00001364                           541      ;d1: $00202527 => space, left arrow, right arrow
00001364                           542      ;move.l  $20<<$16+$25<<$8+$27,d1
00001364  7220                     543      move.l  #(SPACE_KEY),d1
00001366  E189                     544      lsl.l   #8,d1
00001368  123C 0025                545      move.b  #(LEFT_ARROW),d1
0000136C  E189                     546      lsl.l   #8,d1
0000136E  123C 0027                547      move.b  #(RIGHT_ARROW),d1
00001372                           548  
00001372  4E4F                     549      Trap    #15
00001374                           550  
00001374                           551      ;check if ball is droped, if yes skip
00001374  0C39 0001 0051CD8C       552      cmpi.b  #(TRUE),(BallDropped)
0000137C  6700 001A                553      beq     EndHandleInput
00001380                           554  
00001380                           555      ;check the pressed key and call subroutines accordingly
00001380  0801 0010                556      btst.l  #(SPACE_KEY_LOCATION), d1       
00001384  6600 0014                557      bne     DropBallInput
00001388                           558  
00001388  0801 0008                559      btst.l  #(LEFT_ARROW_LOCATION), d1       
0000138C  6600 001A                560      bne     MoveBallToLeftInput
00001390                           561  
00001390  0801 0000                562      btst.l  #(RIGHT_ARROW_LOCATION), d1       
00001394  6600 0026                563      bne     MoveBallToRightInput
00001398                           564  
00001398                           565  EndHandleInput:
00001398                           566  
00001398  4E75                     567      rts
0000139A                           568  
0000139A                           569  DropBallInput:
0000139A                           570  
0000139A  23FC 00000001 0051CD74   571      move.l #1,(PlayerInput)
000013A4                           572  
000013A4  4EF8 1398                573      jmp EndHandleInput
000013A8                           574  
000013A8                           575  MoveBallToLeftInput:
000013A8                           576      
000013A8                           577      ;if both arrows are pressed, do nothing
000013A8  0801 0000                578      btst.l  #(RIGHT_ARROW_LOCATION), d1       
000013AC  66EA                     579      bne     EndHandleInput
000013AE                           580  
000013AE  23FC 00000002 0051CD74   581      move.l #2,(PlayerInput)
000013B8                           582  
000013B8  4EF8 1398                583      jmp     EndHandleInput
000013BC                           584  
000013BC                           585  MoveBallToRightInput:
000013BC                           586      
000013BC  23FC 00000003 0051CD74   587      move.l #3,(PlayerInput)  
000013C6                           588  
000013C6  4EF8 1398                589      jmp     EndHandleInput
000013CA                           590    
000013CA                           591  -------------------- end include --------------------
000013CA                           592      include "drawingModule.X68"
000013CA                           593  ; this module contains drawing related subroutines
000013CA                           594  
000013CA                           595  DrawAllBackground:
000013CA                           596      
000013CA  41F9 00001DB2            597      lea BackgroundBitmap, a0
000013D0                           598  
000013D0  4EB9 0000144E            599      jsr SetFirstDrawParams
000013D6  4EB9 00001534            600      jsr DrawPic
000013DC                           601  
000013DC  4E75                     602      rts
000013DE                           603  
000013DE                           604  DrawLoading:
000013DE                           605  
000013DE  41F9 00277DD2            606      lea LoadingBitmap, a0
000013E4                           607  
000013E4  4EB9 0000144E            608      jsr SetFirstDrawParams
000013EA  4EB9 00001534            609      jsr DrawPic
000013F0                           610  
000013F0                           611  
000013F0                           612  DrawBackgroundChunk:
000013F0                           613      
000013F0  0C39 0000 0051CD8D       614      cmp.b #(FALSE),(BallMoved)
000013F8  6700 000E                615      beq .DontDraw
000013FC                           616      
000013FC                           617      ;override the ball
000013FC  4EB9 00001470            618      jsr SetBgDrawParams
00001402  4EB9 00001534            619      jsr DrawPic
00001408                           620  
00001408                           621  
00001408                           622  
00001408                           623  .DontDraw:
00001408  4E75                     624      rts
0000140A                           625  
0000140A                           626  OverrideScore:
0000140A                           627  
0000140A                           628      ;override the score
0000140A  4EB9 000014A2            629      jsr SetBgDrawParamsSc
00001410  4EB9 00001534            630      jsr DrawPic
00001416                           631  
00001416  4E75                     632      rts    
00001418                           633  
00001418                           634  OverrideBalls:
00001418                           635  
00001418                           636      ;override the score
00001418  4EB9 000014CC            637      jsr SetBgDrawParamsBl
0000141E  4EB9 00001534            638      jsr DrawPic
00001424                           639  
00001424  4E75                     640      rts      
00001426                           641  
00001426                           642  DrawBallFirstTime:
00001426                           643  
00001426  13FC 0001 0051CD8D       644      move.b  #(TRUE), (BallMoved)
0000142E                           645  
0000142E  4EF9 00001434            646      jmp     DrawBall
00001434                           647  
00001434                           648  DrawBall:
00001434                           649  
00001434  0C39 0000 0051CD8D       650      cmp.b #(FALSE),(BallMoved)
0000143C  6700 000E                651      beq .DontDraw
00001440                           652  
00001440  4EB9 000014FE            653      jsr SetBallDrawParams
00001446  4EB9 00001534            654      jsr DrawPic
0000144C                           655  
0000144C                           656  .DontDraw:
0000144C  4E75                     657      rts
0000144E                           658  
0000144E                           659  
0000144E                           660  SetFirstDrawParams:
0000144E                           661  
0000144E                           662      ;set draw start position to 0,0    
0000144E  223C 00000320            663      move.l  #(OUTPUT_WINDOW_HEIGHT),d1  ;y
00001454  4841                     664      swap    d1
00001456  323C 0000                665      move.w  #0,d1                       ;x
0000145A                           666      
0000145A                           667      ;set chunk start position to 0,0    
0000145A  7400                     668      move.l  #0,d2                       ;y
0000145C  4842                     669      swap    d2
0000145E  343C 0000                670      move.w  #0,d2                       ;x
00001462                           671      
00001462                           672      ;set chunk width and height to the screen resol
00001462  263C 0000042F            673      move.l  #(OUTPUT_WINDOW_WIDTH),d3
00001468  4843                     674      swap    d3
0000146A  363C 0320                675      move.w  #(OUTPUT_WINDOW_HEIGHT),d3
0000146E                           676      
0000146E  4E75                     677      rts
00001470                           678  
00001470                           679  SetBgDrawParams:
00001470                           680  
00001470  41F9 00001DB2            681      lea BackgroundBitmap, a0
00001476                           682  
00001476                           683      ;set draw start position   
00001476  2239 0051CD98            684      move.l  (BallYPosition),d1           
0000147C  0681 00000032            685      add.l   #(BALL_HEIGHT),d1               ;y
00001482  4841                     686      swap    d1
00001484  D2B9 0051CD90            687      add.l   (BallXPosition),d1              ;x
0000148A                           688      ;sub.l   #(BALL_OFFSET),d1
0000148A                           689      
0000148A                           690      ;set chunk start position
0000148A  2439 0051CD98            691      move.l  (BallYPosition),d2              ;y          
00001490  4842                     692      swap    d2
00001492  D4B9 0051CD90            693      add.l  (BallXPosition),d2               ;x
00001498                           694      
00001498                           695      ;set chunk width and height
00001498  7632                     696      move.l  #(BALL_WIDTH),d3                
0000149A  4843                     697      swap    d3
0000149C  363C 0032                698      move.w  #(BALL_HEIGHT),d3               
000014A0                           699      
000014A0  4E75                     700      rts
000014A2                           701  
000014A2                           702  SetBgDrawParamsSc:
000014A2                           703  
000014A2  41F9 00001DB2            704      lea BackgroundBitmap, a0
000014A8                           705  
000014A8                           706      ;set draw start position   
000014A8  7251                     707      move.l  #(SCORE_LED_START_Y_OVER),d1           
000014AA  0681 00000034            708      add.l   #(SCORE_LED_DIGIT_HEIGHT_OV),d1    ;y
000014B0  4841                     709      swap    d1
000014B2  0681 0000002A            710      add.l  #(SCORE_LED_START_X_OVER),d1         ;x  
000014B8                           711  
000014B8                           712      
000014B8                           713      ;set chunk start position
000014B8  7451                     714      move.l  #(SCORE_LED_START_Y_OVER),d2          ;y    
000014BA  4842                     715      swap    d2
000014BC  0682 0000002A            716      add.l  #(SCORE_LED_START_X_OVER),d2           ;x
000014C2                           717  
000014C2                           718      ;set chunk width and height
000014C2  7673                     719      move.l  #(SCORE_LED_DIGIT_WIDTH_OV),d3     
000014C4  4843                     720      swap    d3
000014C6  363C 0034                721      move.w  #(SCORE_LED_DIGIT_HEIGHT_OV),d3
000014CA                           722                 
000014CA                           723      
000014CA  4E75                     724      rts
000014CC                           725  
000014CC                           726  SetBgDrawParamsBl:
000014CC                           727  
000014CC  41F9 00001DB2            728      lea BackgroundBitmap, a0
000014D2                           729  
000014D2                           730      ;set draw start position   
000014D2  223C 00000192            731      move.l  #(BALLS_LED_START_Y_OVER),d1           
000014D8  0681 00000034            732      add.l   #(BALLS_LED_DIGIT_HEIGHT_OV),d1    ;y
000014DE  4841                     733      swap    d1
000014E0  0681 0000002A            734      add.l  #(BALLS_LED_START_X_OVER),d1         ;x  
000014E6                           735  
000014E6                           736      
000014E6                           737      ;set chunk start position
000014E6  243C 00000192            738      move.l  #(BALLS_LED_START_Y_OVER),d2          ;y    
000014EC  4842                     739      swap    d2
000014EE  0682 0000002A            740      add.l  #(BALLS_LED_START_X_OVER),d2           ;x
000014F4                           741  
000014F4                           742      ;set chunk width and height
000014F4  7673                     743      move.l  #(BALLS_LED_DIGIT_WIDTH_OV),d3     
000014F6  4843                     744      swap    d3
000014F8  363C 0034                745      move.w  #(BALLS_LED_DIGIT_HEIGHT_OV),d3
000014FC                           746                 
000014FC                           747      
000014FC  4E75                     748      rts
000014FE                           749  
000014FE                           750  
000014FE                           751  
000014FE                           752  SetBallDrawParams:
000014FE                           753  
000014FE  41F9 00275FEA            754      lea BallBitmap, a0
00001504                           755  
00001504                           756      ;set draw start position   
00001504  7232                     757      move.l  #(BALL_HEIGHT),d1
00001506  2E39 0051CD9C            758      move.l  (BallYPositionFixed),d7
0000150C  E08F                     759      lsr.l   #(FRACTION_BITS),d7
0000150E  D287                     760      add.l   d7,d1
00001510                           761      ;update the y position
00001510  23C7 0051CD98            762      move.l  d7, (BallYPosition)
00001516                           763            
00001516  4841                     764      swap    d1
00001518                           765  
00001518  2E39 0051CD94            766      move.l  (BallXPositionFixed),d7
0000151E  E08F                     767      lsr.l   #(FRACTION_BITS),d7
00001520  3207                     768      move.w  d7, d1
00001522                           769      ;update the x position
00001522  23C7 0051CD90            770      move.l  d7, (BallXPosition)
00001528                           771  
00001528                           772      
00001528                           773      ;set chunk start position
00001528  7400                     774      move.l  #0,d2 
0000152A                           775      
0000152A                           776      ;set chunk width and height
0000152A  7632                     777      move.l  #(BALL_WIDTH),d3
0000152C  4843                     778      swap    d3
0000152E  363C 0032                779      move.w  #(BALL_HEIGHT),d3
00001532                           780      
00001532  4E75                     781      rts
00001534                           782  
00001534                           783       
00001534                           784  DrawPic:
00001534                           785      ;push the first pixel pos
00001534  2C48                     786      move.l  a0, a6
00001536  4EB9 00001624            787      jsr GetFirstPixelAddress
0000153C  2F0E                     788      move.l  a6, -(sp)                               
0000153E                           789      
0000153E                           790      ;push image width
0000153E  2C48                     791      move.l  a0, a6
00001540  4EB9 0000163C            792      jsr GetImageWidth
00001546  2F00                     793      move.l  d0,-(sp)
00001548                           794      
00001548                           795      ;push image height
00001548  2C48                     796      move.l  a0, a6
0000154A  4EB9 0000164C            797      jsr GetImageHeight
00001550  2F00                     798      move.l  d0,-(sp)
00001552                           799  
00001552                           800      ;push the draw start pos
00001552  4284                     801      clr.l   d4
00001554  3801                     802      move.w  d1, d4
00001556  2F04                     803      move.l  d4,-(sp)    ;push x
00001558  4841                     804      swap    d1
0000155A  3801                     805      move.w  d1,d4
0000155C  2F04                     806      move.l  d4,-(sp)    ;push y
0000155E                           807      
0000155E                           808      ;push the chunk start pos
0000155E  3802                     809      move.w  d2,d4
00001560  2F04                     810      move.l  d4,-(sp)    ;push x
00001562                           811      ;convert the y pos of chunk to bitmap coor
00001562  4842                     812      swap    d2
00001564  3802                     813      move.w  d2,d4
00001566  D843                     814      add.w   d3,d4           ;add chunk height
00001568                           815      ;d0 have the image height
00001568  2200                     816      move.l  d0,d1 
0000156A  9284                     817      sub.l   d4,d1
0000156C  2F01                     818      move.l  d1, -(sp)   ;push y
0000156E                           819      
0000156E                           820      ;push the chunk dimensions
0000156E  4843                     821      swap    d3
00001570  3803                     822      move.w  d3, d4  
00001572  2F04                     823      move.l  d4,-(sp)    ;push width
00001574  4843                     824      swap    d3
00001576  3803                     825      move.w  d3, d4
00001578  2F04                     826      move.l  d4,-(sp)    ;push height
0000157A                           827   
0000157A  4EB9 00001588            828      jsr DrawAChunk
00001580                           829      
00001580                           830      ;reinit the stack pointer
00001580  DFFC 00000028            831      add.l   #(STACK_OFFSET_WHEN_DRAWING),sp
00001586  4E75                     832      rts                
00001588                           833      
00001588                           834  DrawAChunk:
00001588                           835      
00001588  2E2F 0020                836      move.l  IMAGE_WIDTH_STACK_OFFSET(sp),d7                 ;get the image width into d7
0000158C  0287 00000003            837      andi.l  #3,d7                                           ;get the rest of division by 4, which is the padding     
00001592                           838      
00001592  286F 0024                839      move.l  FIRST_PIXEL_ADDRESS_STACK_OFFSET(sp),a4         ;a4 points to the first pixel
00001596                           840      
00001596  222F 0020                841      move.l  IMAGE_WIDTH_STACK_OFFSET(sp),d1                 ;image width into d1
0000159A  2401                     842      move.l  d1, d2                                          ;temp value to avoid mul
0000159C  D282                     843      add.l   d2, d1
0000159E  D282                     844      add.l   d2, d1                                          ;get the width number of bytes
000015A0  DE81                     845      add.l   d1,d7                                           ;width bytes
000015A2                           846      
000015A2  2407                     847      move.l  d7, d2                                          ;store width bytes into d2
000015A4                           848      
000015A4  222F 000C                849      move.l  CHUNK_Y_POS_STACK_OFFSET(sp),d1                 ;get the chunk y pos
000015A8  C4C1                     850      mulu.w  d1,d2                                           ;mutiply the y with the width bytes to get the y bytes offset
000015AA                           851      
000015AA  202F 0010                852      move.l  CHUNK_X_POS_STACK_OFFSET(sp),d0                 ;put chunk x start pos into d0
000015AE  2200                     853      move.l  d0, d1                                          ;temp value to avoid mul
000015B0  D081                     854      add.l   d1, d0
000015B2  D081                     855      add.l   d1, d0                                          ;get the x number of bytes
000015B4                           856      
000015B4  D480                     857      add.l   d0,d2                                           ;add the x bytes to the y bytes offset to have the total offset
000015B6                           858      
000015B6  D9C2                     859      add.l   d2, a4                                          ;add the offset to get the new first position
000015B8                           860      
000015B8  7A00                     861      move.l  #0, d5                                          ;x counter
000015BA  7C00                     862      move.l  #0, d6                                          ;y counter
000015BC                           863      
000015BC                           864      
000015BC                           865  DrawColumn:
000015BC                           866      ;set pen color
000015BC  4281                     867      clr.l d1
000015BE  121C                     868      move.b   (a4)+,d1                                       ;set blue
000015C0  E189                     869      lsl.l   #8,d1                                           ;shift the byte to the left
000015C2  121C                     870      move.b  (a4)+,d1                                        ;set green
000015C4  E189                     871      lsl.l   #8,d1                                           ;shift the byte to the left
000015C6  121C                     872      move.b  (a4)+,d1                                        ;set red    => d1 has 00BBGGRR
000015C8                           873      
000015C8                           874      ;if green, skip that pixel
000015C8  B2BC 0000FF00            875      cmp.l   #(GREEN),d1
000015CE  6700 0018                876      beq     NextPixel
000015D2                           877      
000015D2  7050                     878      move.l  #SET_PEN_COLOR_COMMAND, d0
000015D4  4E4F                     879      Trap #15
000015D6                           880      
000015D6                           881      ;draw a pixel
000015D6                           882      ;set x in d1 and y in d2
000015D6  4281                     883      clr.l   d1
000015D8  222F 0018                884      move.l  DRAW_X_POS_STACK_OFFSET(sp),d1                                               
000015DC  D285                     885      add.l   d5,d1                                           ;set x position on screen
000015DE                           886      
000015DE  242F 0014                887      move.l  DRAW_Y_POS_STACK_OFFSET(sp),d2
000015E2  9486                     888      sub.l   d6,d2                                           ;set the y position on screen
000015E4                           889      
000015E4  7052                     890      move.l  #DRAW_A_PIXEL_COMMAND, d0
000015E6  4E4F                     891      Trap #15
000015E8                           892  
000015E8                           893  NextPixel:    
000015E8  5285                     894      addi.l  #1, d5                                          ;increment x counter
000015EA  202F 0008                895      move.l  CHUNK_WIDTH_STACK_OFFSET(sp),d0
000015EE  BA80                     896      cmp.l  d0,d5
000015F0  66CA                     897      bne DrawColumn                                          ;if not done with the column, continue drawing
000015F2                           898      
000015F2  5286                     899      addi.l  #1, d6                                          ;increment y counter
000015F4  202F 0004                900      move.l  CHUNK_HEIGHT_STACK_OFFSET(sp),d0
000015F8  BC80                     901      cmp.l   d0,d6
000015FA  6700 0018                902      beq     DrawEnd                                         ;if done with the rows, then stop drawing
000015FE                           903      
000015FE  7A00                     904      move.l  #0, d5                                          ;reset x counter
00001600  222F 0008                905      move.l  CHUNK_WIDTH_STACK_OFFSET(sp),d1                 ;put chunk width in d1
00001604  2001                     906      move.l  d1, d0                                          ;d0 has the temp to avoid mul
00001606  D280                     907      add.l   d0, d1
00001608  D280                     908      add.l   d0, d1                                          ;multiply it by 3 to get the bytes number
0000160A                           909      
0000160A  2007                     910      move.l  d7, d0                                          ;d0 = width bytes
0000160C  9081                     911      sub.l   d1,d0                                           ;sub the chunk bytes from the width bytes
0000160E  D9C0                     912      add.l   d0, a4                                          ;and then add it to a4 to get the next pixel
00001610                           913      
00001610  4EF8 15BC                914      jmp DrawColumn                                          ;draw next column
00001614                           915  
00001614                           916  DrawEnd:
00001614                           917  
00001614  4E75                     918      rts
00001616                           919  
00001616                           920  
00001616                           921  EnableDoubleBuffer:
00001616                           922      ;double buffering mode enabled
00001616  705C                     923      move.l  #SET_DRAWING_MODE_COMMAND, d0
00001618  7211                     924      move.l  #DOUBLE_BUFFERING_MODE, d1
0000161A  4E4F                     925      Trap    #15
0000161C                           926  
0000161C  4E75                     927      rts
0000161E                           928  
0000161E                           929  PaintScreenBuffer:
0000161E                           930      ;repaint screen from buffer
0000161E  705E                     931      move.l  #REPAINT_SCREEN_COMMAND, d0
00001620  4E4F                     932      Trap    #15
00001622                           933          
00001622  4E75                     934      rts    
00001624                           935  
00001624                           936  ;param a6:image address
00001624                           937  GetFirstPixelAddress:
00001624  DDFC 0000000A            938      add.l   #(OFFSET_TO_PIXEL_ARRAY),a6                     ;a6 has the pixel offset address
0000162A  2016                     939      move.l  (a6),d0                                         ;put it in d0
0000162C  4EB9 0000165C            940      jsr SwapBytes                                           ;swap to get the right value
00001632  DDC0                     941      add.l   d0,a6                                           ;a6 has the 0, h-1 pixel address
00001634  9DFC 0000000A            942      sub.l   #(OFFSET_TO_PIXEL_ARRAY),a6
0000163A                           943      
0000163A  4E75                     944      rts
0000163C                           945  
0000163C                           946  ;param a6:imaage address, return d0: image width
0000163C                           947  
0000163C                           948  GetImageWidth:
0000163C  DDFC 00000012            949      add.l   #(OFFSET_IMAGE_WIDTH),a6                        ;a6 has the image width address
00001642  2016                     950      move.l  (a6),d0                                         ;put it in d0
00001644  4EB9 0000165C            951      jsr SwapBytes                                           ;swap to get the right value
0000164A                           952      
0000164A  4E75                     953      rts
0000164C                           954  
0000164C                           955  ;param a6:imaage address, return d0: image height
0000164C                           956  GetImageHeight:
0000164C  DDFC 00000016            957      add.l   #(OFFSET_IMAGE_HEIGHT),a6                       ;a6 has the image width address
00001652  2016                     958      move.l  (a6),d0                                         ;put it in d0
00001654  4EB9 0000165C            959      jsr SwapBytes                                           ;swap to get the right value
0000165A                           960  
0000165A  4E75                     961      rts
0000165C                           962  
0000165C                           963  
0000165C                           964  SwapBytes:
0000165C                           965      ;DDCCBBAA
0000165C  E158                     966      rol.w   #8,d0   ;DDCCAABB
0000165E  4840                     967      swap.w    d0    ;AABBDDCC
00001660  E158                     968      rol.w   #8,d0   ;AABBCCDD
00001662                           969      
00001662  4E75                     970      rts
00001664                           971  
00001664                           972  
00001664                           973          
00001664                           974  
00001664                           975  
00001664                           976  
00001664                           977  
00001664                           978  
00001664                           979  
00001664                           980  
00001664                           981  
00001664                           982  
00001664                           983  
00001664                           984  -------------------- end include --------------------
00001664                           985      include "CollisionModule.x68"
00001664                           986  ;Collision related logic
00001664                           987  
00001664                           988  CheckWallCollision:
00001664                           989  
00001664                           990      ;check if in bounds
00001664  0CB9 000000F9 0051CD90   991      cmp.l   #(TOP_LEFT_BOARD_X_POS), (BallXPosition)
0000166E  6F00 0018                992      ble     .Collided
00001672                           993  
00001672  0CB9 0000030A 0051CD90   994      cmp.l   #(BOTTOM_RIGHT_BOARD_X_POS-BALL_WIDTH), (BallXPosition)
0000167C  6C00 000A                995      bge     .Collided
00001680                           996  
00001680  7000                     997      move.l  #(FALSE),d0
00001682                           998  
00001682  4EF9 0000168A            999      jmp .EndCheck
00001688                          1000  
00001688                          1001  .Collided:
00001688                          1002  
00001688  7001                    1003      move.l  #(TRUE), d0
0000168A                          1004  
0000168A                          1005  .EndCheck:
0000168A                          1006  
0000168A  4E75                    1007      rts
0000168C                          1008  
0000168C                          1009  
0000168C                          1010  CheckPegCollision:
0000168C                          1011      
0000168C                          1012      ;movem.l    ALL_REG, -(sp)
0000168C                          1013      ;set params
0000168C  2039 0051CD90           1014      move.l  (BallXPosition), d0
00001692  0680 00000019           1015      add.l   #(BALL_RADIUS), d0  ;shift to center
00001698  2239 0051CD98           1016      move.l  (BallYPosition), d1
0000169E  0681 00000019           1017      add.l   #(BALL_RADIUS), d1  ;shift to center
000016A4                          1018  
000016A4  242F 0008               1019      move.l  CURRENT_PEG_X_STACK_OFFSET(sp),d2
000016A8  262F 0004               1020      move.l  CURRENT_PEG_Y_STACK_OFFSET(sp),d3
000016AC                          1021  
000016AC                          1022      ;check if we even should do collision check
000016AC                          1023      ;dy is first
000016AC  B681                    1024      cmp.l   d1,d3 
000016AE  6C00 000C               1025      bge     .SubBallYPegY ; if peg y bigger
000016B2                          1026      
000016B2  9283                    1027      sub.l   d3,d1
000016B4  2A01                    1028      move.l  d1,d5               ;dy
000016B6  4EF9 000016C0           1029      jmp     .CheckDy
000016BC                          1030  
000016BC                          1031  .SubBallYPegY:
000016BC                          1032  
000016BC  9681                    1033      sub.l   d1,d3
000016BE  2A03                    1034      move.l  d3, d5              ;dy
000016C0                          1035  
000016C0                          1036  .CheckDy:
000016C0                          1037  
000016C0  BABC 0000002A           1038      cmp.l   #(MIN_DY_TO_CHECK_COLLISION), d5
000016C6  6E00 0062               1039      bgt     .DidntCollide
000016CA                          1040  
000016CA                          1041      ;dx is second
000016CA  B480                    1042      cmp.l   d0,d2 
000016CC  6C00 000C               1043      bge     .SubBallXPegX ; if peg x bigger
000016D0                          1044      
000016D0  9082                    1045      sub.l   d2,d0
000016D2  2800                    1046      move.l  d0,d4               ;dx
000016D4  4EF9 000016DE           1047      jmp     .CheckDx
000016DA                          1048  
000016DA                          1049  .SubBallXPegX:
000016DA                          1050  
000016DA  9480                    1051      sub.l   d0,d2
000016DC  2802                    1052      move.l  d2, d4              ;dx
000016DE                          1053  
000016DE                          1054  .CheckDx:
000016DE                          1055  
000016DE  B8BC 0000002A           1056      cmp.l   #(MIN_DX_TO_CHECK_COLLISION), d4
000016E4  6E00 0044               1057      bgt     .DidntCollide
000016E8                          1058  
000016E8                          1059      ;store the closest peg coor
000016E8  23EF 0008 0051CE38      1060      move.l  CURRENT_PEG_X_STACK_OFFSET(sp),(ClosestPegX)
000016F0  23EF 0004 0051CE3C      1061      move.l  CURRENT_PEG_Y_STACK_OFFSET(sp),(ClosestPegY)
000016F8                          1062  
000016F8                          1063      ;if we're here. we check for collision
000016F8  2004                    1064      move.l  d4,d0   ;dx
000016FA  C0C4                    1065      mulu.w  d4,d0   ;d0 = dx^2
000016FC  2205                    1066      move.l  d5,d1   ;dy
000016FE  C2C5                    1067      mulu.w  d5,d1   ;d1 = dy^2
00001700                          1068  
00001700  D280                    1069      add.l   d0, d1  ;d1 = dx^2 + dy^2
00001702  E589                    1070      lsl.l   #2, d1  
00001704  4DF9 004EC034           1071      lea     (Sqrts), a6
0000170A  DDC1                    1072      add.l   d1, a6
0000170C  2016                    1073      move.l  (a6), d0
0000170E                          1074      ;move.l (a6, d1), d0    ;d0 = sqrt(dx^2 + dy^2) with no byte swap
0000170E                          1075      
0000170E  4EB8 165C               1076      jsr     SwapBytes       ;d0 bytes are swapped, so it has the correct sqrt
00001712                          1077  
00001712  E088                    1078      lsr.l   #(FRACTION_BITS),d0
00001714                          1079  
00001714                          1080      ;combine radiuses
00001714  7219                    1081      move.l  #(BALL_RADIUS), d1
00001716  0681 00000011           1082      add.l   #(PEG_RADIUS), d1
0000171C                          1083  
0000171C  B081                    1084      cmp.l   d1, d0
0000171E  6E00 000A               1085      bgt     .DidntCollide
00001722                          1086  
00001722  7001                    1087      move.l  #(TRUE), d0
00001724                          1088  
00001724  4EF9 0000172C           1089      jmp     .CheckEnd
0000172A                          1090  
0000172A                          1091  
0000172A                          1092  .DidntCollide:
0000172A                          1093  
0000172A  7000                    1094      move.l  #(FALSE), d0
0000172C                          1095  
0000172C                          1096  .CheckEnd:
0000172C                          1097      ;movem.l    (sp)+, ALL_REG
0000172C                          1098  
0000172C  4E75                    1099      rts
0000172E                          1100  
0000172E                          1101  
0000172E                          1102  BounceBallOffWall:
0000172E                          1103      
0000172E                          1104  
0000172E  2039 0051CDA0           1105      move.l  (BallXVelocity), d0
00001734                          1106      ;muls.w     #(HALF), d0     
00001734                          1107      ;asr.l   #(FRACTION_BITS),d0        ;soften collision
00001734                          1108  
00001734  4480                    1109      neg.l   d0
00001736  23C0 0051CDA0           1110      move.l  d0, (BallXVelocity)
0000173C                          1111  
0000173C  4E75                    1112      rts
0000173E                          1113  
0000173E                          1114  
0000173E                          1115  
0000173E                          1116  BounceBallOffPeg:
0000173E                          1117  
0000173E                          1118      ;set tangent vect
0000173E  2039 0051CE3C           1119      move.l  (ClosestPegY),d0
00001744  90B9 0051CD98           1120      sub.l   (BallYPosition), d0     
0000174A  0680 00000019           1121      add.l   #(BALL_RADIUS), d0      ;d0 = tgX = Ypeg - Yball
00001750  2239 0051CD90           1122      move.l  (BallXPosition), d1
00001756  0681 00000019           1123      add.l   #(BALL_RADIUS), d1      
0000175C  92B9 0051CE38           1124      sub.l   (ClosestPegX), d1       ;d1 = tgY = Xball - Xpeg
00001762                          1125  
00001762                          1126  
00001762                          1127      ;get vect length
00001762  2C00                    1128      move.l  d0, d6
00001764  2E01                    1129      move.l  d1, d7
00001766                          1130  
00001766  CDC0                    1131      muls.w  d0, d6                  ;d6 = tgX ^ 2
00001768  CFC1                    1132      muls.w  d1, d7                  ;d7 = tgY ^ 2
0000176A                          1133  
0000176A  DE86                    1134      add.l   d6, d7                  ;d7 = tgX ^ 2 + tgY ^ 2
0000176C                          1135  
0000176C  E58F                    1136      lsl.l   #2, d7  
0000176E  4DF9 004EC034           1137      lea     (Sqrts), a6
00001774                          1138  
00001774  DDC7                    1139      add.l   d7, a6
00001776  2416                    1140      move.l  (a6), d2
00001778                          1141      ;move.l (a6, d7), d2            ;d2 = TgMag = sqrt(tgX ^ 2 + tgY ^ 2) with no byte swap
00001778                          1142  
00001778  2E00                    1143      move.l  d0, d7                  ;store tgX
0000177A  2002                    1144      move.l  d2, d0
0000177C                          1145      
0000177C  4EB8 165C               1146      jsr     SwapBytes               
00001780  E088                    1147      lsr.l   #(FRACTION_BITS),d0
00001782                          1148  
00001782  2400                    1149      move.l  d0, d2                  ;d2 bytes are swapped, so it has the correct sqrt
00001784  2007                    1150      move.l  d7, d0                  ;restore d0
00001786                          1151  
00001786  B4BC 00000000           1152      cmp.l   #0, d2
0000178C  6600 0004               1153      bne     .NotZeroSqrt
00001790                          1154  
00001790                          1155      ; to avoid div by 0
00001790  7401                    1156      move.l  #1, d2
00001792                          1157  
00001792                          1158  
00001792                          1159  .NotZeroSqrt:   
00001792                          1160  
00001792                          1161      ;get normalized tangent
00001792  81C2                    1162      divs.w  d2, d0                  ;Xtg
00001794  4840                    1163      swap    d0
00001796  4240                    1164      clr.w   d0
00001798  4840                    1165      swap    d0
0000179A  83C2                    1166      divs.w  d2, d1                  ;Ytg
0000179C  4841                    1167      swap    d1
0000179E  4241                    1168      clr.w   d1
000017A0  4841                    1169      swap    d1
000017A2                          1170  
000017A2                          1171  
000017A2                          1172      ;get length by calculating the dot product
000017A2                          1173      ;copy x and y
000017A2  2400                    1174      move.l  d0, d2                  ;Xtg
000017A4  2601                    1175      move.l  d1, d3                  ;Ytg
000017A6                          1176  
000017A6                          1177      ;get velocity
000017A6  2C39 0051CDA0           1178      move.l  (BallXVelocity), d6
000017AC  2E39 0051CDA4           1179      move.l  (BallYVelocity), d7
000017B2                          1180      ; dot product
000017B2  C5C6                    1181      muls.w  d6, d2                  
000017B4  C7C7                    1182      muls.w  d7, d3
000017B6                          1183  
000017B6  E082                    1184      asr.l   #(FRACTION_BITS),d2
000017B8  E083                    1185      asr.l   #(FRACTION_BITS),d3
000017BA                          1186  
000017BA                          1187  
000017BA  D682                    1188      add.l   d2, d3                  
000017BC  2803                    1189      move.l  d3, d4                  ;d4 = length
000017BE                          1190  
000017BE                          1191      ;get the velocity comp parallel to the tg
000017BE                          1192      ;copy x and y of tg
000017BE  2400                    1193      move.l  d0, d2                  ;Xtg
000017C0  2601                    1194      move.l  d1, d3                  ;Ytg
000017C2                          1195  
000017C2  C5C4                    1196      muls.w  d4, d2                  ;d2 = Xparal = length * Xtg
000017C4  C7C4                    1197      muls.w  d4, d3                  ;d3 = Yparal = length * Ytg
000017C6                          1198  
000017C6                          1199      ;get velocity
000017C6  2039 0051CDA0           1200      move.l  (BallXVelocity), d0     ;Xvel
000017CC  2239 0051CDA4           1201      move.l  (BallYVelocity), d1     ;Yvel
000017D2                          1202  
000017D2                          1203      ;get the velocity comp perpendicular to the tg
000017D2  9082                    1204      sub.l   d2, d0                  ;d0 = Xper = Xvel - Xparal
000017D4  9283                    1205      sub.l   d3, d1                  ;d1 = Yper = Yvel - Yparal
000017D6                          1206  
000017D6                          1207      ;get the new velocity
000017D6  E580                    1208      asl.l   #2, d0  
000017D8  E581                    1209      asl.l   #2, d1
000017DA                          1210  
000017DA  2439 0051CDA0           1211      move.l  (BallXVelocity), d2     ;Xvel
000017E0  2639 0051CDA4           1212      move.l  (BallYVelocity), d3     ;Yvel
000017E6                          1213          
000017E6  9480                    1214      sub.l   d0, d2                  ;d2 = NewXvel = Xvel - 2 * Xper
000017E8  9681                    1215      sub.l   d1, d3                  ;d3 = NewYvel = Yvel - 2 * Yper
000017EA                          1216  
000017EA  C7FC 0020               1217      muls.w  #(Y_VELOCITY_SOFTNER), d3
000017EE  E083                    1218      asr.l   #(FRACTION_BITS),d3         ;soften y velocity
000017F0                          1219  
000017F0                          1220      ;get the abs to test on it
000017F0  2202                    1221      move.l  d2, d1
000017F2                          1222  
000017F2  4EB9 000018CC           1223      jsr     GetAbsoluteValue            ;abs will be in d0
000017F8                          1224  
000017F8  B0BC 00000075           1225      cmp.l   #(MIN_RAND_X_VEL_ALLOWED),d0        
000017FE  6D00 000E               1226      blt     .NoXSoftening
00001802                          1227  
00001802  C5FC 0055               1228      muls.w  #(X_VELOCITY_SOFTNER), d2   ;soften x velocity
00001806  E082                    1229      asr.l   #(FRACTION_BITS),d2 
00001808                          1230  
00001808  4EF9 00001816           1231      jmp     .NoRandVelX
0000180E                          1232  
0000180E                          1233  
0000180E                          1234  .NoXSoftening:
0000180E                          1235  
0000180E  4EB9 00001824           1236      jsr     GetRandomXVel
00001814                          1237  
00001814  2400                    1238      move.l  d0, d2
00001816                          1239  
00001816                          1240  
00001816                          1241  .NoRandVelX:
00001816                          1242      ;update the velocity
00001816  23C2 0051CDA0           1243      move.l  d2, (BallXVelocity)
0000181C  23C3 0051CDA4           1244      move.l  d3, (BallYVelocity)
00001822                          1245  
00001822                          1246  
00001822  4E75                    1247      rts 
00001824                          1248  
00001824                          1249  
00001824                          1250  GetRandomXVel:
00001824                          1251                              
00001824  48E7 4000               1252      movem.l d1,-(sp)
00001828                          1253  
00001828  4EB9 00001890           1254      jsr GetRandomNumber
0000182E                          1255  
0000182E  C0BC 00000079           1256      and.l   #(MAX_RAND_X_VELOCITY), d0
00001834  0680 00000070           1257      add.l   #(MIN_RAND_X_VELOCITY), d0  ;between min and max
0000183A                          1258  
0000183A                          1259      ;on first drop
0000183A  0CB9 00000000 0051CD8C  1260      cmp.l   #(FALSE), (BallDropped)
00001844  6700 0020               1261      beq     .RandFirstXVel
00001848                          1262  
00001848                          1263      ;decide if negative or positive based on the ball x position compared to peg
00001848  2239 0051CD90           1264      move.l  (BallXPosition), d1
0000184E  92B9 0051CE38           1265      sub.l   (ClosestPegX), d1
00001854                          1266  
00001854  B2BC 00000000           1267      cmp.l   #0, d1
0000185A  6C00 002E               1268      bge     .EndRand
0000185E                          1269      ;go right else go left
0000185E                          1270  
0000185E  4480                    1271      neg.l   d0
00001860                          1272  
00001860  4EF9 0000188A           1273      jmp     .EndRand
00001866                          1274  
00001866                          1275  .RandFirstXVel:
00001866  2200                    1276      move.l  d0, d1          ;store rand
00001868                          1277  
00001868  4EB9 00001890           1278      jsr GetRandomNumber     ; get new rand
0000186E                          1279  
0000186E  C0BC 00000001           1280      and.l   #1, d0
00001874                          1281  
00001874  B0BC 00000000           1282      cmp.l   #0, d0
0000187A  6600 000A               1283      bne     .MakeVelNegative    
0000187E                          1284      ;go right
0000187E  2001                    1285      move.l  d1, d0          ;restore pos rand
00001880                          1286  
00001880  4EF9 0000188A           1287      jmp     .EndRand
00001886                          1288  
00001886                          1289  .MakeVelNegative:           ;go left
00001886                          1290  
00001886  4481                    1291      neg.l   d1
00001888  2001                    1292      move.l  d1, d0          ;restore neg rand
0000188A                          1293  
0000188A                          1294  .EndRand:
0000188A                          1295  
0000188A  4CDF 0002               1296      movem.l (sp)+,d1
0000188E                          1297  
0000188E  4E75                    1298      rts
00001890                          1299  
00001890                          1300  
00001890                          1301  
00001890                          1302  
00001890                          1303  
00001890                          1304  
00001890                          1305  
00001890                          1306  -------------------- end include --------------------
00001890                          1307      include "RandomNumberGenerator.x68"
00001890                          1308  ;GET RANDOM NUmBER
00001890                          1309  
00001890                          1310  GetRandomNumber:
00001890  48E7 4000               1311      movem.l d1,-(sp)
00001894  48E7 2000               1312      movem.l d2,-(sp)
00001898                          1313      
00001898  2039 0051CE48           1314      move.l  Rand,d0
0000189E  72AF                    1315      moveq   #$AF-$100,d1
000018A0  7412                    1316      moveq   #18,d2
000018A2                          1317  .Ninc0  
000018A2  D080                    1318      add.l   d0,d0
000018A4  6400 0004               1319      bcc .Ninc1
000018A8  B300                    1320      eor.b   d1,d0
000018AA                          1321  .Ninc1
000018AA  51CA FFF6               1322      dbf d2,.Ninc0
000018AE                          1323      
000018AE  23C0 0051CE48           1324      move.l  d0,Rand
000018B4                          1325      
000018B4  4CDF 0004               1326      movem.l (sp)+,d2
000018B8  4CDF 0002               1327      movem.l (sp)+,d1
000018BC                          1328      
000018BC  4E75                    1329      rts
000018BE                          1330  
000018BE                          1331  SeedRandomNumber:
000018BE                          1332      
000018BE  103C 0008               1333      move.b  #GET_TIME_COMMAND,d0
000018C2  4E4F                    1334      TRAP    #15
000018C4                          1335  
000018C4  23C1 0051CE48           1336      move.l  d1,Rand
000018CA                          1337  
000018CA  4E75                    1338      rts
000018CA  4E75                    1339  -------------------- end include --------------------
000018CC                          1340      include "Math.x68"
000018CC                          1341  ;math
000018CC                          1342  
000018CC                          1343  ;param:d1, returns d0 as the abs
000018CC                          1344  GetAbsoluteValue:
000018CC                          1345  
000018CC  48E7 4000               1346      movem.l d1,-(sp)
000018D0  48E7 0200               1347      movem.l d6,-(sp)
000018D4  48E7 0100               1348      movem.l d7,-(sp)
000018D8                          1349  
000018D8                          1350  
000018D8  2C01                    1351      move.l  d1, d6      ;y = x
000018DA  E086                    1352      asr.l   #8,d6   
000018DC  E086                    1353      asr.l   #8,d6   
000018DE  E086                    1354      asr.l   #8,d6   
000018E0  EE86                    1355      asr.l   #7,d6       ;y >>> 31
000018E2                          1356  
000018E2  2E06                    1357      move.l  d6, d7      ;store y
000018E4  B386                    1358      eor.l   d1, d6      ;x xor y
000018E6                          1359  
000018E6  9C87                    1360      sub.l   d7, d6      ;(x xor y) - y
000018E8                          1361  
000018E8  2006                    1362      move.l  d6, d0
000018EA                          1363  
000018EA  4CDF 0080               1364      movem.l (sp)+,d7
000018EE  4CDF 0040               1365      movem.l (sp)+,d6
000018F2  4CDF 0002               1366      movem.l (sp)+,d1
000018F6                          1367  
000018F6                          1368  
000018F6  4E75                    1369      rts
000018F6  4E75                    1370  -------------------- end include --------------------
000018F8                          1371      include "Led.x68"
000018F8                          1372  ;led
000018F8                          1373  
000018F8                          1374  UpdateScoreLed:
000018F8                          1375  
000018F8  2039 0051CE6E           1376      move.l  (Score), d0
000018FE                          1377  
000018FE  4EB9 000019E8           1378      jsr     GetDigits
00001904                          1379  
00001904                          1380      ; display digits
00001904                          1381      ;set pen color
00001904  7050                    1382      move.l  #(SET_PEN_COLOR_COMMAND), d0
00001906  223C 00FFFFFF           1383      move.l  #(WHITE), d1
0000190C  4E4F                    1384      Trap    #15
0000190E                          1385  
0000190E                          1386      ;begin drawing third digit
0000190E  4DF9 0051CE50           1387      lea     LedDigitsTable, a6
00001914  1036 7000               1388      move.b  (a6, d7), d0
00001918                          1389      ;update start pos           
00001918  23FC 0000002F 0051CE5A  1390      move.l  #(SCORE_LED_START_X), (CurrentLedStartX)
00001922  23FC 00000056 0051CE5E  1391      move.l  #(SCORE_LED_START_Y), (CurrentLedStartY)
0000192C                          1392  
0000192C  4EB9 00001A32           1393      jsr DrawDigit
00001932                          1394  
00001932                          1395      ;draw second digit
00001932  1036 6000               1396      move.b  (a6, d6), d0
00001936                          1397      ;update start pos           
00001936  06B9 00000019 0051CE5A  1398      add.l   #(SCORE_LED_DIGIT_WIDTH), (CurrentLedStartX)
00001940  06B9 0000000A 0051CE5A  1399      add.l   #(SCORE_LED_DIGIT_OFFSET), (CurrentLedStartX)
0000194A                          1400  
0000194A  4EB9 00001A32           1401      jsr DrawDigit
00001950                          1402  
00001950                          1403      ;draw third digit
00001950  1036 5000               1404      move.b  (a6, d5), d0
00001954                          1405      ;update start pos           
00001954  06B9 00000019 0051CE5A  1406      add.l   #(SCORE_LED_DIGIT_WIDTH), (CurrentLedStartX)
0000195E  06B9 0000000A 0051CE5A  1407      add.l   #(SCORE_LED_DIGIT_OFFSET), (CurrentLedStartX)
00001968                          1408  
00001968  4EB9 00001A32           1409      jsr DrawDigit
0000196E                          1410  
0000196E                          1411  
0000196E  4E75                    1412      rts
00001970                          1413  
00001970                          1414  
00001970                          1415  UpdateBallsLed:
00001970                          1416  
00001970  2039 0051CE6A           1417      move.l  (UsedBalls), d0
00001976                          1418  
00001976  4EB9 000019E8           1419      jsr     GetDigits
0000197C                          1420  
0000197C                          1421      ; display digits
0000197C                          1422      ;set pen color
0000197C  7050                    1423      move.l  #(SET_PEN_COLOR_COMMAND), d0
0000197E  223C 00FFFFFF           1424      move.l  #(WHITE), d1
00001984  4E4F                    1425      Trap    #15
00001986                          1426  
00001986                          1427      ;begin drawing third digit
00001986  4DF9 0051CE50           1428      lea     LedDigitsTable, a6
0000198C  1036 7000               1429      move.b  (a6, d7), d0
00001990                          1430      ;update start pos           
00001990  23FC 0000002F 0051CE62  1431      move.l  #(BALLS_LED_START_X), (BallsLedStartX)
0000199A  23FC 00000197 0051CE66  1432      move.l  #(BALLS_LED_START_Y), (BallsLedStartY)
000019A4                          1433  
000019A4  4EB9 00001A32           1434      jsr DrawDigit
000019AA                          1435  
000019AA                          1436      ;draw second digit
000019AA  1036 6000               1437      move.b  (a6, d6), d0
000019AE                          1438      ;update start pos           
000019AE  06B9 00000019 0051CE62  1439      add.l   #(BALLS_LED_DIGIT_WIDTH), (BallsLedStartX)
000019B8  06B9 0000000A 0051CE66  1440      add.l   #(BALLS_LED_DIGIT_OFFSET), (BallsLedStartY)
000019C2                          1441  
000019C2  4EB9 00001A32           1442      jsr DrawDigit
000019C8                          1443  
000019C8                          1444      ;draw third digit
000019C8  1036 5000               1445      move.b  (a6, d5), d0
000019CC                          1446      ;update start pos           
000019CC  06B9 00000019 0051CE62  1447      add.l   #(BALLS_LED_DIGIT_WIDTH), (BallsLedStartX)
000019D6  06B9 0000000A 0051CE66  1448      add.l   #(BALLS_LED_DIGIT_OFFSET), (BallsLedStartY)
000019E0                          1449  
000019E0  4EB9 00001BF2           1450      jsr DrawDigitBl
000019E6                          1451  
000019E6                          1452  
000019E6  4E75                    1453      rts 
000019E8                          1454  
000019E8                          1455  
000019E8                          1456  ;params: d0: the number, returns d5: first digit, d6, second digit, d7: third digit
000019E8                          1457  GetDigits:
000019E8                          1458  
000019E8  4285                    1459      clr.l   d5
000019EA  4286                    1460      clr.l   d6
000019EC  4287                    1461      clr.l   d7
000019EE                          1462  
000019EE  80FC 000A               1463      divu.w  #10, d0
000019F2  4840                    1464      swap.w  d0
000019F4  3A00                    1465      move.w  d0, d5          ;first digit
000019F6                          1466  
000019F6  4240                    1467      clr.w   d0
000019F8  4840                    1468      swap.w  d0
000019FA                          1469  
000019FA  B0BC 00000000           1470      cmp.l   #0, d0
00001A00  6700 002E               1471      beq     .End
00001A04                          1472  
00001A04  80FC 000A               1473      divu.w  #10, d0
00001A08  4840                    1474      swap.w  d0
00001A0A  3C00                    1475      move.w  d0, d6          ;second digit
00001A0C                          1476  
00001A0C  4240                    1477      clr.w   d0
00001A0E  4840                    1478      swap.w  d0
00001A10                          1479  
00001A10  B0BC 00000000           1480      cmp.l   #0, d0
00001A16  6700 0018               1481      beq     .End
00001A1A                          1482  
00001A1A  80FC 000A               1483      divu.w  #10, d0
00001A1E  4840                    1484      swap.w  d0
00001A20  3E00                    1485      move.w  d0, d7          ;third digit
00001A22                          1486  
00001A22  4240                    1487      clr.w   d0
00001A24  4840                    1488      swap.w  d0
00001A26                          1489  
00001A26  B0BC 00000000           1490      cmp.l   #0, d0
00001A2C  6700 0002               1491      beq     .End
00001A30                          1492  
00001A30                          1493  .End:
00001A30                          1494  
00001A30  4E75                    1495      rts
00001A32                          1496  
00001A32                          1497  
00001A32                          1498  
00001A32                          1499  DrawDigit:
00001A32                          1500  
00001A32  48E7 FFFE               1501      movem.l     ALL_REG, -(sp)
00001A36                          1502  
00001A36  1C00                    1503      move.b  d0, d6
00001A38  1E06                    1504      move.b  d6, d7
00001A3A  CE3C 0001               1505      and.b   #1, d7
00001A3E  BE3C 0001               1506      cmp.b   #1, d7
00001A42  6700 0068               1507      beq     .DrawA
00001A46                          1508  
00001A46                          1509  .DrawABack:
00001A46                          1510      
00001A46  E20E                    1511      lsr.b   #1, d6
00001A48  1E06                    1512      move.b  d6, d7
00001A4A  CE3C 0001               1513      and.b   #1, d7
00001A4E  BE3C 0001               1514      cmp.b   #1, d7
00001A52  6700 007E               1515      beq     .DrawB
00001A56                          1516  
00001A56                          1517  
00001A56                          1518  .DrawBBack: 
00001A56                          1519  
00001A56  E20E                    1520      lsr.b   #1, d6
00001A58  1E06                    1521      move.b  d6, d7
00001A5A  CE3C 0001               1522      and.b   #1, d7
00001A5E  BE3C 0001               1523      cmp.b   #1, d7
00001A62  6700 00A0               1524      beq     .DrawC
00001A66                          1525  
00001A66                          1526  
00001A66                          1527  
00001A66                          1528  .DrawCBack: 
00001A66                          1529  
00001A66  E20E                    1530      lsr.b   #1, d6
00001A68  1E06                    1531      move.b  d6, d7
00001A6A  CE3C 0001               1532      and.b   #1, d7
00001A6E  BE3C 0001               1533      cmp.b   #1, d7
00001A72  6700 00C8               1534      beq     .DrawD
00001A76                          1535  
00001A76                          1536  .DrawDBack: 
00001A76                          1537  
00001A76  E20E                    1538      lsr.b   #1, d6
00001A78  1E06                    1539      move.b  d6, d7
00001A7A  CE3C 0001               1540      and.b   #1, d7
00001A7E  BE3C 0001               1541      cmp.b   #1, d7
00001A82  6700 00EA               1542      beq     .DrawE
00001A86                          1543  
00001A86                          1544  .DrawEBack: 
00001A86                          1545  
00001A86  E20E                    1546      lsr.b   #1, d6
00001A88  1E06                    1547      move.b  d6, d7
00001A8A  CE3C 0001               1548      and.b   #1, d7
00001A8E  BE3C 0001               1549      cmp.b   #1, d7
00001A92  6700 0106               1550      beq     .DrawF
00001A96                          1551  
00001A96                          1552  .DrawFBack: 
00001A96                          1553  
00001A96  E20E                    1554      lsr.b   #1, d6
00001A98  1E06                    1555      move.b  d6, d7
00001A9A  CE3C 0001               1556      and.b   #1, d7
00001A9E  BE3C 0001               1557      cmp.b   #1, d7
00001AA2  6700 011C               1558      beq     .DrawG
00001AA6                          1559  
00001AA6                          1560  .DrawGBack:     
00001AA6                          1561  
00001AA6                          1562      
00001AA6  4CDF 7FFF               1563      movem.l     (sp)+, ALL_REG, 
00001AAA                          1564  
00001AAA  4E75                    1565      rts
00001AAC                          1566  
00001AAC                          1567  .DrawA: 
00001AAC                          1568  
00001AAC                          1569      ; set points
00001AAC  2239 0051CE5A           1570      move.l  (CurrentLedStartX), d1
00001AB2  2439 0051CE5E           1571      move.l  (CurrentLedStartY), d2
00001AB8  2639 0051CE5A           1572      move.l  (CurrentLedStartX), d3
00001ABE  2839 0051CE5E           1573      move.l  (CurrentLedStartY), d4
00001AC4                          1574  
00001AC4  0683 00000019           1575      add.l   #(SCORE_LED_DIGIT_WIDTH), d3
00001ACA                          1576  
00001ACA                          1577      ;draw line
00001ACA  7054                    1578      move.l  #(DRAW_LINE_COMMAND), d0
00001ACC  4E4F                    1579      Trap    #15
00001ACE                          1580  
00001ACE  4EF8 1A46               1581      jmp .DrawABack
00001AD2                          1582  
00001AD2                          1583  .DrawB: 
00001AD2                          1584      
00001AD2                          1585      ; set points
00001AD2  2239 0051CE5A           1586      move.l  (CurrentLedStartX), d1
00001AD8  2439 0051CE5E           1587      move.l  (CurrentLedStartY), d2
00001ADE  2639 0051CE5A           1588      move.l  (CurrentLedStartX), d3
00001AE4  2839 0051CE5E           1589      move.l  (CurrentLedStartY), d4
00001AEA                          1590  
00001AEA  0681 00000019           1591      add.l   #(SCORE_LED_DIGIT_WIDTH), d1
00001AF0  0683 00000019           1592      add.l   #(SCORE_LED_DIGIT_WIDTH), d3
00001AF6  0684 00000015           1593      add.l   #(SCORE_LED_LINE_HEIGHT), d4
00001AFC                          1594  
00001AFC                          1595      ;draw line
00001AFC  7054                    1596      move.l  #(DRAW_LINE_COMMAND), d0
00001AFE  4E4F                    1597      Trap    #15
00001B00                          1598  
00001B00  4EF8 1A56               1599      jmp .DrawBBack
00001B04                          1600  
00001B04                          1601  .DrawC: 
00001B04                          1602  
00001B04                          1603      ; set points
00001B04  2239 0051CE5A           1604      move.l  (CurrentLedStartX), d1
00001B0A  2439 0051CE5E           1605      move.l  (CurrentLedStartY), d2
00001B10  2639 0051CE5A           1606      move.l  (CurrentLedStartX), d3
00001B16  2839 0051CE5E           1607      move.l  (CurrentLedStartY), d4
00001B1C                          1608  
00001B1C  0681 00000019           1609      add.l   #(SCORE_LED_DIGIT_WIDTH), d1
00001B22  0682 00000015           1610      add.l   #(SCORE_LED_LINE_HEIGHT), d2
00001B28  0683 00000019           1611      add.l   #(SCORE_LED_DIGIT_WIDTH), d3
00001B2E  0684 0000002A           1612      add.l   #(SCORE_LED_DIGIT_HEIGHT), d4
00001B34                          1613  
00001B34                          1614      ;draw line
00001B34  7054                    1615      move.l  #(DRAW_LINE_COMMAND), d0
00001B36  4E4F                    1616      Trap    #15
00001B38                          1617  
00001B38                          1618  
00001B38  4EF8 1A66               1619      jmp .DrawCBack
00001B3C                          1620  
00001B3C                          1621  .DrawD: 
00001B3C                          1622  
00001B3C                          1623      ; set points
00001B3C  2239 0051CE5A           1624      move.l  (CurrentLedStartX), d1
00001B42  2439 0051CE5E           1625      move.l  (CurrentLedStartY), d2
00001B48  2639 0051CE5A           1626      move.l  (CurrentLedStartX), d3
00001B4E  2839 0051CE5E           1627      move.l  (CurrentLedStartY), d4
00001B54                          1628  
00001B54  0681 00000019           1629      add.l   #(SCORE_LED_DIGIT_WIDTH), d1
00001B5A  0682 0000002A           1630      add.l   #(SCORE_LED_DIGIT_HEIGHT), d2
00001B60  0684 0000002A           1631      add.l   #(SCORE_LED_DIGIT_HEIGHT), d4
00001B66                          1632  
00001B66                          1633      ;draw line
00001B66  7054                    1634      move.l  #(DRAW_LINE_COMMAND), d0
00001B68  4E4F                    1635      Trap    #15
00001B6A                          1636  
00001B6A                          1637  
00001B6A  4EF8 1A76               1638      jmp .DrawDBack
00001B6E                          1639  
00001B6E                          1640  .DrawE: 
00001B6E                          1641  
00001B6E                          1642      ; set points
00001B6E  2239 0051CE5A           1643      move.l  (CurrentLedStartX), d1
00001B74  2439 0051CE5E           1644      move.l  (CurrentLedStartY), d2
00001B7A  2639 0051CE5A           1645      move.l  (CurrentLedStartX), d3
00001B80  2839 0051CE5E           1646      move.l  (CurrentLedStartY), d4
00001B86                          1647  
00001B86  0682 0000002A           1648      add.l   #(SCORE_LED_DIGIT_HEIGHT), d2
00001B8C  0684 00000015           1649      add.l   #(SCORE_LED_LINE_HEIGHT), d4
00001B92                          1650  
00001B92                          1651      ;draw line
00001B92  7054                    1652      move.l  #(DRAW_LINE_COMMAND), d0
00001B94  4E4F                    1653      Trap    #15
00001B96                          1654  
00001B96                          1655  
00001B96  4EF8 1A86               1656      jmp .DrawEBack
00001B9A                          1657  
00001B9A                          1658  .DrawF: 
00001B9A                          1659  
00001B9A                          1660      ; set points
00001B9A  2239 0051CE5A           1661      move.l  (CurrentLedStartX), d1
00001BA0  2439 0051CE5E           1662      move.l  (CurrentLedStartY), d2
00001BA6  2639 0051CE5A           1663      move.l  (CurrentLedStartX), d3
00001BAC  2839 0051CE5E           1664      move.l  (CurrentLedStartY), d4
00001BB2                          1665  
00001BB2  0682 00000015           1666      add.l   #(SCORE_LED_LINE_HEIGHT), d2
00001BB8                          1667  
00001BB8                          1668      ;draw line
00001BB8  7054                    1669      move.l  #(DRAW_LINE_COMMAND), d0
00001BBA  4E4F                    1670      Trap    #15
00001BBC                          1671  
00001BBC                          1672  
00001BBC  4EF8 1A96               1673      jmp .DrawFBack
00001BC0                          1674  
00001BC0                          1675  .DrawG: 
00001BC0                          1676  
00001BC0                          1677      ; set points
00001BC0  2239 0051CE5A           1678      move.l  (CurrentLedStartX), d1
00001BC6  2439 0051CE5E           1679      move.l  (CurrentLedStartY), d2
00001BCC  2639 0051CE5A           1680      move.l  (CurrentLedStartX), d3
00001BD2  2839 0051CE5E           1681      move.l  (CurrentLedStartY), d4
00001BD8                          1682  
00001BD8  0682 00000015           1683      add.l   #(SCORE_LED_LINE_HEIGHT), d2
00001BDE  0683 00000019           1684      add.l   #(SCORE_LED_DIGIT_WIDTH), d3
00001BE4  0684 00000015           1685      add.l   #(SCORE_LED_LINE_HEIGHT), d4
00001BEA                          1686  
00001BEA                          1687      ;draw line
00001BEA  7054                    1688      move.l  #(DRAW_LINE_COMMAND), d0
00001BEC  4E4F                    1689      Trap    #15
00001BEE                          1690  
00001BEE                          1691  
00001BEE  4EF8 1AA6               1692      jmp .DrawGBack
00001BF2                          1693  
00001BF2                          1694  
00001BF2                          1695  DrawDigitBl:
00001BF2                          1696  
00001BF2  48E7 FFFE               1697      movem.l     ALL_REG, -(sp)
00001BF6                          1698  
00001BF6  1C00                    1699      move.b  d0, d6
00001BF8  1E06                    1700      move.b  d6, d7
00001BFA  CE3C 0001               1701      and.b   #1, d7
00001BFE  BE3C 0001               1702      cmp.b   #1, d7
00001C02  6700 0068               1703      beq     .DrawABl
00001C06                          1704  
00001C06                          1705  .DrawABackBl:
00001C06                          1706      
00001C06  E20E                    1707      lsr.b   #1, d6
00001C08  1E06                    1708      move.b  d6, d7
00001C0A  CE3C 0001               1709      and.b   #1, d7
00001C0E  BE3C 0001               1710      cmp.b   #1, d7
00001C12  6700 007E               1711      beq     .DrawBBl
00001C16                          1712  
00001C16                          1713  
00001C16                          1714  .DrawBBackBl:   
00001C16                          1715  
00001C16  E20E                    1716      lsr.b   #1, d6
00001C18  1E06                    1717      move.b  d6, d7
00001C1A  CE3C 0001               1718      and.b   #1, d7
00001C1E  BE3C 0001               1719      cmp.b   #1, d7
00001C22  6700 00A0               1720      beq     .DrawCBl
00001C26                          1721  
00001C26                          1722  
00001C26                          1723  
00001C26                          1724  .DrawCBackBl:   
00001C26                          1725  
00001C26  E20E                    1726      lsr.b   #1, d6
00001C28  1E06                    1727      move.b  d6, d7
00001C2A  CE3C 0001               1728      and.b   #1, d7
00001C2E  BE3C 0001               1729      cmp.b   #1, d7
00001C32  6700 00C8               1730      beq     .DrawDBl
00001C36                          1731  
00001C36                          1732  .DrawDBackBl:   
00001C36                          1733  
00001C36  E20E                    1734      lsr.b   #1, d6
00001C38  1E06                    1735      move.b  d6, d7
00001C3A  CE3C 0001               1736      and.b   #1, d7
00001C3E  BE3C 0001               1737      cmp.b   #1, d7
00001C42  6700 00EA               1738      beq     .DrawEBl
00001C46                          1739  
00001C46                          1740  .DrawEBackBl:   
00001C46                          1741  
00001C46  E20E                    1742      lsr.b   #1, d6
00001C48  1E06                    1743      move.b  d6, d7
00001C4A  CE3C 0001               1744      and.b   #1, d7
00001C4E  BE3C 0001               1745      cmp.b   #1, d7
00001C52  6700 0106               1746      beq     .DrawFBl
00001C56                          1747  
00001C56                          1748  .DrawFBackBl:   
00001C56                          1749  
00001C56  E20E                    1750      lsr.b   #1, d6
00001C58  1E06                    1751      move.b  d6, d7
00001C5A  CE3C 0001               1752      and.b   #1, d7
00001C5E  BE3C 0001               1753      cmp.b   #1, d7
00001C62  6700 011C               1754      beq     .DrawGBl
00001C66                          1755  
00001C66                          1756  .DrawGBackBl:       
00001C66                          1757  
00001C66                          1758      
00001C66  4CDF 7FFF               1759      movem.l     (sp)+, ALL_REG, 
00001C6A                          1760  
00001C6A  4E75                    1761      rts
00001C6C                          1762  
00001C6C                          1763  .DrawABl:   
00001C6C                          1764  
00001C6C                          1765      ; set points
00001C6C  2239 0051CE62           1766      move.l  (BallsLedStartX), d1
00001C72  2439 0051CE66           1767      move.l  (BallsLedStartY), d2
00001C78  2639 0051CE62           1768      move.l  (BallsLedStartX), d3
00001C7E  2839 0051CE66           1769      move.l  (BallsLedStartY), d4
00001C84                          1770  
00001C84  0683 00000019           1771      add.l   #(BALLS_LED_DIGIT_WIDTH), d3
00001C8A                          1772  
00001C8A                          1773      ;draw line
00001C8A  7054                    1774      move.l  #(DRAW_LINE_COMMAND), d0
00001C8C  4E4F                    1775      Trap    #15
00001C8E                          1776  
00001C8E  4EF8 1C06               1777      jmp .DrawABackBl
00001C92                          1778  
00001C92                          1779  .DrawBBl:   
00001C92                          1780      
00001C92                          1781      ; set points
00001C92  2239 0051CE62           1782      move.l  (BallsLedStartX), d1
00001C98  2439 0051CE66           1783      move.l  (BallsLedStartY), d2
00001C9E  2639 0051CE62           1784      move.l  (BallsLedStartX), d3
00001CA4  2839 0051CE66           1785      move.l  (BallsLedStartY), d4
00001CAA                          1786  
00001CAA  0681 00000019           1787      add.l   #(BALLS_LED_DIGIT_WIDTH), d1
00001CB0  0683 00000019           1788      add.l   #(BALLS_LED_DIGIT_WIDTH), d3
00001CB6  0684 00000015           1789      add.l   #(BALLS_LED_LINE_HEIGHT), d4
00001CBC                          1790  
00001CBC                          1791      ;draw line
00001CBC  7054                    1792      move.l  #(DRAW_LINE_COMMAND), d0
00001CBE  4E4F                    1793      Trap    #15
00001CC0                          1794  
00001CC0  4EF8 1C16               1795      jmp .DrawBBackBl
00001CC4                          1796  
00001CC4                          1797  .DrawCBl:   
00001CC4                          1798  
00001CC4                          1799      ; set points
00001CC4  2239 0051CE62           1800      move.l  (BallsLedStartX), d1
00001CCA  2439 0051CE66           1801      move.l  (BallsLedStartY), d2
00001CD0  2639 0051CE62           1802      move.l  (BallsLedStartX), d3
00001CD6  2839 0051CE66           1803      move.l  (BallsLedStartY), d4
00001CDC                          1804  
00001CDC  0681 00000019           1805      add.l   #(BALLS_LED_DIGIT_WIDTH), d1
00001CE2  0682 00000015           1806      add.l   #(BALLS_LED_LINE_HEIGHT), d2
00001CE8  0683 00000019           1807      add.l   #(BALLS_LED_DIGIT_WIDTH), d3
00001CEE  0684 0000002A           1808      add.l   #(BALLS_LED_DIGIT_HEIGHT), d4
00001CF4                          1809  
00001CF4                          1810      ;draw line
00001CF4  7054                    1811      move.l  #(DRAW_LINE_COMMAND), d0
00001CF6  4E4F                    1812      Trap    #15
00001CF8                          1813  
00001CF8                          1814  
00001CF8  4EF8 1C26               1815      jmp .DrawCBackBl
00001CFC                          1816  
00001CFC                          1817  .DrawDBl:   
00001CFC                          1818  
00001CFC                          1819      ; set points
00001CFC  2239 0051CE62           1820      move.l  (BallsLedStartX), d1
00001D02  2439 0051CE66           1821      move.l  (BallsLedStartY), d2
00001D08  2639 0051CE62           1822      move.l  (BallsLedStartX), d3
00001D0E  2839 0051CE66           1823      move.l  (BallsLedStartY), d4
00001D14                          1824  
00001D14  0681 00000019           1825      add.l   #(BALLS_LED_DIGIT_WIDTH), d1
00001D1A  0682 0000002A           1826      add.l   #(BALLS_LED_DIGIT_HEIGHT), d2
00001D20  0684 0000002A           1827      add.l   #(BALLS_LED_DIGIT_HEIGHT), d4
00001D26                          1828  
00001D26                          1829      ;draw line
00001D26  7054                    1830      move.l  #(DRAW_LINE_COMMAND), d0
00001D28  4E4F                    1831      Trap    #15
00001D2A                          1832  
00001D2A                          1833  
00001D2A  4EF8 1C36               1834      jmp .DrawDBackBl
00001D2E                          1835  
00001D2E                          1836  .DrawEBl:   
00001D2E                          1837  
00001D2E                          1838      ; set points
00001D2E  2239 0051CE62           1839      move.l  (BallsLedStartX), d1
00001D34  2439 0051CE66           1840      move.l  (BallsLedStartY), d2
00001D3A  2639 0051CE62           1841      move.l  (BallsLedStartX), d3
00001D40  2839 0051CE66           1842      move.l  (BallsLedStartY), d4
00001D46                          1843  
00001D46  0682 0000002A           1844      add.l   #(BALLS_LED_DIGIT_HEIGHT), d2
00001D4C  0684 00000015           1845      add.l   #(BALLS_LED_LINE_HEIGHT), d4
00001D52                          1846  
00001D52                          1847      ;draw line
00001D52  7054                    1848      move.l  #(DRAW_LINE_COMMAND), d0
00001D54  4E4F                    1849      Trap    #15
00001D56                          1850  
00001D56                          1851  
00001D56  4EF8 1C46               1852      jmp .DrawEBackBl
00001D5A                          1853  
00001D5A                          1854  .DrawFBl:   
00001D5A                          1855  
00001D5A                          1856      ; set points
00001D5A  2239 0051CE62           1857      move.l  (BallsLedStartX), d1
00001D60  2439 0051CE66           1858      move.l  (BallsLedStartY), d2
00001D66  2639 0051CE62           1859      move.l  (BallsLedStartX), d3
00001D6C  2839 0051CE66           1860      move.l  (BallsLedStartY), d4
00001D72                          1861  
00001D72  0682 00000015           1862      add.l   #(BALLS_LED_LINE_HEIGHT), d2
00001D78                          1863  
00001D78                          1864      ;draw line
00001D78  7054                    1865      move.l  #(DRAW_LINE_COMMAND), d0
00001D7A  4E4F                    1866      Trap    #15
00001D7C                          1867  
00001D7C                          1868  
00001D7C  4EF8 1C56               1869      jmp .DrawFBackBl
00001D80                          1870  
00001D80                          1871  .DrawGBl:   
00001D80                          1872  
00001D80                          1873      ; set points
00001D80  2239 0051CE62           1874      move.l  (BallsLedStartX), d1
00001D86  2439 0051CE66           1875      move.l  (BallsLedStartY), d2
00001D8C  2639 0051CE62           1876      move.l  (BallsLedStartX), d3
00001D92  2839 0051CE66           1877      move.l  (BallsLedStartY), d4
00001D98                          1878  
00001D98  0682 00000015           1879      add.l   #(BALLS_LED_LINE_HEIGHT), d2
00001D9E  0683 00000019           1880      add.l   #(BALLS_LED_DIGIT_WIDTH), d3
00001DA4  0684 00000015           1881      add.l   #(BALLS_LED_LINE_HEIGHT), d4
00001DAA                          1882  
00001DAA                          1883      ;draw line
00001DAA  7054                    1884      move.l  #(DRAW_LINE_COMMAND), d0
00001DAC  4E4F                    1885      Trap    #15
00001DAE                          1886  
00001DAE                          1887  
00001DAE  4EF8 1C66               1888      jmp .DrawGBackBl
00001DB2                          1889  
00001DB2                          1890  
00001DB2                          1891  
00001DB2                          1892  
00001DB2                          1893  
00001DB2                          1894  
00001DB2                          1895      
00001DB2                          1896  
00001DB2                          1897  
00001DB2                          1898  
00001DB2                          1899  
00001DB2                          1900  -------------------- end include --------------------
00001DB2                          1901  
00001DB2                          1902  
00001DB2                          1903  
00001DB2                          1904  ;bitmaps
00001DB2                          1905  BackgroundBitmap    INCBIN "bg.bmp"
00275FEA                          1906  BallBitmap          INCBIN "ironBall.bmp"
00277DD2                          1907  LoadingBitmap       INCBIN "loading.bmp"
004EC00A                          1908  
004EC00A                          1909  ;Sounds 
004EC00A= 43 6F 6C 6C 69 73 ...   1910  CollisionSound      dc.b    'Collision.wav', 0
004EC018= 57 61 6C 6C 43 6F ...   1911  WallCollisionSound  dc.b    'WallCollision.wav', 0
004EC02A= 53 63 6F 72 65 2E ...   1912  ScoreSound          dc.b    'Score.wav', 0
004EC034                          1913  
004EC034                          1914  ;sqrts
004EC034                          1915  Sqrts               INCBIN  "Sqrts.bin" 
0051CD74                          1916  
0051CD74                          1917  ;input
0051CD74= 00000000                1918  PlayerInput         dc.l    0 ;nothing
0051CD78                          1919  
0051CD78                          1920  ;frame rate
0051CD78= 00000000                1921  FrameBeginTime      dc.l    0
0051CD7C                          1922  
0051CD7C                          1923  ;ball variables
0051CD7C= 000010BA 000010BC ...   1924  BallCalls           dc.l    EndBallUpdate, DropBall, MoveBallToLeft, MoveBallToRight
0051CD8C= 00                      1925  BallDropped         dc.b    (FALSE)
0051CD8D= 00                      1926  BallMoved           dc.b    (FALSE)
0051CD8E= 00                      1927  BallJustPegCol      dc.b    (FALSE)
0051CD8F= 00                      1928  BallJustWallCol     dc.b    (FALSE)
0051CD90= 000000F9                1929  BallXPosition       dc.l    (BALL_INITIAL_X_POS)     
0051CD94= 0000F900                1930  BallXPositionFixed  dc.l    (BALL_INITIAL_X_POS<<FRACTION_BITS)
0051CD98= 00000030                1931  BallYPosition       dc.l    (BALL_INITIAL_Y_POS)     
0051CD9C= 00003000                1932  BallYPositionFixed  dc.l    (BALL_INITIAL_Y_POS<<FRACTION_BITS)
0051CDA0= 00000000                1933  BallXVelocity       dc.l    (BALL_INIT_X_VELOCITY)
0051CDA4= 00000000                1934  BallYVelocity       dc.l    (BALL_INIT_Y_VELOCITY)
0051CDA8                          1935  
0051CDA8= 0000018A 00000221 ...   1936  PegsXs              dc.l    394, 545, 696           
0051CDB4= 00000154 000001D9 ...   1937                      dc.l    340, 473, 616, 742
0051CDC4= 0000018A 00000221 ...   1938                      dc.l    394, 545, 696           
0051CDD0= 00000154 000001D9 ...   1939                      dc.l    340, 473, 616, 742
0051CDE0= 00000176 000001EA ...   1940                      dc.l    374, 490, 606, 708          ; for the lower part of the board
0051CDF0                          1941  
0051CDF0                          1942  
0051CDF0= 000000A7 000000A7 ...   1943  PegsYs              dc.l    167, 167, 167
0051CDFC= 00000129 00000129 ...   1944                      dc.l    297, 297, 297, 297
0051CE0C= 000001AE 000001AE ...   1945                      dc.l    430, 430, 430
0051CE18= 00000234 00000234 ...   1946                      dc.l    564, 564, 564, 564
0051CE28= 000002BC 000002BC ...   1947                      dc.l    700, 700, 700, 700          ; for the lower part of the board           
0051CE38                          1948  
0051CE38= 00000000                1949  ClosestPegX         dc.l    0
0051CE3C= 00000000                1950  ClosestPegY         dc.l    0
0051CE40= 00000012                1951  NumberOfPegs        dc.l    (PegsYs-PegsXs)>>2
0051CE44= 00000000                1952  LoopCounter         dc.l    0
0051CE48                          1953  
0051CE48                          1954  Rand                ds.l    1
0051CE4C                          1955  
0051CE4C= 00000000                1956  HaveToRestart       dc.l    (FALSE)
0051CE50                          1957  
0051CE50= 3F 06 5B 4F 66 6D ...   1958  LedDigitsTable      dc.b    $3f, $06,$5b, $4f, $66, $6d, $7d, $07, $7f, $67
0051CE5A= 00000000                1959  CurrentLedStartX    dc.l    0
0051CE5E= 00000000                1960  CurrentLedStartY    dc.l    0
0051CE62= 00000000                1961  BallsLedStartX      dc.l    0
0051CE66= 00000000                1962  BallsLedStartY      dc.l    0
0051CE6A                          1963  
0051CE6A                          1964  
0051CE6A= 00000000                1965  UsedBalls           dc.l    0
0051CE6E                          1966  
0051CE6E= 00000000                1967  Score               dc.l    0
0051CE72= 00000181 000001E0 ...   1968  ScoresBounds        dc.l    385, 480, 500, 596, 618, 698
0051CE8A= 02 05 03                1969  ScoresInGame        dc.b    2, 5, 3             
0051CE8D                          1970  EndScoresInGame
0051CE8D                          1971      
0051CE8D                          1972      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALL_REG             7FFF
BACKGROUNDBITMAP    1DB2
BALLBITMAP          275FEA
BALLCALLS           51CD7C
BALLDROPPED         51CD8C
BALLDROPPING        1124
BALLDROPPING:ADDSCORE  124E
BALLDROPPING:BALLNOTCOLWITHWALL  1146
BALLDROPPING:CONTINUEBALLUPDATE  1202
BALLDROPPING:DONTMOVE  124A
BALLDROPPING:ENDPEGLOOP  11A2
BALLDROPPING:EXITLOOP  1296
BALLDROPPING:FOUNDSCORE  1284
BALLDROPPING:JUSTPEGCOLLIDED  11E2
BALLDROPPING:JUSTWALLCOLLIDED  11C2
BALLDROPPING:MOVEONTOPEGS  1154
BALLDROPPING:NEXTITERATION  1278
BALLDROPPING:NEXTPEG  1166
BALLDROPPING:NOTCOLLIDING  11B4
BALLDROPPING:SCORELOOP  1268
BALLDROPPING:SKIPBOUNCEOFFPEG  1202
BALLJUSTPEGCOL      51CD8E
BALLJUSTWALLCOL     51CD8F
BALLMOVED           51CD8D
BALLSLEDSTARTX      51CE62
BALLSLEDSTARTY      51CE66
BALLS_LED_DIGIT_HEIGHT  2A
BALLS_LED_DIGIT_HEIGHT_OV  34
BALLS_LED_DIGIT_OFFSET  A
BALLS_LED_DIGIT_WIDTH  19
BALLS_LED_DIGIT_WIDTH_OV  73
BALLS_LED_LINE_HEIGHT  15
BALLS_LED_NUM_DIGITS  3
BALLS_LED_START_X   2F
BALLS_LED_START_X_OVER  2A
BALLS_LED_START_Y   197
BALLS_LED_START_Y_OVER  192
BALLS_LED_TOTAL_WIDTH  69
BALLXPOSITION       51CD90
BALLXPOSITIONFIXED  51CD94
BALLXVELOCITY       51CDA0
BALLYPOSITION       51CD98
BALLYPOSITIONFIXED  51CD9C
BALLYVELOCITY       51CDA4
BALL_HEIGHT         32
BALL_INITIAL_X_POS  F9
BALL_INITIAL_Y_POS  30
BALL_INIT_X_VELOCITY  0
BALL_INIT_Y_VELOCITY  0
BALL_RADIUS         19
BALL_SLIDE_VELOCITY  500
BALL_WIDTH          32
BALL_Y_ACCELERATION  30
BOARD_HEIGHT        27E
BOARD_WIDTH         243
BOTTOM_RIGHT_BOARD_X_POS  33C
BOTTOM_RIGHT_BOARD_Y_POS  2AE
BOUNCEBALLOFFPEG    173E
BOUNCEBALLOFFPEG:NORANDVELX  1816
BOUNCEBALLOFFPEG:NOTZEROSQRT  1792
BOUNCEBALLOFFPEG:NOXSOFTENING  180E
BOUNCEBALLOFFWALL   172E
CHECKPEGCOLLISION   168C
CHECKPEGCOLLISION:CHECKDX  16DE
CHECKPEGCOLLISION:CHECKDY  16C0
CHECKPEGCOLLISION:CHECKEND  172C
CHECKPEGCOLLISION:DIDNTCOLLIDE  172A
CHECKPEGCOLLISION:SUBBALLXPEGX  16DA
CHECKPEGCOLLISION:SUBBALLYPEGY  16BC
CHECKWALLCOLLISION  1664
CHECKWALLCOLLISION:COLLIDED  1688
CHECKWALLCOLLISION:ENDCHECK  168A
CHUNK_HEIGHT_STACK_OFFSET  4
CHUNK_WIDTH_STACK_OFFSET  8
CHUNK_X_POS_STACK_OFFSET  10
CHUNK_Y_POS_STACK_OFFSET  C
CLOSESTPEGX         51CE38
CLOSESTPEGY         51CE3C
COLLISIONSOUND      4EC00A
CURRENTLEDSTARTX    51CE5A
CURRENTLEDSTARTY    51CE5E
CURRENT_PEG_X_STACK_OFFSET  8
CURRENT_PEG_Y_STACK_OFFSET  4
DOUBLE_BUFFERING_MODE  11
DRAWACHUNK          1588
DRAWALLBACKGROUND   13CA
DRAWBACKGROUNDCHUNK  13F0
DRAWBACKGROUNDCHUNK:DONTDRAW  1408
DRAWBALL            1434
DRAWBALL:DONTDRAW   144C
DRAWBALLFIRSTTIME   1426
DRAWCOLUMN          15BC
DRAWDIGIT           1A32
DRAWDIGIT:DRAWA     1AAC
DRAWDIGIT:DRAWABACK  1A46
DRAWDIGIT:DRAWB     1AD2
DRAWDIGIT:DRAWBBACK  1A56
DRAWDIGIT:DRAWC     1B04
DRAWDIGIT:DRAWCBACK  1A66
DRAWDIGIT:DRAWD     1B3C
DRAWDIGIT:DRAWDBACK  1A76
DRAWDIGIT:DRAWE     1B6E
DRAWDIGIT:DRAWEBACK  1A86
DRAWDIGIT:DRAWF     1B9A
DRAWDIGIT:DRAWFBACK  1A96
DRAWDIGIT:DRAWG     1BC0
DRAWDIGIT:DRAWGBACK  1AA6
DRAWDIGITBL         1BF2
DRAWDIGITBL:DRAWABACKBL  1C06
DRAWDIGITBL:DRAWABL  1C6C
DRAWDIGITBL:DRAWBBACKBL  1C16
DRAWDIGITBL:DRAWBBL  1C92
DRAWDIGITBL:DRAWCBACKBL  1C26
DRAWDIGITBL:DRAWCBL  1CC4
DRAWDIGITBL:DRAWDBACKBL  1C36
DRAWDIGITBL:DRAWDBL  1CFC
DRAWDIGITBL:DRAWEBACKBL  1C46
DRAWDIGITBL:DRAWEBL  1D2E
DRAWDIGITBL:DRAWFBACKBL  1C56
DRAWDIGITBL:DRAWFBL  1D5A
DRAWDIGITBL:DRAWGBACKBL  1C66
DRAWDIGITBL:DRAWGBL  1D80
DRAWEND             1614
DRAWLOADING         13DE
DRAWPIC             1534
DRAW_A_PIXEL_COMMAND  52
DRAW_LINE_COMMAND   54
DRAW_X_POS_STACK_OFFSET  18
DRAW_Y_POS_STACK_OFFSET  14
DROPBALL            10BC
DROPBALLINPUT       139A
EIGHT_TENTH         CD
ENABLEDOUBLEBUFFER  1616
ENDBALLUPDATE       10BA
ENDHANDLEINPUT      1398
ENDSCORESINGAME     51CE8D
FALSE               0
FIRST_PIXEL_ADDRESS_STACK_OFFSET  24
FRACTION_BITS       8
FRAMEBEGINTIME      51CD78
GAMELOOP            1036
GETABSOLUTEVALUE    18CC
GETDIGITS           19E8
GETDIGITS:END       1A30
GETFIRSTPIXELADDRESS  1624
GETIMAGEHEIGHT      164C
GETIMAGEWIDTH       163C
GETRANDOMNUMBER     1890
GETRANDOMNUMBER:NINC0  18A2
GETRANDOMNUMBER:NINC1  18AA
GETRANDOMXVEL       1824
GETRANDOMXVEL:ENDRAND  188A
GETRANDOMXVEL:MAKEVELNEGATIVE  1886
GETRANDOMXVEL:RANDFIRSTXVEL  1866
GET_TIME_COMMAND    8
GREEN               FF00
HALF                80
HANDLEINPUT         1358
HAVETORESTART       51CE4C
IMAGE_HEIGHT_STACK_OFFSET  1C
IMAGE_WIDTH_STACK_OFFSET  20
INPUT_COMMAND       13
LEDDIGITSTABLE      51CE50
LEFT_ARROW          25
LEFT_ARROW_LOCATION  8
LOADINGBITMAP       277DD2
LOOPCOUNTER         51CE44
MAIN                1000
MAX_RAND_X_VELOCITY  79
MIN_DX_TO_CHECK_COLLISION  2A
MIN_DY_TO_CHECK_COLLISION  2A
MIN_RAND_X_VELOCITY  70
MIN_RAND_X_VEL_ALLOWED  75
MOVEBALLTOLEFT      10C8
MOVEBALLTOLEFT:DONTMOVE  10F2
MOVEBALLTOLEFTINPUT  13A8
MOVEBALLTORIGHT     10F6
MOVEBALLTORIGHT:DONTMOVE  1120
MOVEBALLTORIGHTINPUT  13BC
NEXTPIXEL           15E8
NUMBEROFPEGS        51CE40
OFFSET_IMAGE_HEIGHT  16
OFFSET_IMAGE_WIDTH  12
OFFSET_TO_PIXEL_ARRAY  A
ONE_EIGHTH          20
ONE_FIFTEENTH       11
ONE_FOURTH          40
ONE_TENTH           1A
ONE_THIRD           55
ONE_TWENTIETH       D
OUTPUT_WINDOW_HEIGHT  320
OUTPUT_WINDOW_WIDTH  42F
OVERRIDEBALLS       1418
OVERRIDESCORE       140A
OVERRIDE_OFFSET     5
PAINTSCREENBUFFER   161E
PEGSXS              51CDA8
PEGSYS              51CDF0
PEG_HEIGHT          22
PEG_RADIUS          11
PEG_WIDTH           22
PLAYERINPUT         51CD74
PLAYSOUND           1314
PLAY_SOUND_COMMAND  49
RAND                51CE48
RANDOMIZEXVEL       134A
REPAINT_SCREEN_COMMAND  5E
RESTARTGAME         12AE
RIGHT_ARROW         27
RIGHT_ARROW_LOCATION  0
SCORE               51CE6E
SCORESBOUNDS        51CE72
SCORESINGAME        51CE8A
SCORESOUND          4EC02A
SCORE_LED_DIGIT_HEIGHT  2A
SCORE_LED_DIGIT_HEIGHT_OV  34
SCORE_LED_DIGIT_OFFSET  A
SCORE_LED_DIGIT_WIDTH  19
SCORE_LED_DIGIT_WIDTH_OV  73
SCORE_LED_LINE_HEIGHT  15
SCORE_LED_NUM_DIGITS  3
SCORE_LED_START_X   2F
SCORE_LED_START_X_OVER  2A
SCORE_LED_START_Y   56
SCORE_LED_START_Y_OVER  51
SCORE_LED_TOTAL_WIDTH  69
SEEDRANDOMNUMBER    18BE
SETBALLDRAWPARAMS   14FE
SETBGDRAWPARAMS     1470
SETBGDRAWPARAMSBL   14CC
SETBGDRAWPARAMSSC   14A2
SETFIRSTDRAWPARAMS  144E
SETFRAMEBEGINTIME   131A
SETOUTPUTWINDOW     1068
SETSOMEVARS         133C
SET_DRAWING_MODE_COMMAND  5C
SET_OUTPUT_WINDOW_COMMAND  21
SET_PEN_COLOR_COMMAND  50
SPACE_KEY           20
SPACE_KEY_LOCATION  10
SQRTS               4EC034
STACK_OFFSET_IN_PEG_COL  8
STACK_OFFSET_WHEN_DRAWING  28
START               1000
SWAPBYTES           165C
TIME_PER_FRAME      1
TOP_LEFT_BOARD_X_POS  F9
TOP_LEFT_BOARD_Y_POS  30
TRUE                1
UPDATEBALLPOSITION  107A
UPDATEBALLSLED      1970
UPDATESCORELED      18F8
USEDBALLS           51CE6A
WAITTOENDFRAME      1326
WAITTOENDFRAME:LOOPAGAIN  132C
WALLCOLLISIONSOUND  4EC018
WHITE               FFFFFF
X_VELOCITY_SOFTNER  55
Y_VELOCITY_SOFTNER  20
