00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 10/13/2016 12:44:21 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Pachinko Game
00000000                             3  * Written by : Aissa Ben Zayed
00000000                             4  * Date       : 10-7-2016
00000000                             5  * Description: 
00000000                             6  *
00000000                             7  *-----------------------------------------------------------
00000000                             8  
00000000                             9  *
00000000                            10  
00001000                            11  START  ORG    $1000
00001000                            12  
00001000                            13      include "equates.X68"
00001000                            14  
00001000                            15  ALL_REG                     REG d0-d7/a0-a6
00001000                            16  
00001000  =00000001                 17  TRUE                        EQU 1
00001000  =00000000                 18  FALSE                       EQU 0
00001000                            19  
00001000  =0000FF00                 20  GREEN                       EQU $00FF00
00001000                            21  
00001000                            22  ;math
00001000  =00000008                 23  FRACTION_BITS               EQU 8
00001000  =0000001A                 24  ONE_TENTH                   EQU 26
00001000  =00000033                 25  TWO_TENTH                   EQU 51
00001000  =000000CD                 26  EIGHT_TENTH                 EQU 205
00001000  =00000080                 27  HALF                        EQU 128
00001000                            28  
00001000                            29  ;output window
00001000  =00000320                 30  OUTPUT_WINDOW_WIDTH         EQU 800     ;the output screen width in pixels
00001000  =00000256                 31  OUTPUT_WINDOW_HEIGHT        EQU 598     ;the output screen height in pixels
00001000                            32  
00001000                            33  ;pachinko board dimesions and key points
00001000  =000000E8                 34  TOP_LEFT_BOARD_X_POS        EQU 232
00001000  =0000001E                 35  TOP_LEFT_BOARD_Y_POS        EQU 30
00001000  =00000236                 36  BOTTOM_RIGHT_BOARD_X_POS    EQU 566
00001000  =000001F3                 37  BOTTOM_RIGHT_BOARD_Y_POS    EQU 499
00001000  =0000014E                 38  BOARD_WIDTH                 EQU (BOTTOM_RIGHT_BOARD_X_POS-TOP_LEFT_BOARD_X_POS)
00001000  =000001D5                 39  BOARD_HEIGHT                EQU (BOTTOM_RIGHT_BOARD_Y_POS-TOP_LEFT_BOARD_Y_POS)
00001000                            40  
00001000                            41  ;ball
00001000  =00000028                 42  BALL_WIDTH                  EQU 40
00001000  =00000028                 43  BALL_HEIGHT                 EQU 40
00001000  =00000014                 44  BALL_RADIUS                 EQU 20
00001000  =00000028                 45  BALL_OFFSET                 EQU 40
00001000  =000000E8                 46  BALL_INITIAL_X_POS          EQU TOP_LEFT_BOARD_X_POS
00001000  =0000001E                 47  BALL_INITIAL_Y_POS          EQU TOP_LEFT_BOARD_Y_POS
00001000  =000000FC                 48  BALL_CENTER_X_POS           EQU (BALL_INITIAL_X_POS+(BALL_WIDTH/2))
00001000  =00000032                 49  BALL_CENTER_Y_POS           EQU (BALL_INITIAL_Y_POS+(BALL_HEIGHT/2))
00001000                            50  
00001000                            51  
00001000  =00000200                 52  BALL_SLIDE_VELOCITY         EQU $200
00001000                            53  
00001000  =00000010                 54  BALL_Y_ACCELERATION         EQU $10
00001000                            55  
00001000  =00000000                 56  BALL_INIT_X_VELOCITY        EQU 0      ****************************** make random between -2,2
00001000  =00000000                 57  BALL_INIT_Y_VELOCITY        EQU 0
00001000                            58  
00001000                            59  
00001000                            60  ;pegs
00001000  =00000004                 61  PEG_WIDTH                   EQU 4
00001000  =00000004                 62  PEG_HEIGHT                  EQU 4
00001000  =00000002                 63  PEG_RADIUS                  EQU 2
00001000                            64  
00001000                            65  
00001000                            66  ;collision
00001000  =00000018                 67  MIN_DX_TO_CHECK_COLLISION   EQU 2+(BALL_RADIUS+PEG_RADIUS)
00001000  =00000018                 68  MIN_DY_TO_CHECK_COLLISION   EQU 2+(BALL_RADIUS+PEG_RADIUS)
00001000                            69  
00001000                            70  
00001000                            71  ;commands
00001000  =00000008                 72  GET_TIME_COMMAND            EQU 8       ;get current time trap code
00001000  =00000013                 73  INPUT_COMMAND               EQU 19      ;get input keys    
00001000  =00000021                 74  SET_OUTPUT_WINDOW_COMMAND   EQU 33      ;set output trap code
00001000  =00000050                 75  SET_PEN_COLOR_COMMAND       EQU 80      ;set pen color trap code
00001000  =00000052                 76  DRAW_A_PIXEL_COMMAND        EQU 82      ;draw pixel trap code
00001000  =0000005C                 77  SET_DRAWING_MODE_COMMAND    EQU 92      ;set drawing mode used for enabeling double buffering
00001000  =0000005E                 78  REPAINT_SCREEN_COMMAND      EQU 94      ;repaints screen command from a buffer
00001000                            79  
00001000  =00000011                 80  DOUBLE_BUFFERING_MODE       EQU 17      ;double buffering mode option
00001000                            81  
00001000                            82  ;offsets in the bitmap
00001000  =0000000A                 83  OFFSET_TO_PIXEL_ARRAY       EQU $0A      ;the offset to the address containing the pixel array starting byte
00001000  =00000012                 84  OFFSET_IMAGE_WIDTH          EQU $12      ;the offset to the address containing the image width
00001000  =00000016                 85  OFFSET_IMAGE_HEIGHT         EQU $16      ;the offset to the address containing the image height
00001000                            86  
00001000                            87  
00001000                            88  ;Stack pointers for drawing chunks
00001000  =00000024                 89  FIRST_PIXEL_ADDRESS_STACK_OFFSET    EQU 36
00001000  =00000020                 90  IMAGE_WIDTH_STACK_OFFSET            EQU 32
00001000  =0000001C                 91  IMAGE_HEIGHT_STACK_OFFSET           EQU 28
00001000  =00000018                 92  DRAW_X_POS_STACK_OFFSET             EQU 24
00001000  =00000014                 93  DRAW_Y_POS_STACK_OFFSET             EQU 20
00001000  =00000010                 94  CHUNK_X_POS_STACK_OFFSET            EQU 16
00001000  =0000000C                 95  CHUNK_Y_POS_STACK_OFFSET            EQU 12
00001000  =00000008                 96  CHUNK_WIDTH_STACK_OFFSET            EQU 8
00001000  =00000004                 97  CHUNK_HEIGHT_STACK_OFFSET           EQU 4
00001000  =00000028                 98  STACK_OFFSET_WHEN_DRAWING           EQU FIRST_PIXEL_ADDRESS_STACK_OFFSET+CHUNK_HEIGHT_STACK_OFFSET
00001000                            99  
00001000                           100  
00001000                           101  ;input keycodes
00001000  =00000020                102  SPACE_KEY   EQU $20
00001000  =00000025                103  LEFT_ARROW  EQU $25
00001000  =00000027                104  RIGHT_ARROW EQU $27
00001000                           105  
00001000                           106  ;input location of keycode in d1
00001000  =00000010                107  SPACE_KEY_LOCATION   EQU 16
00001000  =00000008                108  LEFT_ARROW_LOCATION  EQU 8
00001000  =00000000                109  RIGHT_ARROW_LOCATION EQU 0
00001000                           110  
00001000                           111  ;frame rate
00001000  =00000001                112  TIME_PER_FRAME       EQU 1
00001000                           113  
00001000                           114  
00001000                           115  
00001000                           116  
00001000                           117  
00001000                           118  
00001000                           119  
00001000                           120  
00001000                           121  -------------------- end include --------------------
00001000                           122  
00001000                           123  Main:
00001000                           124      
00001000  4EB9 00001050            125      jsr SetOutputWindow 
00001006  4EB9 000013E6            126      jsr EnableDoubleBuffer
0000100C  4EB9 00001224            127      jsr DrawAllBackground
00001012  4EB9 0000124C            128      jsr DrawBallFirstTime
00001018  4EB9 000013EE            129      jsr PaintScreenBuffer
0000101E                           130      
0000101E                           131  GameLoop:
0000101E                           132      
0000101E  4EB9 00001190            133      jsr SetFrameBeginTime
00001024                           134  
00001024  4EB9 000011B2            135      jsr HandleInput
0000102A                           136      
0000102A  4EB9 00001062            137      jsr UpdateBallPosition
00001030                           138  
00001030  4EB9 00001232            139      jsr DrawBackgroundChunk
00001036  4EB9 0000125A            140      jsr DrawBall
0000103C                           141  
0000103C  4EB9 0000119C            142      jsr WaitToEndFrame
00001042                           143      
00001042  4EB9 000013EE            144      jsr PaintScreenBuffer
00001048                           145  
00001048  4EF8 101E                146      jmp GameLoop          
0000104C                           147      
0000104C  4E72 3000                148      STOP    #$3000                     
00001050                           149  
00001050                           150  SetOutputWindow:
00001050                           151  
00001050                           152      ;set the output window dimensions
00001050  7021                     153      move.l  #SET_OUTPUT_WINDOW_COMMAND, d0
00001052  223C 00000320            154      move.l  #OUTPUT_WINDOW_WIDTH, d1
00001058  4841                     155      swap.w  d1
0000105A  323C 0256                156      move.w  #OUTPUT_WINDOW_HEIGHT, d1
0000105E  4E4F                     157      Trap    #15
00001060                           158  
00001060  4E75                     159      rts
00001062                           160  
00001062                           161      
00001062                           162  
00001062                           163  UpdateBallPosition:
00001062                           164  
00001062                           165      ;initialize ball moved to false
00001062  13FC 0000 00191C47       166      move.b  #(FALSE), (BallMoved)
0000106A                           167  
0000106A                           168      ;see if the ball is already dropped
0000106A  0C39 0001 00191C46       169      cmp.b   #(TRUE), (BallDropped)
00001072  6700 008C                170      beq     BallDropping
00001076                           171      
00001076                           172      ;depending on user input, call drop or Move
00001076  2039 00191C2E            173      move.l  (PlayerInput), d0
0000107C  E588                     174      lsl.l   #2,d0
0000107E  43F9 00191C36            175      lea BallCalls, a1
00001084  2231 0000                176      move.l  (a1, d0),d1
00001088                           177      
00001088                           178      ;avoid null calls
00001088  0C81 00000000            179      cmpi.l  #0, d1
0000108E  6700 0006                180      beq     EndBallUpdate
00001092                           181      
00001092  2441                     182      move.l  d1,a2
00001094  4ED2                     183      jmp     (a2)
00001096                           184  
00001096                           185  EndBallUpdate:
00001096                           186      
00001096  4E75                     187      rts
00001098                           188  
00001098                           189  DropBall:
00001098                           190  
00001098                           191      ;add drop ball code
00001098                           192      
00001098  13FC 0001 00191C46       193      move.b  #(TRUE), (BallDropped)
000010A0                           194  
000010A0  4EF8 1096                195      jmp     EndBallUpdate
000010A4                           196  
000010A4                           197  MoveBallToLeft:
000010A4                           198  
000010A4                           199      ;cmp.b   #(TRUE), (BallDropped)
000010A4                           200      ;beq     EndBallUpdate                ; change this after making the game work
000010A4                           201  
000010A4                           202      ;check if in bounds
000010A4  0CB9 000000E8 00191C4A   203      cmp.l   #(TOP_LEFT_BOARD_X_POS), (BallXPosition)
000010AE  6F00 001E                204      ble     .DontMove
000010B2                           205  
000010B2  2039 00191C4A            206      move.l  (BallXPosition),d0
000010B8  E188                     207      lsl.l   #8,d0
000010BA                           208  
000010BA  0480 00000200            209      sub.l   #(BALL_SLIDE_VELOCITY), d0
000010C0  23C0 00191C4E            210      move.l  d0, (BallXPositionFixed)
000010C6                           211  
000010C6                           212      ;ball moved
000010C6  13FC 0001 00191C47       213      move.b  #(TRUE), (BallMoved)
000010CE                           214  
000010CE                           215  .DontMove:
000010CE                           216  
000010CE  4EF8 1096                217      jmp     EndBallUpdate
000010D2                           218  
000010D2                           219  MoveBallToRight:
000010D2                           220  
000010D2                           221      ;cmp.b   #(TRUE), (BallDropped)
000010D2                           222      ;beq     EndBallUpdate                ; change this after making the game work
000010D2                           223  
000010D2                           224      ;check if in bounds
000010D2  0CB9 0000020E 00191C4A   225      cmp.l   #(BOTTOM_RIGHT_BOARD_X_POS-BALL_WIDTH), (BallXPosition)
000010DC  6C00 001E                226      bge     .DontMove
000010E0                           227  
000010E0  2039 00191C4A            228      move.l  (BallXPosition),d0
000010E6  E188                     229      lsl.l   #8,d0
000010E8                           230      
000010E8  0680 00000200            231      add.l   #(BALL_SLIDE_VELOCITY), d0
000010EE  23C0 00191C4E            232      move.l  d0, (BallXPositionFixed)
000010F4                           233  
000010F4                           234      ;ball moved
000010F4  13FC 0001 00191C47       235      move.b  #(TRUE), (BallMoved)
000010FC                           236  
000010FC                           237  .DontMove:
000010FC                           238  
000010FC  4EF8 1096                239      jmp     EndBallUpdate
00001100                           240  
00001100                           241  
00001100                           242  BallDropping:
00001100                           243      
00001100                           244      ;check collisions with pegs here *************************************
00001100  4EB9 00001434            245      jsr     CheckCollision
00001106                           246  
00001106  B0BC 00000001            247      cmp.l   #(TRUE), d0
0000110C  6600 0014                248      bne     .NotColliding
00001110                           249  
00001110                           250      ;check if it just collided
00001110  0C39 0000 00191C48       251      cmp.b   #(FALSE), (BallJustCollided)
00001118  6700 0016                252      beq     .JustCollided
0000111C                           253  
0000111C  4EF9 00001144            254      jmp     .ContinueCheckingCol
00001122                           255  
00001122                           256  .NotColliding:
00001122                           257  
00001122  13FC 0000 00191C48       258      move.b  #(FALSE), (BallJustCollided)
0000112A  4EF9 00001144            259      jmp     .ContinueCheckingCol
00001130                           260  
00001130                           261  .JustCollided:  
00001130                           262  
00001130                           263      ;bounce
00001130                           264      ;move.l  (BallYVelocity), d0
00001130                           265      ;lsl.l   #(FRACTION_BITS),d0
00001130                           266      ;mulu.w     #(EIGHT_TENTH), d0
00001130                           267      ;lsr.l   #(FRACTION_BITS),d0
00001130                           268      ;lsr.l   #(FRACTION_BITS),d0
00001130                           269      ;neg.l   d0
00001130                           270      ;move.l     d0, (BallYVelocity)
00001130                           271  
00001130  4EB9 000014C6            272      jsr BounceBallOff
00001136                           273  
00001136  13FC 0001 00191C48       274      move.b  #(TRUE), (BallJustCollided)
0000113E  4EF9 0000118C            275      jmp     .DontMove
00001144                           276  
00001144                           277  .ContinueCheckingCol:
00001144                           278  .SkipBounceOffPeg:
00001144                           279  
00001144  0CB9 000001CB 00191C52   280      cmp.l   #(BOTTOM_RIGHT_BOARD_Y_POS-BALL_HEIGHT), (BallYPosition)
0000114E  6C00 003C                281      bge     .DontMove ; bounce instead
00001152                           282  
00001152                           283      ;update x pos
00001152  2039 00191C4A            284      move.l  (BallXPosition),d0
00001158  E188                     285      lsl.l   #8,d0
0000115A                           286      
0000115A  D0B9 00191C5A            287      add.l   (BallXVelocity), d0
00001160  23C0 00191C4E            288      move.l  d0, (BallXPositionFixed)
00001166                           289  
00001166                           290  
00001166                           291      ;update Y vel
00001166  06B9 00000010 00191C5E   292      add.l   #(BALL_Y_ACCELERATION), (BallYVelocity)
00001170                           293  
00001170                           294      ;add the velocity to the y pos
00001170  2039 00191C52            295      move.l  (BallYPosition),d0
00001176  E188                     296      lsl.l   #8,d0
00001178                           297      
00001178  D0B9 00191C5E            298      add.l   (BallYVelocity), d0
0000117E  23C0 00191C56            299      move.l  d0, (BallYPositionFixed)
00001184                           300  
00001184  13FC 0001 00191C47       301      move.b  #(TRUE), BallMoved
0000118C                           302  
0000118C                           303  
0000118C                           304  .DontMove:
0000118C                           305  
0000118C  4EF8 1096                306      jmp     EndBallUpdate
00001190                           307  
00001190                           308  
00001190                           309  
00001190                           310  SetFrameBeginTime:
00001190                           311  
00001190                           312      ;get current time
00001190  7008                     313      move.l  #(GET_TIME_COMMAND), d0
00001192  4E4F                     314      Trap    #15
00001194                           315      ;set FrameBeginTime
00001194  23C1 00191C32            316      move.l  d1, (FrameBeginTime)
0000119A                           317  
0000119A  4E75                     318      rts
0000119C                           319  
0000119C                           320  
0000119C                           321  WaitToEndFrame:
0000119C                           322  
0000119C  2439 00191C32            323      move.l  (FrameBeginTime),d2
000011A2                           324  
000011A2                           325  .LoopAgain:
000011A2                           326      ;get current time
000011A2  7008                     327      move.l  #(GET_TIME_COMMAND), d0
000011A4  4E4F                     328      Trap    #15
000011A6                           329      
000011A6                           330      ;get DeltaTime in d1
000011A6  9282                     331      sub.l   d2,d1
000011A8                           332  
000011A8  B2BC 00000001            333      cmp.l   #(TIME_PER_FRAME), d1
000011AE  6DF2                     334      blt     .LoopAgain
000011B0                           335  
000011B0  4E75                     336      rts
000011B2                           337  
000011B2                           338  
000011B2                           339  
000011B2                           340  
000011B2                           341      include "InputHandler.x68"
000011B2                           342  
000011B2                           343  
000011B2                           344  HandleInput:  
000011B2                           345  
000011B2                           346      ;reset PlayerInput
000011B2  23FC 00000000 00191C2E   347      move.l  #0,(PlayerInput)
000011BC                           348      ;Set the inputs    
000011BC  7013                     349      move.l  #(INPUT_COMMAND),d0
000011BE                           350      ;d1: $00202527 => space, left arrow, right arrow
000011BE                           351      ;move.l  $20<<$16+$25<<$8+$27,d1
000011BE  7220                     352      move.l  #(SPACE_KEY),d1
000011C0  E189                     353      lsl.l   #8,d1
000011C2  123C 0025                354      move.b  #(LEFT_ARROW),d1
000011C6  E189                     355      lsl.l   #8,d1
000011C8  123C 0027                356      move.b  #(RIGHT_ARROW),d1
000011CC                           357  
000011CC  4E4F                     358      Trap    #15
000011CE                           359  
000011CE                           360      ;check if ball is droped, if yes skip
000011CE  0C39 0001 00191C46       361      cmpi.b  #(TRUE),(BallDropped)
000011D6  6700 001A                362      beq     EndHandleInput
000011DA                           363  
000011DA                           364      ;check the pressed key and call subroutines accordingly
000011DA  0801 0010                365      btst.l  #(SPACE_KEY_LOCATION), d1       
000011DE  6600 0014                366      bne     DropBallInput
000011E2                           367  
000011E2  0801 0008                368      btst.l  #(LEFT_ARROW_LOCATION), d1       
000011E6  6600 001A                369      bne     MoveBallToLeftInput
000011EA                           370  
000011EA  0801 0000                371      btst.l  #(RIGHT_ARROW_LOCATION), d1       
000011EE  6600 0026                372      bne     MoveBallToRightInput
000011F2                           373  
000011F2                           374  EndHandleInput:
000011F2                           375  
000011F2  4E75                     376      rts
000011F4                           377  
000011F4                           378  DropBallInput:
000011F4                           379  
000011F4  23FC 00000001 00191C2E   380      move.l #1,(PlayerInput)
000011FE                           381  
000011FE  4EF8 11F2                382      jmp EndHandleInput
00001202                           383  
00001202                           384  MoveBallToLeftInput:
00001202                           385      
00001202                           386      ;if both arrows are pressed, do nothing
00001202  0801 0000                387      btst.l  #(RIGHT_ARROW_LOCATION), d1       
00001206  66EA                     388      bne     EndHandleInput
00001208                           389  
00001208  23FC 00000002 00191C2E   390      move.l #2,(PlayerInput)
00001212                           391  
00001212  4EF8 11F2                392      jmp     EndHandleInput
00001216                           393  
00001216                           394  MoveBallToRightInput:
00001216                           395      
00001216  23FC 00000003 00191C2E   396      move.l #3,(PlayerInput)  
00001220                           397  
00001220  4EF8 11F2                398      jmp     EndHandleInput
00001224                           399    
00001224                           400  -------------------- end include --------------------
00001224                           401      include "drawingModule.X68"
00001224                           402  ; this module contains drawing related subroutines
00001224                           403  
00001224                           404  DrawAllBackground:
00001224                           405      
00001224                           406      ;a0 has the address to the bitmap
00001224  4EB9 00001274            407      jsr SetFirstDrawParams
0000122A  4EB9 00001304            408      jsr DrawPic
00001230                           409  
00001230  4E75                     410      rts
00001232                           411  
00001232                           412  DrawBackgroundChunk:
00001232                           413      
00001232  0C39 0000 00191C47       414      cmp.b #(FALSE),(BallMoved)
0000123A  6700 000E                415      beq .DontDraw
0000123E                           416      
0000123E  4EB9 0000129C            417      jsr SetBgDrawParams
00001244  4EB9 00001304            418      jsr DrawPic
0000124A                           419  
0000124A                           420  .DontDraw:
0000124A  4E75                     421      rts
0000124C                           422  
0000124C                           423  DrawBallFirstTime:
0000124C                           424  
0000124C  13FC 0001 00191C47       425      move.b  #(TRUE), (BallMoved)
00001254                           426  
00001254  4EF9 0000125A            427      jmp     DrawBall
0000125A                           428  
0000125A                           429  DrawBall:
0000125A                           430  
0000125A  0C39 0000 00191C47       431      cmp.b #(FALSE),(BallMoved)
00001262  6700 000E                432      beq .DontDraw
00001266                           433  
00001266  4EB9 000012CE            434      jsr SetBallDrawParams
0000126C  4EB9 00001304            435      jsr DrawPic
00001272                           436  
00001272                           437  .DontDraw:
00001272  4E75                     438      rts
00001274                           439  
00001274                           440  
00001274                           441  SetFirstDrawParams:
00001274                           442  
00001274  41F9 00001580            443      lea BackgroundBitmap, a0
0000127A                           444  
0000127A                           445      ;set draw start position to 0,0    
0000127A  223C 00000256            446      move.l  #(OUTPUT_WINDOW_HEIGHT),d1  ;y
00001280  4841                     447      swap    d1
00001282  323C 0000                448      move.w  #0,d1                       ;x
00001286                           449      
00001286                           450      ;set chunk start position to 0,0    
00001286  7400                     451      move.l  #0,d2                       ;y
00001288  4842                     452      swap    d2
0000128A  343C 0000                453      move.w  #0,d2                       ;x
0000128E                           454      
0000128E                           455      ;set chunk width and height to the screen resol
0000128E  263C 00000320            456      move.l  #(OUTPUT_WINDOW_WIDTH),d3
00001294  4843                     457      swap    d3
00001296  363C 0256                458      move.w  #(OUTPUT_WINDOW_HEIGHT),d3
0000129A                           459      
0000129A  4E75                     460      rts
0000129C                           461  
0000129C                           462  SetBgDrawParams:
0000129C                           463  
0000129C  41F9 00001580            464      lea BackgroundBitmap, a0
000012A2                           465  
000012A2                           466      ;set draw start position   
000012A2  2239 00191C52            467      move.l  (BallYPosition),d1           
000012A8  0681 00000028            468      add.l   #(BALL_HEIGHT),d1               ;y
000012AE  4841                     469      swap    d1
000012B0  D2B9 00191C4A            470      add.l   (BallXPosition),d1              ;x
000012B6                           471      ;sub.l   #(BALL_OFFSET),d1
000012B6                           472      
000012B6                           473      ;set chunk start position
000012B6  2439 00191C52            474      move.l  (BallYPosition),d2              ;y          
000012BC  4842                     475      swap    d2
000012BE  D4B9 00191C4A            476      add.l  (BallXPosition),d2              ;x
000012C4                           477      
000012C4                           478      ;set chunk width and height
000012C4  7628                     479      move.l  #(BALL_WIDTH),d3                ;add offset maybe
000012C6  4843                     480      swap    d3
000012C8  363C 0028                481      move.w  #(BALL_HEIGHT),d3               ;add offset maybe
000012CC                           482      
000012CC  4E75                     483      rts
000012CE                           484  
000012CE                           485  SetBallDrawParams:
000012CE                           486  
000012CE  41F9 0015FBF6            487      lea BallBitmap, a0
000012D4                           488  
000012D4                           489      ;set draw start position   
000012D4  7228                     490      move.l  #(BALL_HEIGHT),d1
000012D6  2E39 00191C56            491      move.l  (BallYPositionFixed),d7
000012DC  E08F                     492      lsr.l   #(FRACTION_BITS),d7
000012DE  D287                     493      add.l   d7,d1
000012E0                           494      ;update the y position
000012E0  23C7 00191C52            495      move.l  d7, (BallYPosition)
000012E6                           496            
000012E6  4841                     497      swap    d1
000012E8                           498  
000012E8  2E39 00191C4E            499      move.l  (BallXPositionFixed),d7
000012EE  E08F                     500      lsr.l   #(FRACTION_BITS),d7
000012F0  3207                     501      move.w  d7, d1
000012F2                           502      ;update the x position
000012F2  23C7 00191C4A            503      move.l  d7, (BallXPosition)
000012F8                           504  
000012F8                           505      
000012F8                           506      ;set chunk start position
000012F8  7400                     507      move.l  #0,d2 
000012FA                           508      
000012FA                           509      ;set chunk width and height
000012FA  7628                     510      move.l  #(BALL_WIDTH),d3
000012FC  4843                     511      swap    d3
000012FE  363C 0028                512      move.w  #(BALL_HEIGHT),d3
00001302                           513      
00001302  4E75                     514      rts
00001304                           515  
00001304                           516       
00001304                           517  DrawPic:
00001304                           518      ;push the first pixel pos
00001304  2C48                     519      move.l  a0, a6
00001306  4EB9 000013F4            520      jsr GetFirstPixelAddress
0000130C  2F0E                     521      move.l  a6, -(sp)                               
0000130E                           522      
0000130E                           523      ;push image width
0000130E  2C48                     524      move.l  a0, a6
00001310  4EB9 0000140C            525      jsr GetImageWidth
00001316  2F00                     526      move.l  d0,-(sp)
00001318                           527      
00001318                           528      ;push image height
00001318  2C48                     529      move.l  a0, a6
0000131A  4EB9 0000141C            530      jsr GetImageHeight
00001320  2F00                     531      move.l  d0,-(sp)
00001322                           532  
00001322                           533      ;push the draw start pos
00001322  4284                     534      clr.l   d4
00001324  3801                     535      move.w  d1, d4
00001326  2F04                     536      move.l  d4,-(sp)    ;push x
00001328  4841                     537      swap    d1
0000132A  3801                     538      move.w  d1,d4
0000132C  2F04                     539      move.l  d4,-(sp)    ;push y
0000132E                           540      
0000132E                           541      ;push the chunk start pos
0000132E  3802                     542      move.w  d2,d4
00001330  2F04                     543      move.l  d4,-(sp)    ;push x
00001332                           544      ;convert the y pos of chunk to bitmap coor
00001332  4842                     545      swap    d2
00001334  3802                     546      move.w  d2,d4
00001336  D843                     547      add.w   d3,d4           ;add chunk height
00001338                           548      ;d0 have the image height
00001338  2200                     549      move.l  d0,d1 
0000133A  9284                     550      sub.l   d4,d1
0000133C  2F01                     551      move.l  d1, -(sp)   ;push y
0000133E                           552      
0000133E                           553      ;push the chunk dimensions
0000133E  4843                     554      swap    d3
00001340  3803                     555      move.w  d3, d4  
00001342  2F04                     556      move.l  d4,-(sp)    ;push width
00001344  4843                     557      swap    d3
00001346  3803                     558      move.w  d3, d4
00001348  2F04                     559      move.l  d4,-(sp)    ;push height
0000134A                           560   
0000134A  4EB9 00001358            561      jsr DrawAChunk
00001350                           562      
00001350                           563      ;reinit the stack pointer
00001350  DFFC 00000028            564      add.l   #(STACK_OFFSET_WHEN_DRAWING),sp
00001356  4E75                     565      rts                
00001358                           566      
00001358                           567  DrawAChunk:
00001358                           568      
00001358  2E2F 0020                569      move.l  IMAGE_WIDTH_STACK_OFFSET(sp),d7                 ;get the image width into d7
0000135C  0287 00000003            570      andi.l  #3,d7                                           ;get the rest of division by 4, which is the padding     
00001362                           571      
00001362  286F 0024                572      move.l  FIRST_PIXEL_ADDRESS_STACK_OFFSET(sp),a4         ;a4 points to the first pixel
00001366                           573      
00001366  222F 0020                574      move.l  IMAGE_WIDTH_STACK_OFFSET(sp),d1                 ;image width into d1
0000136A  2401                     575      move.l  d1, d2                                          ;temp value to avoid mul
0000136C  D282                     576      add.l   d2, d1
0000136E  D282                     577      add.l   d2, d1                                          ;get the width number of bytes
00001370  DE81                     578      add.l   d1,d7                                           ;width bytes
00001372                           579      
00001372  2407                     580      move.l  d7, d2                                          ;store width bytes into d2
00001374                           581      
00001374  222F 000C                582      move.l  CHUNK_Y_POS_STACK_OFFSET(sp),d1                 ;get the chunk y pos
00001378  C4C1                     583      mulu.w  d1,d2                                           ;mutiply the y with the width bytes to get the y bytes offset
0000137A                           584      
0000137A  202F 0010                585      move.l  CHUNK_X_POS_STACK_OFFSET(sp),d0                 ;put chunk x start pos into d0
0000137E  2200                     586      move.l  d0, d1                                          ;temp value to avoid mul
00001380  D081                     587      add.l   d1, d0
00001382  D081                     588      add.l   d1, d0                                          ;get the x number of bytes
00001384                           589      
00001384  D480                     590      add.l   d0,d2                                           ;add the x bytes to the y bytes offset to have the total offset
00001386                           591      
00001386  D9C2                     592      add.l   d2, a4                                          ;add the offset to get the new first position
00001388                           593      
00001388  7A00                     594      move.l  #0, d5                                          ;x counter
0000138A  7C00                     595      move.l  #0, d6                                          ;y counter
0000138C                           596      
0000138C                           597      
0000138C                           598  DrawColumn:
0000138C                           599      ;set pen color
0000138C  4281                     600      clr.l d1
0000138E  121C                     601      move.b   (a4)+,d1                                       ;set blue
00001390  E189                     602      lsl.l   #8,d1                                           ;shift the byte to the left
00001392  121C                     603      move.b  (a4)+,d1                                        ;set green
00001394  E189                     604      lsl.l   #8,d1                                           ;shift the byte to the left
00001396  121C                     605      move.b  (a4)+,d1                                        ;set red    => d1 has 00BBGGRR
00001398                           606      
00001398                           607      ;if green, skip that pixel
00001398  B2BC 0000FF00            608      cmp.l   #(GREEN),d1
0000139E  6700 0018                609      beq     NextPixel
000013A2                           610      
000013A2  7050                     611      move.l  #SET_PEN_COLOR_COMMAND, d0
000013A4  4E4F                     612      Trap #15
000013A6                           613      
000013A6                           614      ;draw a pixel
000013A6                           615      ;set x in d1 and y in d2
000013A6  4281                     616      clr.l   d1
000013A8  222F 0018                617      move.l  DRAW_X_POS_STACK_OFFSET(sp),d1                                               
000013AC  D285                     618      add.l   d5,d1                                           ;set x position on screen
000013AE                           619      
000013AE  242F 0014                620      move.l  DRAW_Y_POS_STACK_OFFSET(sp),d2
000013B2  9486                     621      sub.l   d6,d2                                           ;set the y position on screen
000013B4                           622      
000013B4  7052                     623      move.l  #DRAW_A_PIXEL_COMMAND, d0
000013B6  4E4F                     624      Trap #15
000013B8                           625  
000013B8                           626  NextPixel:    
000013B8  5285                     627      addi.l  #1, d5                                          ;increment x counter
000013BA  202F 0008                628      move.l  CHUNK_WIDTH_STACK_OFFSET(sp),d0
000013BE  BA80                     629      cmp.l  d0,d5
000013C0  66CA                     630      bne DrawColumn                                          ;if not done with the column, continue drawing
000013C2                           631      
000013C2  5286                     632      addi.l  #1, d6                                          ;increment y counter
000013C4  202F 0004                633      move.l  CHUNK_HEIGHT_STACK_OFFSET(sp),d0
000013C8  BC80                     634      cmp.l   d0,d6
000013CA  6700 0018                635      beq     DrawEnd                                         ;if done with the rows, then stop drawing
000013CE                           636      
000013CE  7A00                     637      move.l  #0, d5                                          ;reset x counter
000013D0  222F 0008                638      move.l  CHUNK_WIDTH_STACK_OFFSET(sp),d1                 ;put chunk width in d1
000013D4  2001                     639      move.l  d1, d0                                          ;d0 has the temp to avoid mul
000013D6  D280                     640      add.l   d0, d1
000013D8  D280                     641      add.l   d0, d1                                          ;multiply it by 3 to get the bytes number
000013DA                           642      
000013DA  2007                     643      move.l  d7, d0                                          ;d0 = width bytes
000013DC  9081                     644      sub.l   d1,d0                                           ;sub the chunk bytes from the width bytes
000013DE  D9C0                     645      add.l   d0, a4                                          ;and then add it to a4 to get the next pixel
000013E0                           646      
000013E0  4EF8 138C                647      jmp DrawColumn                                          ;draw next column
000013E4                           648  
000013E4                           649  DrawEnd:
000013E4                           650  
000013E4  4E75                     651      rts
000013E6                           652  
000013E6                           653  
000013E6                           654  EnableDoubleBuffer:
000013E6                           655      ;double buffering mode enabled
000013E6  705C                     656      move.l  #SET_DRAWING_MODE_COMMAND, d0
000013E8  7211                     657      move.l  #DOUBLE_BUFFERING_MODE, d1
000013EA  4E4F                     658      Trap    #15
000013EC                           659  
000013EC  4E75                     660      rts
000013EE                           661  
000013EE                           662  PaintScreenBuffer:
000013EE                           663      ;repaint screen from buffer
000013EE  705E                     664      move.l  #REPAINT_SCREEN_COMMAND, d0
000013F0  4E4F                     665      Trap    #15
000013F2                           666          
000013F2  4E75                     667      rts    
000013F4                           668  
000013F4                           669  ;param a6:image address
000013F4                           670  GetFirstPixelAddress:
000013F4  DDFC 0000000A            671      add.l   #(OFFSET_TO_PIXEL_ARRAY),a6                     ;a6 has the pixel offset address
000013FA  2016                     672      move.l  (a6),d0                                         ;put it in d0
000013FC  4EB9 0000142C            673      jsr SwapBytes                                           ;swap to get the right value
00001402  DDC0                     674      add.l   d0,a6                                           ;a6 has the 0, h-1 pixel address
00001404  9DFC 0000000A            675      sub.l   #(OFFSET_TO_PIXEL_ARRAY),a6
0000140A                           676      
0000140A  4E75                     677      rts
0000140C                           678  
0000140C                           679  ;param a6:imaage address, return d0: image width
0000140C                           680  
0000140C                           681  GetImageWidth:
0000140C  DDFC 00000012            682      add.l   #(OFFSET_IMAGE_WIDTH),a6                        ;a6 has the image width address
00001412  2016                     683      move.l  (a6),d0                                         ;put it in d0
00001414  4EB9 0000142C            684      jsr SwapBytes                                           ;swap to get the right value
0000141A                           685      
0000141A  4E75                     686      rts
0000141C                           687  
0000141C                           688  ;param a6:imaage address, return d0: image height
0000141C                           689  GetImageHeight:
0000141C  DDFC 00000016            690      add.l   #(OFFSET_IMAGE_HEIGHT),a6                       ;a6 has the image width address
00001422  2016                     691      move.l  (a6),d0                                         ;put it in d0
00001424  4EB9 0000142C            692      jsr SwapBytes                                           ;swap to get the right value
0000142A                           693  
0000142A  4E75                     694      rts
0000142C                           695  
0000142C                           696  
0000142C                           697  SwapBytes:
0000142C                           698      ;DDCCBBAA
0000142C  E158                     699      rol.w   #8,d0   ;DDCCAABB
0000142E  4840                     700      swap.w    d0    ;AABBDDCC
00001430  E158                     701      rol.w   #8,d0   ;AABBCCDD
00001432                           702      
00001432  4E75                     703      rts
00001434                           704  
00001434                           705  
00001434                           706  ;BackgroundBitmap  INCBIN "bg.bmp"
00001434                           707  
00001434                           708          
00001434                           709  
00001434                           710  
00001434                           711  
00001434                           712  
00001434                           713  
00001434                           714  
00001434                           715  
00001434                           716  
00001434                           717  
00001434                           718  
00001434                           719  -------------------- end include --------------------
00001434                           720      include "CollisionModule.x68"
00001434                           721  ;Collision stuff file
00001434                           722  
00001434                           723  CheckCollision:
00001434                           724      
00001434                           725      ;movem.l    ALL_REG, -(sp)
00001434                           726      ;set params
00001434  2039 00191C4A            727      move.l  (BallXPosition), d0
0000143A  0680 00000014            728      add.l   #(BALL_RADIUS), d0  ;shift to center
00001440  2239 00191C52            729      move.l  (BallYPosition), d1
00001446  0681 00000014            730      add.l   #(BALL_RADIUS), d1  ;shift to center
0000144C                           731  
0000144C  2439 00191C62            732      move.l  (PegsXs),d2
00001452  2639 00191C6A            733      move.l  (PegsYs),d3
00001458                           734  
00001458                           735      ;check if we even should do collision check
00001458                           736      ;dy is first
00001458  B681                     737      cmp.l   d1,d3 
0000145A  6C00 000C                738      bge     .SubBallYFromPegY ; if peg y bigger
0000145E                           739      
0000145E  9283                     740      sub.l   d3,d1
00001460  2A01                     741      move.l  d1,d5               ;dy
00001462  4EF9 0000146C            742      jmp     .CheckDy
00001468                           743  
00001468                           744  .SubBallYFromPegY:
00001468                           745  
00001468  9681                     746      sub.l   d1,d3
0000146A  2A03                     747      move.l  d3, d5              ;dy
0000146C                           748  
0000146C                           749  .CheckDy:
0000146C                           750  
0000146C  BABC 00000018            751      cmp.l   #(MIN_DY_TO_CHECK_COLLISION), d5
00001472  6E00 004E                752      bgt     .DidntCollide
00001476                           753  
00001476                           754      ;dx is second
00001476  B480                     755      cmp.l   d0,d2 
00001478  6C00 000C                756      bge     .SubBallXFromPegX ; if peg x bigger
0000147C                           757      
0000147C  9082                     758      sub.l   d2,d0
0000147E  2800                     759      move.l  d0,d4               ;dx
00001480  4EF9 0000148A            760      jmp     .CheckDx
00001486                           761  
00001486                           762  .SubBallXFromPegX:
00001486                           763  
00001486  9480                     764      sub.l   d0,d2
00001488  2802                     765      move.l  d2, d4              ;dx
0000148A                           766  
0000148A                           767  .CheckDx:
0000148A                           768  
0000148A  B8BC 00000018            769      cmp.l   #(MIN_DX_TO_CHECK_COLLISION), d4
00001490  6E00 0030                770      bgt     .DidntCollide
00001494                           771  
00001494                           772      ***************************************************todo store the closest peg coor
00001494                           773      ;if we're here. we check for collision
00001494  2004                     774      move.l  d4,d0   ;dx
00001496  C0C4                     775      mulu.w  d4,d0   ;d0 = dx^2
00001498  2205                     776      move.l  d5,d1   ;dy
0000149A  C2C5                     777      mulu.w  d5,d1   ;d1 = dy^2
0000149C                           778  
0000149C  D280                     779      add.l   d0, d1  ;d1 = dx^2 + dy^2
0000149E  E589                     780      lsl.l   #2, d1  
000014A0  4DF9 00160EEE            781      lea     (Sqrts), a6
000014A6                           782  
000014A6  2036 1000                783      move.l  (a6, d1), d0    ;d0 = sqrt(dx^2 + dy^2) with no byte swap
000014AA                           784      
000014AA  4EB8 142C                785      jsr     SwapBytes       ;d0 bytes are swapped, so it has the correct sqrt
000014AE                           786  
000014AE  E088                     787      lsr.l   #(FRACTION_BITS),d0
000014B0                           788  
000014B0                           789      ;combine radiuses
000014B0  7214                     790      move.l  #(BALL_RADIUS), d1
000014B2  5481                     791      add.l   #(PEG_RADIUS), d1
000014B4                           792  
000014B4  B081                     793      cmp.l   d1, d0
000014B6  6E00 000A                794      bgt     .DidntCollide
000014BA                           795  
000014BA  7001                     796      move.l  #(TRUE), d0
000014BC                           797  
000014BC  4EF9 000014C4            798      jmp     .CheckEnd
000014C2                           799  
000014C2                           800  
000014C2                           801  .DidntCollide:
000014C2                           802  
000014C2  7000                     803      move.l  #(FALSE), d0
000014C4                           804  
000014C4                           805  .CheckEnd:
000014C4                           806      ;movem.l    (sp)+, ALL_REG
000014C4                           807  
000014C4  4E75                     808      rts
000014C6                           809  
000014C6                           810  
000014C6                           811  BounceBallOff:
000014C6                           812  
000014C6                           813      ;set tangent vect
000014C6  2039 00191C76            814      move.l  (ClosestPegY),d0
000014CC  90B9 00191C52            815      sub.l   (BallYPosition), d0     
000014D2  0680 00000014            816      add.l   #(BALL_RADIUS), d0      ;d0 = tgX = Ypeg - Yball
000014D8  2239 00191C4A            817      move.l  (BallXPosition), d1
000014DE  92B9 00191C72            818      sub.l   (ClosestPegX), d1       
000014E4  0681 00000014            819      add.l   #(BALL_RADIUS), d1      ;d1 = tgY = Xball - Xpeg
000014EA                           820  
000014EA                           821  
000014EA                           822      ;get vect length
000014EA  2C00                     823      move.l  d0, d6
000014EC  2E01                     824      move.l  d1, d7
000014EE                           825  
000014EE  CDC0                     826      muls.w  d0, d6                  ;d6 = tgX ^ 2
000014F0  CFC1                     827      muls.w  d1, d7                  ;d7 = tgY ^ 2
000014F2                           828  
000014F2  DE86                     829      add.l   d6, d7                  ;d7 = tgX ^ 2 + tgY ^ 2
000014F4                           830  
000014F4  E58F                     831      lsl.l   #2, d7  
000014F6  4DF9 00160EEE            832      lea     (Sqrts), a6
000014FC                           833  
000014FC  2436 7000                834      move.l  (a6, d7), d2            ;d2 = TgMag = sqrt(tgX ^ 2 + tgY ^ 2) with no byte swap
00001500                           835  
00001500  2E00                     836      move.l  d0, d7                  ;store tgX
00001502  2002                     837      move.l  d2, d0
00001504                           838      
00001504  4EB8 142C                839      jsr     SwapBytes               
00001508  E088                     840      lsr.l   #(FRACTION_BITS),d0
0000150A                           841  
0000150A  2400                     842      move.l  d0, d2                  ;d2 bytes are swapped, so it has the correct sqrt
0000150C  2007                     843      move.l  d7, d0                  ;restore d0
0000150E                           844  
0000150E                           845  
0000150E                           846      ;get normalized tangent
0000150E  81C2                     847      divs.w  d2, d0                  ;Xtg
00001510  4840                     848      swap    d0
00001512  4240                     849      clr.w   d0
00001514  4840                     850      swap    d0
00001516  83C2                     851      divs.w  d2, d1                  ;Ytg
00001518  4841                     852      swap    d1
0000151A  4241                     853      clr.w   d1
0000151C  4841                     854      swap    d1
0000151E                           855  
0000151E                           856  
0000151E                           857      ;get length by calculating the dot product
0000151E                           858      ;copy x and y
0000151E  2400                     859      move.l  d0, d2                  ;Xtg
00001520  2601                     860      move.l  d1, d3                  ;Ytg
00001522                           861  
00001522                           862      ;get velocity
00001522  2C39 00191C5A            863      move.l  (BallXVelocity), d6
00001528  2E39 00191C5E            864      move.l  (BallYVelocity), d7
0000152E                           865      ; dot product
0000152E  C5C6                     866      muls.w  d6, d2                  
00001530  C7C7                     867      muls.w  d7, d3
00001532                           868  
00001532  E082                     869      asr.l   #(FRACTION_BITS),d2
00001534  E083                     870      asr.l   #(FRACTION_BITS),d3
00001536                           871  
00001536                           872  
00001536  D682                     873      add.l   d2, d3                  
00001538  2803                     874      move.l  d3, d4                  ;d4 = length
0000153A                           875  
0000153A                           876      ;get the velocity comp parallel to the tg
0000153A                           877      ;copy x and y of tg
0000153A  2400                     878      move.l  d0, d2                  ;Xtg
0000153C  2601                     879      move.l  d1, d3                  ;Ytg
0000153E                           880  
0000153E  C5C4                     881      muls.w  d4, d2                  ;d2 = Xparal = length * Xtg
00001540  C7C4                     882      muls.w  d4, d3                  ;d3 = Yparal = length * Ytg
00001542                           883  
00001542                           884      ;get velocity
00001542  2039 00191C5A            885      move.l  (BallXVelocity), d0     ;Xvel
00001548  2239 00191C5E            886      move.l  (BallYVelocity), d1     ;Yvel
0000154E                           887  
0000154E                           888      ;get the velocity comp perpendicular to the tg
0000154E  9082                     889      sub.l   d2, d0                  ;d0 = Xper = Xvel - Xparal
00001550  9283                     890      sub.l   d3, d1                  ;d1 = Yper = Yvel - Yparal
00001552                           891  
00001552                           892      ;get the new velocity
00001552  E580                     893      asl.l   #2, d0  
00001554  E581                     894      asl.l   #2, d1
00001556                           895  
00001556  2439 00191C5A            896      move.l  (BallXVelocity), d2     ;Xvel
0000155C  2639 00191C5E            897      move.l  (BallYVelocity), d3     ;Yvel
00001562                           898          
00001562  9480                     899      sub.l   d0, d2                  ;d2 = NewXvel = Xvel - 2 * Xper
00001564  9681                     900      sub.l   d1, d3                  ;d3 = NewYvel = Yvel - 2 * Yper
00001566                           901  
00001566  C5FC 00CD                902      muls.w  #(EIGHT_TENTH), d2
0000156A  E082                     903      asr.l   #(FRACTION_BITS),d2 
0000156C  C7FC 001A                904      muls.w  #(ONE_TENTH), d3
00001570  E083                     905      asr.l   #(FRACTION_BITS),d3
00001572                           906  
00001572                           907  
00001572                           908  
00001572                           909      ;update the velocity
00001572                           910  
00001572  23C2 00191C5A            911      move.l  d2, (BallXVelocity)
00001578  23C3 00191C5E            912      move.l  d3, (BallYVelocity)
0000157E                           913  
0000157E                           914  
0000157E  4E75                     915      rts
00001580                           916  
00001580                           917  
00001580                           918  
00001580                           919  
00001580                           920  
00001580                           921  
00001580                           922  
00001580                           923  
00001580                           924  
00001580                           925  
00001580                           926  -------------------- end include --------------------
00001580                           927  
00001580                           928  
00001580                           929  
00001580                           930  ;bitmaps
00001580                           931  BackgroundBitmap    INCBIN "bg.bmp"
0015FBF6                           932  BallBitmap          INCBIN "ironBall.bmp"
00160EEE                           933  
00160EEE                           934  ;sqrts
00160EEE                           935  Sqrts               INCBIN  "Sqrts.bin" 
00191C2E                           936  
00191C2E                           937  ;input
00191C2E= 00000000                 938  PlayerInput         dc.l    0 ;nothing
00191C32                           939  
00191C32                           940  ;frame rate
00191C32= 00000000                 941  FrameBeginTime      dc.l    0
00191C36                           942  
00191C36                           943  ;ball variables
00191C36= 00001096 00001098 ...    944  BallCalls           dc.l    EndBallUpdate, DropBall, MoveBallToLeft, MoveBallToRight
00191C46= 00                       945  BallDropped         dc.b    (FALSE)
00191C47= 00                       946  BallMoved           dc.b    (FALSE)
00191C48= 00                       947  BallJustCollided    dc.b    (FALSE)
00191C4A= 000000E8                 948  BallXPosition       dc.l    (BALL_INITIAL_X_POS)     
00191C4E= 0000E800                 949  BallXPositionFixed  dc.l    (BALL_INITIAL_X_POS<<FRACTION_BITS)
00191C52= 0000001E                 950  BallYPosition       dc.l    (BALL_INITIAL_Y_POS)     
00191C56= 00001E00                 951  BallYPositionFixed  dc.l    (BALL_INITIAL_Y_POS<<FRACTION_BITS)
00191C5A= 00000000                 952  BallXVelocity       dc.l    (BALL_INIT_X_VELOCITY)
00191C5E= 00000000                 953  BallYVelocity       dc.l    (BALL_INIT_Y_VELOCITY)
00191C62= 00000192 00000000        954  PegsXs              dc.l    402, 0
00191C6A= 000000E7 00000000        955  PegsYs              dc.l    231, 0
00191C72= 00000192                 956  ClosestPegX         dc.l    402
00191C76= 000000E7                 957  ClosestPegY         dc.l    231
00191C7A                           958  
00191C7A                           959  
00191C7A                           960      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALL_REG             7FFF
BACKGROUNDBITMAP    1580
BALLBITMAP          15FBF6
BALLCALLS           191C36
BALLDROPPED         191C46
BALLDROPPING        1100
BALLDROPPING:CONTINUECHECKINGCOL  1144
BALLDROPPING:DONTMOVE  118C
BALLDROPPING:JUSTCOLLIDED  1130
BALLDROPPING:NOTCOLLIDING  1122
BALLDROPPING:SKIPBOUNCEOFFPEG  1144
BALLJUSTCOLLIDED    191C48
BALLMOVED           191C47
BALLXPOSITION       191C4A
BALLXPOSITIONFIXED  191C4E
BALLXVELOCITY       191C5A
BALLYPOSITION       191C52
BALLYPOSITIONFIXED  191C56
BALLYVELOCITY       191C5E
BALL_CENTER_X_POS   FC
BALL_CENTER_Y_POS   32
BALL_HEIGHT         28
BALL_INITIAL_X_POS  E8
BALL_INITIAL_Y_POS  1E
BALL_INIT_X_VELOCITY  0
BALL_INIT_Y_VELOCITY  0
BALL_OFFSET         28
BALL_RADIUS         14
BALL_SLIDE_VELOCITY  200
BALL_WIDTH          28
BALL_Y_ACCELERATION  10
BOARD_HEIGHT        1D5
BOARD_WIDTH         14E
BOTTOM_RIGHT_BOARD_X_POS  236
BOTTOM_RIGHT_BOARD_Y_POS  1F3
BOUNCEBALLOFF       14C6
CHECKCOLLISION      1434
CHECKCOLLISION:CHECKDX  148A
CHECKCOLLISION:CHECKDY  146C
CHECKCOLLISION:CHECKEND  14C4
CHECKCOLLISION:DIDNTCOLLIDE  14C2
CHECKCOLLISION:SUBBALLXFROMPEGX  1486
CHECKCOLLISION:SUBBALLYFROMPEGY  1468
CHUNK_HEIGHT_STACK_OFFSET  4
CHUNK_WIDTH_STACK_OFFSET  8
CHUNK_X_POS_STACK_OFFSET  10
CHUNK_Y_POS_STACK_OFFSET  C
CLOSESTPEGX         191C72
CLOSESTPEGY         191C76
DOUBLE_BUFFERING_MODE  11
DRAWACHUNK          1358
DRAWALLBACKGROUND   1224
DRAWBACKGROUNDCHUNK  1232
DRAWBACKGROUNDCHUNK:DONTDRAW  124A
DRAWBALL            125A
DRAWBALL:DONTDRAW   1272
DRAWBALLFIRSTTIME   124C
DRAWCOLUMN          138C
DRAWEND             13E4
DRAWPIC             1304
DRAW_A_PIXEL_COMMAND  52
DRAW_X_POS_STACK_OFFSET  18
DRAW_Y_POS_STACK_OFFSET  14
DROPBALL            1098
DROPBALLINPUT       11F4
EIGHT_TENTH         CD
ENABLEDOUBLEBUFFER  13E6
ENDBALLUPDATE       1096
ENDHANDLEINPUT      11F2
FALSE               0
FIRST_PIXEL_ADDRESS_STACK_OFFSET  24
FRACTION_BITS       8
FRAMEBEGINTIME      191C32
GAMELOOP            101E
GETFIRSTPIXELADDRESS  13F4
GETIMAGEHEIGHT      141C
GETIMAGEWIDTH       140C
GET_TIME_COMMAND    8
GREEN               FF00
HALF                80
HANDLEINPUT         11B2
IMAGE_HEIGHT_STACK_OFFSET  1C
IMAGE_WIDTH_STACK_OFFSET  20
INPUT_COMMAND       13
LEFT_ARROW          25
LEFT_ARROW_LOCATION  8
MAIN                1000
MIN_DX_TO_CHECK_COLLISION  18
MIN_DY_TO_CHECK_COLLISION  18
MOVEBALLTOLEFT      10A4
MOVEBALLTOLEFT:DONTMOVE  10CE
MOVEBALLTOLEFTINPUT  1202
MOVEBALLTORIGHT     10D2
MOVEBALLTORIGHT:DONTMOVE  10FC
MOVEBALLTORIGHTINPUT  1216
NEXTPIXEL           13B8
OFFSET_IMAGE_HEIGHT  16
OFFSET_IMAGE_WIDTH  12
OFFSET_TO_PIXEL_ARRAY  A
ONE_TENTH           1A
OUTPUT_WINDOW_HEIGHT  256
OUTPUT_WINDOW_WIDTH  320
PAINTSCREENBUFFER   13EE
PEGSXS              191C62
PEGSYS              191C6A
PEG_HEIGHT          4
PEG_RADIUS          2
PEG_WIDTH           4
PLAYERINPUT         191C2E
REPAINT_SCREEN_COMMAND  5E
RIGHT_ARROW         27
RIGHT_ARROW_LOCATION  0
SETBALLDRAWPARAMS   12CE
SETBGDRAWPARAMS     129C
SETFIRSTDRAWPARAMS  1274
SETFRAMEBEGINTIME   1190
SETOUTPUTWINDOW     1050
SET_DRAWING_MODE_COMMAND  5C
SET_OUTPUT_WINDOW_COMMAND  21
SET_PEN_COLOR_COMMAND  50
SPACE_KEY           20
SPACE_KEY_LOCATION  10
SQRTS               160EEE
STACK_OFFSET_WHEN_DRAWING  28
START               1000
SWAPBYTES           142C
TIME_PER_FRAME      1
TOP_LEFT_BOARD_X_POS  E8
TOP_LEFT_BOARD_Y_POS  1E
TRUE                1
TWO_TENTH           33
UPDATEBALLPOSITION  1062
WAITTOENDFRAME      119C
WAITTOENDFRAME:LOOPAGAIN  11A2
