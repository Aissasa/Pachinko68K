00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 10/14/2016 5:41:08 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Pachinko Game
00000000                             3  * Written by : Aissa Ben Zayed
00000000                             4  * Date       : 10-7-2016
00000000                             5  * Description: 
00000000                             6  *
00000000                             7  *-----------------------------------------------------------
00000000                             8  
00000000                             9  *
00000000                            10  
00001000                            11  START  ORG    $1000
00001000                            12  
00001000                            13      include "equates.X68"
00001000                            14  
00001000                            15  ALL_REG                     REG d0-d7/a0-a6
00001000                            16  
00001000  =00000001                 17  TRUE                        EQU 1
00001000  =00000000                 18  FALSE                       EQU 0
00001000                            19  
00001000  =0000FF00                 20  GREEN                       EQU $00FF00
00001000                            21  
00001000                            22  ;math
00001000  =00000008                 23  FRACTION_BITS               EQU 8
00001000  =0000000D                 24  ONE_TWENTIETH               EQU 13
00001000  =00000011                 25  ONE_FIFTEENTH               EQU 17
00001000  =0000001A                 26  ONE_TENTH                   EQU 26
00001000  =00000020                 27  ONE_EIGHTH                  EQU 32
00001000  =00000040                 28  ONE_FOURTH                  EQU 64
00001000  =00000055                 29  ONE_THIRD                   EQU 85
00001000  =00000080                 30  HALF                        EQU 128
00001000  =000000CD                 31  EIGHT_TENTH                 EQU 205
00001000                            32  
00001000                            33  ;output window
00001000  =0000042F                 34  OUTPUT_WINDOW_WIDTH         EQU 1071        ;the output screen width in pixels
00001000  =00000320                 35  OUTPUT_WINDOW_HEIGHT        EQU 800         ;the output screen height in pixels
00001000                            36  
00001000                            37  ;pachinko board dimesions and key points
00001000  =000000F9                 38  TOP_LEFT_BOARD_X_POS        EQU 249
00001000  =00000030                 39  TOP_LEFT_BOARD_Y_POS        EQU 48
00001000  =0000033C                 40  BOTTOM_RIGHT_BOARD_X_POS    EQU 828
00001000  =000002AE                 41  BOTTOM_RIGHT_BOARD_Y_POS    EQU 686
00001000  =00000243                 42  BOARD_WIDTH                 EQU (BOTTOM_RIGHT_BOARD_X_POS-TOP_LEFT_BOARD_X_POS)
00001000  =0000027E                 43  BOARD_HEIGHT                EQU (BOTTOM_RIGHT_BOARD_Y_POS-TOP_LEFT_BOARD_Y_POS)
00001000                            44  
00001000                            45  ;ball
00001000  =00000032                 46  BALL_WIDTH                  EQU 50
00001000  =00000032                 47  BALL_HEIGHT                 EQU 50
00001000  =00000019                 48  BALL_RADIUS                 EQU 25
00001000  =000000F9                 49  BALL_INITIAL_X_POS          EQU TOP_LEFT_BOARD_X_POS
00001000  =00000030                 50  BALL_INITIAL_Y_POS          EQU TOP_LEFT_BOARD_Y_POS
00001000                            51  
00001000                            52  
00001000  =00000500                 53  BALL_SLIDE_VELOCITY         EQU $500
00001000                            54  
00001000  =00000030                 55  BALL_Y_ACCELERATION         EQU $30
00001000                            56  
00001000  =00000000                 57  BALL_INIT_X_VELOCITY        EQU 0     
00001000  =00000000                 58  BALL_INIT_Y_VELOCITY        EQU 0
00001000                            59  
00001000                            60  
00001000                            61  ;pegs
00001000  =00000022                 62  PEG_WIDTH                   EQU 34
00001000  =00000022                 63  PEG_HEIGHT                  EQU 34
00001000  =00000011                 64  PEG_RADIUS                  EQU 17
00001000                            65  
00001000                            66  
00001000                            67  ;collision
00001000  =0000002A                 68  MIN_DX_TO_CHECK_COLLISION   EQU (BALL_RADIUS+PEG_RADIUS)
00001000  =0000002A                 69  MIN_DY_TO_CHECK_COLLISION   EQU (BALL_RADIUS+PEG_RADIUS)
00001000  =00000055                 70  X_VELOCITY_SOFTNER          EQU ONE_THIRD
00001000  =00000020                 71  Y_VELOCITY_SOFTNER          EQU ONE_EIGHTH
00001000                            72  
00001000                            73  
00001000                            74  ;commands
00001000  =00000008                 75  GET_TIME_COMMAND            EQU 8       ;get current time trap code
00001000  =00000013                 76  INPUT_COMMAND               EQU 19      ;get input keys    
00001000  =00000021                 77  SET_OUTPUT_WINDOW_COMMAND   EQU 33      ;set output trap code
00001000  =00000049                 78  PLAY_SOUND_COMMAND          EQU 73
00001000  =00000050                 79  SET_PEN_COLOR_COMMAND       EQU 80      ;set pen color trap code
00001000  =00000052                 80  DRAW_A_PIXEL_COMMAND        EQU 82      ;draw pixel trap code
00001000  =0000005C                 81  SET_DRAWING_MODE_COMMAND    EQU 92      ;set drawing mode used for enabeling double buffering
00001000  =0000005E                 82  REPAINT_SCREEN_COMMAND      EQU 94      ;repaints screen command from a buffer
00001000                            83  
00001000  =00000011                 84  DOUBLE_BUFFERING_MODE       EQU 17      ;double buffering mode option
00001000                            85  
00001000                            86  ;offsets in the bitmap
00001000  =0000000A                 87  OFFSET_TO_PIXEL_ARRAY       EQU $0A      ;the offset to the address containing the pixel array starting byte
00001000  =00000012                 88  OFFSET_IMAGE_WIDTH          EQU $12      ;the offset to the address containing the image width
00001000  =00000016                 89  OFFSET_IMAGE_HEIGHT         EQU $16      ;the offset to the address containing the image height
00001000                            90  
00001000                            91  
00001000                            92  ;Stack pointers for drawing chunks
00001000  =00000024                 93  FIRST_PIXEL_ADDRESS_STACK_OFFSET    EQU 36
00001000  =00000020                 94  IMAGE_WIDTH_STACK_OFFSET            EQU 32
00001000  =0000001C                 95  IMAGE_HEIGHT_STACK_OFFSET           EQU 28
00001000  =00000018                 96  DRAW_X_POS_STACK_OFFSET             EQU 24
00001000  =00000014                 97  DRAW_Y_POS_STACK_OFFSET             EQU 20
00001000  =00000010                 98  CHUNK_X_POS_STACK_OFFSET            EQU 16
00001000  =0000000C                 99  CHUNK_Y_POS_STACK_OFFSET            EQU 12
00001000  =00000008                100  CHUNK_WIDTH_STACK_OFFSET            EQU 8
00001000  =00000004                101  CHUNK_HEIGHT_STACK_OFFSET           EQU 4
00001000  =00000028                102  STACK_OFFSET_WHEN_DRAWING           EQU FIRST_PIXEL_ADDRESS_STACK_OFFSET+CHUNK_HEIGHT_STACK_OFFSET
00001000                           103  
00001000                           104  ;stack pointers for checking peg collision
00001000  =00000008                105  CURRENT_PEG_X_STACK_OFFSET          EQU 8
00001000  =00000004                106  CURRENT_PEG_Y_STACK_OFFSET          EQU 4
00001000  =00000008                107  STACK_OFFSET_IN_PEG_COL             EQU CURRENT_PEG_X_STACK_OFFSET
00001000                           108  
00001000                           109  
00001000                           110  
00001000                           111  ;input keycodes
00001000  =00000020                112  SPACE_KEY   EQU $20
00001000  =00000025                113  LEFT_ARROW  EQU $25
00001000  =00000027                114  RIGHT_ARROW EQU $27
00001000                           115  
00001000                           116  ;input location of keycode in d1
00001000  =00000010                117  SPACE_KEY_LOCATION      EQU 16
00001000  =00000008                118  LEFT_ARROW_LOCATION     EQU 8
00001000  =00000000                119  RIGHT_ARROW_LOCATION    EQU 0
00001000                           120  
00001000                           121  ;frame rate
00001000  =00000001                122  TIME_PER_FRAME          EQU 1
00001000                           123  
00001000                           124  ;random numbers
00001000  =00000079                125  MAX_RAND_X_VELOCITY     EQU $79
00001000  =00000070                126  MIN_RAND_X_VELOCITY     EQU $70
00001000  =00000070                127  MIN_RAND_X_VEL_ALLOWED  EQU $70
00001000                           128  
00001000                           129  
00001000                           130  
00001000                           131  
00001000                           132  
00001000                           133  
00001000                           134  
00001000                           135  
00001000                           136  -------------------- end include --------------------
00001000                           137  
00001000                           138  Main:
00001000                           139      
00001000  4EB9 0000105C            140      jsr SetOutputWindow
00001006  4EB9 000013BA            141      jsr DrawLoading
0000100C  4EB9 00001318            142      jsr SetSomeVars 
00001012  4EB9 0000157A            143      jsr EnableDoubleBuffer
00001018  4EB9 000013A6            144      jsr DrawAllBackground
0000101E  4EB9 000013E6            145      jsr DrawBallFirstTime
00001024  4EB9 00001582            146      jsr PaintScreenBuffer
0000102A                           147      
0000102A                           148  GameLoop:
0000102A                           149      
0000102A  4EB9 000012F6            150      jsr SetFrameBeginTime
00001030                           151  
00001030  4EB9 00001334            152      jsr HandleInput
00001036                           153      
00001036  4EB9 0000106E            154      jsr UpdateBallPosition
0000103C                           155  
0000103C  4EB9 000013CC            156      jsr DrawBackgroundChunk
00001042  4EB9 000013F4            157      jsr DrawBall
00001048                           158  
00001048  4EB9 00001302            159      jsr WaitToEndFrame
0000104E                           160      
0000104E  4EB9 00001582            161      jsr PaintScreenBuffer
00001054                           162  
00001054  4EF8 102A                163      jmp GameLoop          
00001058                           164      
00001058  4E72 3000                165      STOP    #$3000                     
0000105C                           166  
0000105C                           167  SetOutputWindow:
0000105C                           168  
0000105C                           169      ;set the output window dimensions
0000105C  7021                     170      move.l  #SET_OUTPUT_WINDOW_COMMAND, d0
0000105E  223C 0000042F            171      move.l  #OUTPUT_WINDOW_WIDTH, d1
00001064  4841                     172      swap.w  d1
00001066  323C 0320                173      move.w  #OUTPUT_WINDOW_HEIGHT, d1
0000106A  4E4F                     174      Trap    #15
0000106C                           175  
0000106C  4E75                     176      rts
0000106E                           177  
0000106E                           178  
0000106E                           179  UpdateBallPosition:
0000106E                           180  
0000106E                           181      ;see if we have to RestartGame
0000106E  0C39 0001 0051C8F6       182      cmp.b   #(TRUE), (HaveToRestart)
00001076  6700 022A                183      beq     RestartGame
0000107A                           184  
0000107A                           185      ;initialize ball moved to false
0000107A  13FC 0000 0051C837       186      move.b  #(FALSE), (BallMoved)
00001082                           187  
00001082                           188      ;see if the ball is already dropped
00001082  0C39 0001 0051C836       189      cmp.b   #(TRUE), (BallDropped)
0000108A  6700 008C                190      beq     BallDropping
0000108E                           191      
0000108E                           192      ;depending on user input, call drop or Move
0000108E  2039 0051C81E            193      move.l  (PlayerInput), d0
00001094  E588                     194      lsl.l   #2,d0
00001096  43F9 0051C826            195      lea BallCalls, a1
0000109C  2231 0000                196      move.l  (a1, d0),d1
000010A0                           197      
000010A0                           198      ;avoid null calls
000010A0  0C81 00000000            199      cmpi.l  #0, d1
000010A6  6700 0006                200      beq     EndBallUpdate
000010AA                           201      
000010AA  2441                     202      move.l  d1,a2
000010AC  4ED2                     203      jmp     (a2)
000010AE                           204  
000010AE                           205  EndBallUpdate:
000010AE                           206      
000010AE  4E75                     207      rts
000010B0                           208  
000010B0                           209  DropBall:
000010B0                           210  
000010B0  13FC 0001 0051C836       211      move.b  #(TRUE), (BallDropped)
000010B8                           212  
000010B8  4EF8 10AE                213      jmp     EndBallUpdate
000010BC                           214  
000010BC                           215  MoveBallToLeft:
000010BC                           216  
000010BC                           217      ;check if in bounds
000010BC  0CB9 000000F9 0051C83A   218      cmp.l   #(TOP_LEFT_BOARD_X_POS), (BallXPosition)
000010C6  6F00 001E                219      ble     .DontMove
000010CA                           220  
000010CA  2039 0051C83A            221      move.l  (BallXPosition),d0
000010D0  E188                     222      lsl.l   #8,d0
000010D2                           223  
000010D2  0480 00000500            224      sub.l   #(BALL_SLIDE_VELOCITY), d0
000010D8  23C0 0051C83E            225      move.l  d0, (BallXPositionFixed)
000010DE                           226  
000010DE                           227      ;ball moved
000010DE  13FC 0001 0051C837       228      move.b  #(TRUE), (BallMoved)
000010E6                           229  
000010E6                           230  .DontMove:
000010E6                           231  
000010E6  4EF8 10AE                232      jmp     EndBallUpdate
000010EA                           233  
000010EA                           234  MoveBallToRight:
000010EA                           235  
000010EA                           236      ;check if in bounds
000010EA  0CB9 0000030A 0051C83A   237      cmp.l   #(BOTTOM_RIGHT_BOARD_X_POS-BALL_WIDTH), (BallXPosition)
000010F4  6C00 001E                238      bge     .DontMove
000010F8                           239  
000010F8  2039 0051C83A            240      move.l  (BallXPosition),d0
000010FE  E188                     241      lsl.l   #8,d0
00001100                           242      
00001100  0680 00000500            243      add.l   #(BALL_SLIDE_VELOCITY), d0
00001106  23C0 0051C83E            244      move.l  d0, (BallXPositionFixed)
0000110C                           245  
0000110C                           246      ;ball moved
0000110C  13FC 0001 0051C837       247      move.b  #(TRUE), (BallMoved)
00001114                           248  
00001114                           249  .DontMove:
00001114                           250  
00001114  4EF8 10AE                251      jmp     EndBallUpdate
00001118                           252  
00001118                           253  
00001118                           254  BallDropping:
00001118                           255  
00001118  4EB9 000015C8            256      jsr     CheckWallCollision
0000111E  B0BC 00000001            257      cmp.l   #(TRUE), d0
00001124  6600 0014                258      bne     .BallNotColWithWall 
00001128                           259  
00001128  0C39 0001 0051C839       260      cmp.b   #(TRUE), (BallJustWallCol)
00001130  6600 0084                261      bne     .JustWallCollided
00001134                           262  
00001134  4EF9 000011F6            263      jmp     .ContinueBallUpdate
0000113A                           264  
0000113A                           265  .BallNotColWithWall:
0000113A                           266  
0000113A  13FC 0000 0051C839       267      move.b  #(FALSE), (BallJustWallCol)
00001142  4EF9 00001148            268      jmp     .MoveOnToPegs
00001148                           269  
00001148                           270  .MoveOnToPegs:
00001148                           271      ;check collisions with pegs
00001148                           272  
00001148  43F9 0051C852            273      lea     PegsXs, a1
0000114E  45F9 0051C89A            274      lea     PegsYs, a2
00001154  2E39 0051C8EA            275      move.l  (NumberOfPegs), d7
0000115A                           276  
0000115A                           277  .NextPeg:
0000115A                           278      
0000115A                           279      ;get current peg
0000115A  2039 0051C8EE            280      move.l (LoopCounter), d0
00001160  E588                     281      lsl.l   #2, d0
00001162  2F31 0000                282      move.l  (a1, d0), -(sp) ;push y to the stack
00001166  2F32 0000                283      move.l  (a2, d0), -(sp) ;push x to the stack
0000116A                           284  
0000116A  4EB9 000015F0            285      jsr     CheckPegCollision
00001170                           286      ;free stack
00001170  508F                     287      add.l   #(STACK_OFFSET_IN_PEG_COL), sp
00001172                           288  
00001172  B0BC 00000001            289      cmp.l   #(TRUE), d0     ;if colliding, end the loop
00001178  6700 001C                290      beq     .EndPegLoop
0000117C                           291  
0000117C  52B9 0051C8EE            292      add.l   #1, (LoopCounter) 
00001182  5387                     293      sub.l   #1, d7          ;else, if there are other oegs, check them, else no collision in this frame
00001184  66D4                     294      bne     .NextPeg
00001186                           295  
00001186                           296      ;reinit loop counter
00001186  23FC 00000000 0051C8EE   297      move.l  #0, (LoopCounter)
00001190                           298  
00001190  4EF9 000011A8            299      jmp     .NotColliding
00001196                           300  
00001196                           301  .EndPegLoop:
00001196                           302      ;check if it just collided
00001196  0C39 0001 0051C838       303      cmp.b   #(TRUE), (BallJustPegCol)
0000119E  6600 0036                304      bne     .JustPegCollided
000011A2                           305  
000011A2  4EF9 000011F6            306      jmp     .ContinueBallUpdate
000011A8                           307  
000011A8                           308  .NotColliding:
000011A8                           309  
000011A8  13FC 0000 0051C838       310      move.b  #(FALSE), (BallJustPegCol)
000011B0  4EF9 000011F6            311      jmp     .ContinueBallUpdate
000011B6                           312  
000011B6                           313  .JustWallCollided:  
000011B6                           314  
000011B6                           315      ;bounce
000011B6  4EB9 00001692            316      jsr BounceBallOffWall
000011BC                           317  
000011BC  43F9 004EBAC2            318      lea     WallCollisionSound, a1
000011C2  4EB9 000012F0            319      jsr     PlaySound
000011C8                           320  
000011C8                           321  
000011C8  13FC 0001 0051C839       322      move.b  #(TRUE), (BallJustWallCol)
000011D0  4EF9 0000123E            323      jmp     .DontMove
000011D6                           324  
000011D6                           325  
000011D6                           326  .JustPegCollided:   
000011D6                           327  
000011D6                           328      ;bounce
000011D6  4EB9 000016A2            329      jsr BounceBallOffPeg
000011DC                           330  
000011DC                           331      ;set sound to play to a1
000011DC  43F9 004EBAB4            332      lea     CollisionSound, a1
000011E2  4EB9 000012F0            333      jsr     PlaySound
000011E8                           334  
000011E8  13FC 0001 0051C838       335      move.b  #(TRUE), (BallJustPegCol)
000011F0  4EF9 0000123E            336      jmp     .DontMove
000011F6                           337  
000011F6                           338  .ContinueBallUpdate:
000011F6                           339  .SkipBounceOffPeg:
000011F6                           340  
000011F6  0CB9 0000027C 0051C842   341      cmp.l   #(BOTTOM_RIGHT_BOARD_Y_POS-BALL_HEIGHT), (BallYPosition)
00001200  6C00 0040                342      bge     .AddScore 
00001204                           343  
00001204                           344      ;update x pos
00001204  2039 0051C83A            345      move.l  (BallXPosition),d0
0000120A  E188                     346      lsl.l   #8,d0
0000120C                           347      
0000120C  D0B9 0051C84A            348      add.l   (BallXVelocity), d0
00001212  23C0 0051C83E            349      move.l  d0, (BallXPositionFixed)
00001218                           350  
00001218                           351  
00001218                           352      ;update Y vel
00001218  06B9 00000030 0051C84E   353      add.l   #(BALL_Y_ACCELERATION), (BallYVelocity)
00001222                           354  
00001222                           355      ;add the velocity to the y pos
00001222  2039 0051C842            356      move.l  (BallYPosition),d0
00001228  E188                     357      lsl.l   #8,d0
0000122A                           358      
0000122A  D0B9 0051C84E            359      add.l   (BallYVelocity), d0
00001230  23C0 0051C846            360      move.l  d0, (BallYPositionFixed)
00001236                           361  
00001236  13FC 0001 0051C837       362      move.b  #(TRUE), BallMoved
0000123E                           363  
0000123E                           364  
0000123E                           365  .DontMove:
0000123E                           366  
0000123E  4EF8 10AE                367      jmp     EndBallUpdate
00001242                           368  
00001242                           369  .AddScore:
00001242                           370      
00001242  203C 00000003            371      move.l  #(EndScoresInGame-ScoresInGame), d0
00001248  4DF9 0051C902            372      lea     ScoresBounds, a6
0000124E                           373  
0000124E  4283                     374      clr.l   d3      ;counter
00001250  2839 0051C83A            375      move.l (BallXPosition), d4
00001256  0684 00000032            376      add.l   #(BALL_WIDTH),d4
0000125C                           377  
0000125C                           378  .ScoreLoop:
0000125C                           379  
0000125C  221E                     380      move.l (a6)+, d1
0000125E  241E                     381      move.l (a6)+, d2
00001260                           382  
00001260  B284                     383      cmp.l   d4, d1
00001262  6E00 0008                384      bgt     .NextIteration
00001266                           385  
00001266  B484                     386      cmp.l   d4, d2
00001268  6C00 000E                387      bge     .FoundScore
0000126C                           388  
0000126C                           389  
0000126C                           390  .NextIteration:
0000126C                           391  
0000126C  5283                     392      add.l   #1, d3
0000126E  5380                     393      sub.l   #1, d0
00001270  66EA                     394      bne     .ScoreLoop
00001272                           395  
00001272  4EF9 0000128A            396      jmp     .ExitLoop       
00001278                           397  
00001278                           398  .FoundScore:
00001278                           399  
00001278  4281                     400      clr.l   d1
0000127A  4DF9 0051C91A            401      lea     ScoresInGame, a6
00001280  DDC3                     402      add.l   d3, a6
00001282  1216                     403      move.b  (a6), d1
00001284  D3B9 0051C8FE            404      add.l   d1, (Score)
0000128A                           405  
0000128A                           406  .ExitLoop:
0000128A                           407      
0000128A                           408      ;set sound to play to a1
0000128A  43F9 004EBAD4            409      lea     ScoreSound, a1
00001290  4EB9 000012F0            410      jsr     PlaySound
00001296                           411      
00001296  13FC 0001 0051C8F6       412      move.b  #(TRUE), (HaveToRestart)
0000129E  4EF8 10AE                413      jmp     EndBallUpdate
000012A2                           414  
000012A2                           415  RestartGame:
000012A2                           416  
000012A2  5239 0051C8FA            417      add.b   #1, (UsedBalls)
000012A8  13FC 0000 0051C8F6       418      move.b  #(FALSE), (HaveToRestart)
000012B0  13FC 0001 0051C837       419      move.b  #(TRUE), (BallMoved)
000012B8  13FC 0000 0051C836       420      move.b  #(FALSE), (BallDropped)
000012C0                           421  
000012C0                           422      ;reset pos
000012C0  203C 000000F9            423      move.l  #(BALL_INITIAL_X_POS), d0
000012C6  E188                     424      lsl.l   #(FRACTION_BITS), d0
000012C8  23C0 0051C83E            425      move.l  d0, (BallXPositionFixed)
000012CE                           426  
000012CE  7030                     427      move.l  #(BALL_INITIAL_Y_POS), d0
000012D0  E188                     428      lsl.l   #(FRACTION_BITS), d0
000012D2  23C0 0051C846            429      move.l  d0, (BallYPositionFixed)
000012D8                           430  
000012D8                           431  
000012D8                           432      ;reset velocity
000012D8  23FC 00000000 0051C84A   433      move.l  #0, BallXVelocity
000012E2  23FC 00000000 0051C84E   434      move.l  #0, BallYVelocity
000012EC                           435  
000012EC                           436  
000012EC  4EF8 10AE                437      jmp     EndBallUpdate
000012F0                           438  
000012F0                           439  
000012F0                           440  PlaySound:
000012F0                           441  
000012F0  7049                     442      move.l  #(PLAY_SOUND_COMMAND), d0
000012F2  4E4F                     443      Trap    #15
000012F4                           444  
000012F4  4E75                     445      rts
000012F6                           446  
000012F6                           447  
000012F6                           448  SetFrameBeginTime:
000012F6                           449  
000012F6                           450      ;get current time
000012F6  7008                     451      move.l  #(GET_TIME_COMMAND), d0
000012F8  4E4F                     452      Trap    #15
000012FA                           453      ;set FrameBeginTime
000012FA  23C1 0051C822            454      move.l  d1, (FrameBeginTime)
00001300                           455  
00001300  4E75                     456      rts
00001302                           457  
00001302                           458  
00001302                           459  WaitToEndFrame:
00001302                           460  
00001302  2439 0051C822            461      move.l  (FrameBeginTime),d2
00001308                           462  
00001308                           463  .LoopAgain:
00001308                           464      ;get current time
00001308  7008                     465      move.l  #(GET_TIME_COMMAND), d0
0000130A  4E4F                     466      Trap    #15
0000130C                           467      
0000130C                           468      ;get DeltaTime in d1
0000130C  9282                     469      sub.l   d2,d1
0000130E                           470  
0000130E  B2BC 00000001            471      cmp.l   #(TIME_PER_FRAME), d1
00001314  6DF2                     472      blt     .LoopAgain
00001316                           473  
00001316  4E75                     474      rts
00001318                           475  
00001318                           476  SetSomeVars:
00001318                           477  
00001318  4EB9 00001822            478      jsr     SeedRandomNumber
0000131E  4EB9 00001326            479      jsr     RandomizeXVel
00001324                           480  
00001324  4E75                     481      rts
00001326                           482  
00001326                           483  
00001326                           484  RandomizeXVel:
00001326                           485  
00001326  4EB9 00001788            486      jsr     GetRandomXVel
0000132C  23C0 0051C84A            487      move.l  d0, (BallXVelocity)
00001332                           488  
00001332  4E75                     489      rts
00001334                           490  
00001334                           491  
00001334                           492      include "InputHandler.x68"
00001334                           493  
00001334                           494  
00001334                           495  HandleInput:  
00001334                           496  
00001334                           497      ;reset PlayerInput
00001334  23FC 00000000 0051C81E   498      move.l  #0,(PlayerInput)
0000133E                           499      ;Set the inputs    
0000133E  7013                     500      move.l  #(INPUT_COMMAND),d0
00001340                           501      ;d1: $00202527 => space, left arrow, right arrow
00001340                           502      ;move.l  $20<<$16+$25<<$8+$27,d1
00001340  7220                     503      move.l  #(SPACE_KEY),d1
00001342  E189                     504      lsl.l   #8,d1
00001344  123C 0025                505      move.b  #(LEFT_ARROW),d1
00001348  E189                     506      lsl.l   #8,d1
0000134A  123C 0027                507      move.b  #(RIGHT_ARROW),d1
0000134E                           508  
0000134E  4E4F                     509      Trap    #15
00001350                           510  
00001350                           511      ;check if ball is droped, if yes skip
00001350  0C39 0001 0051C836       512      cmpi.b  #(TRUE),(BallDropped)
00001358  6700 001A                513      beq     EndHandleInput
0000135C                           514  
0000135C                           515      ;check the pressed key and call subroutines accordingly
0000135C  0801 0010                516      btst.l  #(SPACE_KEY_LOCATION), d1       
00001360  6600 0014                517      bne     DropBallInput
00001364                           518  
00001364  0801 0008                519      btst.l  #(LEFT_ARROW_LOCATION), d1       
00001368  6600 001A                520      bne     MoveBallToLeftInput
0000136C                           521  
0000136C  0801 0000                522      btst.l  #(RIGHT_ARROW_LOCATION), d1       
00001370  6600 0026                523      bne     MoveBallToRightInput
00001374                           524  
00001374                           525  EndHandleInput:
00001374                           526  
00001374  4E75                     527      rts
00001376                           528  
00001376                           529  DropBallInput:
00001376                           530  
00001376  23FC 00000001 0051C81E   531      move.l #1,(PlayerInput)
00001380                           532  
00001380  4EF8 1374                533      jmp EndHandleInput
00001384                           534  
00001384                           535  MoveBallToLeftInput:
00001384                           536      
00001384                           537      ;if both arrows are pressed, do nothing
00001384  0801 0000                538      btst.l  #(RIGHT_ARROW_LOCATION), d1       
00001388  66EA                     539      bne     EndHandleInput
0000138A                           540  
0000138A  23FC 00000002 0051C81E   541      move.l #2,(PlayerInput)
00001394                           542  
00001394  4EF8 1374                543      jmp     EndHandleInput
00001398                           544  
00001398                           545  MoveBallToRightInput:
00001398                           546      
00001398  23FC 00000003 0051C81E   547      move.l #3,(PlayerInput)  
000013A2                           548  
000013A2  4EF8 1374                549      jmp     EndHandleInput
000013A6                           550    
000013A6                           551  -------------------- end include --------------------
000013A6                           552      include "drawingModule.X68"
000013A6                           553  ; this module contains drawing related subroutines
000013A6                           554  
000013A6                           555  DrawAllBackground:
000013A6                           556      
000013A6  41F9 0000185C            557      lea BackgroundBitmap, a0
000013AC                           558  
000013AC  4EB9 0000140E            559      jsr SetFirstDrawParams
000013B2  4EB9 00001498            560      jsr DrawPic
000013B8                           561  
000013B8  4E75                     562      rts
000013BA                           563  
000013BA                           564  DrawLoading:
000013BA                           565  
000013BA  41F9 0027787C            566      lea LoadingBitmap, a0
000013C0                           567  
000013C0  4EB9 0000140E            568      jsr SetFirstDrawParams
000013C6  4EB9 00001498            569      jsr DrawPic
000013CC                           570  
000013CC                           571  
000013CC                           572  DrawBackgroundChunk:
000013CC                           573      
000013CC  0C39 0000 0051C837       574      cmp.b #(FALSE),(BallMoved)
000013D4  6700 000E                575      beq .DontDraw
000013D8                           576      
000013D8  4EB9 00001430            577      jsr SetBgDrawParams
000013DE  4EB9 00001498            578      jsr DrawPic
000013E4                           579  
000013E4                           580  .DontDraw:
000013E4  4E75                     581      rts
000013E6                           582  
000013E6                           583  DrawBallFirstTime:
000013E6                           584  
000013E6  13FC 0001 0051C837       585      move.b  #(TRUE), (BallMoved)
000013EE                           586  
000013EE  4EF9 000013F4            587      jmp     DrawBall
000013F4                           588  
000013F4                           589  DrawBall:
000013F4                           590  
000013F4  0C39 0000 0051C837       591      cmp.b #(FALSE),(BallMoved)
000013FC  6700 000E                592      beq .DontDraw
00001400                           593  
00001400  4EB9 00001462            594      jsr SetBallDrawParams
00001406  4EB9 00001498            595      jsr DrawPic
0000140C                           596  
0000140C                           597  .DontDraw:
0000140C  4E75                     598      rts
0000140E                           599  
0000140E                           600  
0000140E                           601  SetFirstDrawParams:
0000140E                           602  
0000140E                           603      ;set draw start position to 0,0    
0000140E  223C 00000320            604      move.l  #(OUTPUT_WINDOW_HEIGHT),d1  ;y
00001414  4841                     605      swap    d1
00001416  323C 0000                606      move.w  #0,d1                       ;x
0000141A                           607      
0000141A                           608      ;set chunk start position to 0,0    
0000141A  7400                     609      move.l  #0,d2                       ;y
0000141C  4842                     610      swap    d2
0000141E  343C 0000                611      move.w  #0,d2                       ;x
00001422                           612      
00001422                           613      ;set chunk width and height to the screen resol
00001422  263C 0000042F            614      move.l  #(OUTPUT_WINDOW_WIDTH),d3
00001428  4843                     615      swap    d3
0000142A  363C 0320                616      move.w  #(OUTPUT_WINDOW_HEIGHT),d3
0000142E                           617      
0000142E  4E75                     618      rts
00001430                           619  
00001430                           620  SetBgDrawParams:
00001430                           621  
00001430  41F9 0000185C            622      lea BackgroundBitmap, a0
00001436                           623  
00001436                           624      ;set draw start position   
00001436  2239 0051C842            625      move.l  (BallYPosition),d1           
0000143C  0681 00000032            626      add.l   #(BALL_HEIGHT),d1               ;y
00001442  4841                     627      swap    d1
00001444  D2B9 0051C83A            628      add.l   (BallXPosition),d1              ;x
0000144A                           629      ;sub.l   #(BALL_OFFSET),d1
0000144A                           630      
0000144A                           631      ;set chunk start position
0000144A  2439 0051C842            632      move.l  (BallYPosition),d2              ;y          
00001450  4842                     633      swap    d2
00001452  D4B9 0051C83A            634      add.l  (BallXPosition),d2              ;x
00001458                           635      
00001458                           636      ;set chunk width and height
00001458  7632                     637      move.l  #(BALL_WIDTH),d3                ;add offset maybe
0000145A  4843                     638      swap    d3
0000145C  363C 0032                639      move.w  #(BALL_HEIGHT),d3               ;add offset maybe
00001460                           640      
00001460  4E75                     641      rts
00001462                           642  
00001462                           643  SetBallDrawParams:
00001462                           644  
00001462  41F9 00275A94            645      lea BallBitmap, a0
00001468                           646  
00001468                           647      ;set draw start position   
00001468  7232                     648      move.l  #(BALL_HEIGHT),d1
0000146A  2E39 0051C846            649      move.l  (BallYPositionFixed),d7
00001470  E08F                     650      lsr.l   #(FRACTION_BITS),d7
00001472  D287                     651      add.l   d7,d1
00001474                           652      ;update the y position
00001474  23C7 0051C842            653      move.l  d7, (BallYPosition)
0000147A                           654            
0000147A  4841                     655      swap    d1
0000147C                           656  
0000147C  2E39 0051C83E            657      move.l  (BallXPositionFixed),d7
00001482  E08F                     658      lsr.l   #(FRACTION_BITS),d7
00001484  3207                     659      move.w  d7, d1
00001486                           660      ;update the x position
00001486  23C7 0051C83A            661      move.l  d7, (BallXPosition)
0000148C                           662  
0000148C                           663      
0000148C                           664      ;set chunk start position
0000148C  7400                     665      move.l  #0,d2 
0000148E                           666      
0000148E                           667      ;set chunk width and height
0000148E  7632                     668      move.l  #(BALL_WIDTH),d3
00001490  4843                     669      swap    d3
00001492  363C 0032                670      move.w  #(BALL_HEIGHT),d3
00001496                           671      
00001496  4E75                     672      rts
00001498                           673  
00001498                           674       
00001498                           675  DrawPic:
00001498                           676      ;push the first pixel pos
00001498  2C48                     677      move.l  a0, a6
0000149A  4EB9 00001588            678      jsr GetFirstPixelAddress
000014A0  2F0E                     679      move.l  a6, -(sp)                               
000014A2                           680      
000014A2                           681      ;push image width
000014A2  2C48                     682      move.l  a0, a6
000014A4  4EB9 000015A0            683      jsr GetImageWidth
000014AA  2F00                     684      move.l  d0,-(sp)
000014AC                           685      
000014AC                           686      ;push image height
000014AC  2C48                     687      move.l  a0, a6
000014AE  4EB9 000015B0            688      jsr GetImageHeight
000014B4  2F00                     689      move.l  d0,-(sp)
000014B6                           690  
000014B6                           691      ;push the draw start pos
000014B6  4284                     692      clr.l   d4
000014B8  3801                     693      move.w  d1, d4
000014BA  2F04                     694      move.l  d4,-(sp)    ;push x
000014BC  4841                     695      swap    d1
000014BE  3801                     696      move.w  d1,d4
000014C0  2F04                     697      move.l  d4,-(sp)    ;push y
000014C2                           698      
000014C2                           699      ;push the chunk start pos
000014C2  3802                     700      move.w  d2,d4
000014C4  2F04                     701      move.l  d4,-(sp)    ;push x
000014C6                           702      ;convert the y pos of chunk to bitmap coor
000014C6  4842                     703      swap    d2
000014C8  3802                     704      move.w  d2,d4
000014CA  D843                     705      add.w   d3,d4           ;add chunk height
000014CC                           706      ;d0 have the image height
000014CC  2200                     707      move.l  d0,d1 
000014CE  9284                     708      sub.l   d4,d1
000014D0  2F01                     709      move.l  d1, -(sp)   ;push y
000014D2                           710      
000014D2                           711      ;push the chunk dimensions
000014D2  4843                     712      swap    d3
000014D4  3803                     713      move.w  d3, d4  
000014D6  2F04                     714      move.l  d4,-(sp)    ;push width
000014D8  4843                     715      swap    d3
000014DA  3803                     716      move.w  d3, d4
000014DC  2F04                     717      move.l  d4,-(sp)    ;push height
000014DE                           718   
000014DE  4EB9 000014EC            719      jsr DrawAChunk
000014E4                           720      
000014E4                           721      ;reinit the stack pointer
000014E4  DFFC 00000028            722      add.l   #(STACK_OFFSET_WHEN_DRAWING),sp
000014EA  4E75                     723      rts                
000014EC                           724      
000014EC                           725  DrawAChunk:
000014EC                           726      
000014EC  2E2F 0020                727      move.l  IMAGE_WIDTH_STACK_OFFSET(sp),d7                 ;get the image width into d7
000014F0  0287 00000003            728      andi.l  #3,d7                                           ;get the rest of division by 4, which is the padding     
000014F6                           729      
000014F6  286F 0024                730      move.l  FIRST_PIXEL_ADDRESS_STACK_OFFSET(sp),a4         ;a4 points to the first pixel
000014FA                           731      
000014FA  222F 0020                732      move.l  IMAGE_WIDTH_STACK_OFFSET(sp),d1                 ;image width into d1
000014FE  2401                     733      move.l  d1, d2                                          ;temp value to avoid mul
00001500  D282                     734      add.l   d2, d1
00001502  D282                     735      add.l   d2, d1                                          ;get the width number of bytes
00001504  DE81                     736      add.l   d1,d7                                           ;width bytes
00001506                           737      
00001506  2407                     738      move.l  d7, d2                                          ;store width bytes into d2
00001508                           739      
00001508  222F 000C                740      move.l  CHUNK_Y_POS_STACK_OFFSET(sp),d1                 ;get the chunk y pos
0000150C  C4C1                     741      mulu.w  d1,d2                                           ;mutiply the y with the width bytes to get the y bytes offset
0000150E                           742      
0000150E  202F 0010                743      move.l  CHUNK_X_POS_STACK_OFFSET(sp),d0                 ;put chunk x start pos into d0
00001512  2200                     744      move.l  d0, d1                                          ;temp value to avoid mul
00001514  D081                     745      add.l   d1, d0
00001516  D081                     746      add.l   d1, d0                                          ;get the x number of bytes
00001518                           747      
00001518  D480                     748      add.l   d0,d2                                           ;add the x bytes to the y bytes offset to have the total offset
0000151A                           749      
0000151A  D9C2                     750      add.l   d2, a4                                          ;add the offset to get the new first position
0000151C                           751      
0000151C  7A00                     752      move.l  #0, d5                                          ;x counter
0000151E  7C00                     753      move.l  #0, d6                                          ;y counter
00001520                           754      
00001520                           755      
00001520                           756  DrawColumn:
00001520                           757      ;set pen color
00001520  4281                     758      clr.l d1
00001522  121C                     759      move.b   (a4)+,d1                                       ;set blue
00001524  E189                     760      lsl.l   #8,d1                                           ;shift the byte to the left
00001526  121C                     761      move.b  (a4)+,d1                                        ;set green
00001528  E189                     762      lsl.l   #8,d1                                           ;shift the byte to the left
0000152A  121C                     763      move.b  (a4)+,d1                                        ;set red    => d1 has 00BBGGRR
0000152C                           764      
0000152C                           765      ;if green, skip that pixel
0000152C  B2BC 0000FF00            766      cmp.l   #(GREEN),d1
00001532  6700 0018                767      beq     NextPixel
00001536                           768      
00001536  7050                     769      move.l  #SET_PEN_COLOR_COMMAND, d0
00001538  4E4F                     770      Trap #15
0000153A                           771      
0000153A                           772      ;draw a pixel
0000153A                           773      ;set x in d1 and y in d2
0000153A  4281                     774      clr.l   d1
0000153C  222F 0018                775      move.l  DRAW_X_POS_STACK_OFFSET(sp),d1                                               
00001540  D285                     776      add.l   d5,d1                                           ;set x position on screen
00001542                           777      
00001542  242F 0014                778      move.l  DRAW_Y_POS_STACK_OFFSET(sp),d2
00001546  9486                     779      sub.l   d6,d2                                           ;set the y position on screen
00001548                           780      
00001548  7052                     781      move.l  #DRAW_A_PIXEL_COMMAND, d0
0000154A  4E4F                     782      Trap #15
0000154C                           783  
0000154C                           784  NextPixel:    
0000154C  5285                     785      addi.l  #1, d5                                          ;increment x counter
0000154E  202F 0008                786      move.l  CHUNK_WIDTH_STACK_OFFSET(sp),d0
00001552  BA80                     787      cmp.l  d0,d5
00001554  66CA                     788      bne DrawColumn                                          ;if not done with the column, continue drawing
00001556                           789      
00001556  5286                     790      addi.l  #1, d6                                          ;increment y counter
00001558  202F 0004                791      move.l  CHUNK_HEIGHT_STACK_OFFSET(sp),d0
0000155C  BC80                     792      cmp.l   d0,d6
0000155E  6700 0018                793      beq     DrawEnd                                         ;if done with the rows, then stop drawing
00001562                           794      
00001562  7A00                     795      move.l  #0, d5                                          ;reset x counter
00001564  222F 0008                796      move.l  CHUNK_WIDTH_STACK_OFFSET(sp),d1                 ;put chunk width in d1
00001568  2001                     797      move.l  d1, d0                                          ;d0 has the temp to avoid mul
0000156A  D280                     798      add.l   d0, d1
0000156C  D280                     799      add.l   d0, d1                                          ;multiply it by 3 to get the bytes number
0000156E                           800      
0000156E  2007                     801      move.l  d7, d0                                          ;d0 = width bytes
00001570  9081                     802      sub.l   d1,d0                                           ;sub the chunk bytes from the width bytes
00001572  D9C0                     803      add.l   d0, a4                                          ;and then add it to a4 to get the next pixel
00001574                           804      
00001574  4EF8 1520                805      jmp DrawColumn                                          ;draw next column
00001578                           806  
00001578                           807  DrawEnd:
00001578                           808  
00001578  4E75                     809      rts
0000157A                           810  
0000157A                           811  
0000157A                           812  EnableDoubleBuffer:
0000157A                           813      ;double buffering mode enabled
0000157A  705C                     814      move.l  #SET_DRAWING_MODE_COMMAND, d0
0000157C  7211                     815      move.l  #DOUBLE_BUFFERING_MODE, d1
0000157E  4E4F                     816      Trap    #15
00001580                           817  
00001580  4E75                     818      rts
00001582                           819  
00001582                           820  PaintScreenBuffer:
00001582                           821      ;repaint screen from buffer
00001582  705E                     822      move.l  #REPAINT_SCREEN_COMMAND, d0
00001584  4E4F                     823      Trap    #15
00001586                           824          
00001586  4E75                     825      rts    
00001588                           826  
00001588                           827  ;param a6:image address
00001588                           828  GetFirstPixelAddress:
00001588  DDFC 0000000A            829      add.l   #(OFFSET_TO_PIXEL_ARRAY),a6                     ;a6 has the pixel offset address
0000158E  2016                     830      move.l  (a6),d0                                         ;put it in d0
00001590  4EB9 000015C0            831      jsr SwapBytes                                           ;swap to get the right value
00001596  DDC0                     832      add.l   d0,a6                                           ;a6 has the 0, h-1 pixel address
00001598  9DFC 0000000A            833      sub.l   #(OFFSET_TO_PIXEL_ARRAY),a6
0000159E                           834      
0000159E  4E75                     835      rts
000015A0                           836  
000015A0                           837  ;param a6:imaage address, return d0: image width
000015A0                           838  
000015A0                           839  GetImageWidth:
000015A0  DDFC 00000012            840      add.l   #(OFFSET_IMAGE_WIDTH),a6                        ;a6 has the image width address
000015A6  2016                     841      move.l  (a6),d0                                         ;put it in d0
000015A8  4EB9 000015C0            842      jsr SwapBytes                                           ;swap to get the right value
000015AE                           843      
000015AE  4E75                     844      rts
000015B0                           845  
000015B0                           846  ;param a6:imaage address, return d0: image height
000015B0                           847  GetImageHeight:
000015B0  DDFC 00000016            848      add.l   #(OFFSET_IMAGE_HEIGHT),a6                       ;a6 has the image width address
000015B6  2016                     849      move.l  (a6),d0                                         ;put it in d0
000015B8  4EB9 000015C0            850      jsr SwapBytes                                           ;swap to get the right value
000015BE                           851  
000015BE  4E75                     852      rts
000015C0                           853  
000015C0                           854  
000015C0                           855  SwapBytes:
000015C0                           856      ;DDCCBBAA
000015C0  E158                     857      rol.w   #8,d0   ;DDCCAABB
000015C2  4840                     858      swap.w    d0    ;AABBDDCC
000015C4  E158                     859      rol.w   #8,d0   ;AABBCCDD
000015C6                           860      
000015C6  4E75                     861      rts
000015C8                           862  
000015C8                           863  
000015C8                           864          
000015C8                           865  
000015C8                           866  
000015C8                           867  
000015C8                           868  
000015C8                           869  
000015C8                           870  
000015C8                           871  
000015C8                           872  
000015C8                           873  
000015C8                           874  
000015C8                           875  -------------------- end include --------------------
000015C8                           876      include "CollisionModule.x68"
000015C8                           877  ;Collision related logic
000015C8                           878  
000015C8                           879  CheckWallCollision:
000015C8                           880  
000015C8                           881      ;check if in bounds
000015C8  0CB9 000000F9 0051C83A   882      cmp.l   #(TOP_LEFT_BOARD_X_POS), (BallXPosition)
000015D2  6F00 0018                883      ble     .Collided
000015D6                           884  
000015D6  0CB9 0000030A 0051C83A   885      cmp.l   #(BOTTOM_RIGHT_BOARD_X_POS-BALL_WIDTH), (BallXPosition)
000015E0  6C00 000A                886      bge     .Collided
000015E4                           887  
000015E4  7000                     888      move.l  #(FALSE),d0
000015E6                           889  
000015E6  4EF9 000015EE            890      jmp .EndCheck
000015EC                           891  
000015EC                           892  .Collided:
000015EC                           893  
000015EC  7001                     894      move.l  #(TRUE), d0
000015EE                           895  
000015EE                           896  .EndCheck:
000015EE                           897  
000015EE  4E75                     898      rts
000015F0                           899  
000015F0                           900  
000015F0                           901  CheckPegCollision:
000015F0                           902      
000015F0                           903      ;movem.l    ALL_REG, -(sp)
000015F0                           904      ;set params
000015F0  2039 0051C83A            905      move.l  (BallXPosition), d0
000015F6  0680 00000019            906      add.l   #(BALL_RADIUS), d0  ;shift to center
000015FC  2239 0051C842            907      move.l  (BallYPosition), d1
00001602  0681 00000019            908      add.l   #(BALL_RADIUS), d1  ;shift to center
00001608                           909  
00001608  242F 0008                910      move.l  CURRENT_PEG_X_STACK_OFFSET(sp),d2
0000160C  262F 0004                911      move.l  CURRENT_PEG_Y_STACK_OFFSET(sp),d3
00001610                           912  
00001610                           913      ;check if we even should do collision check
00001610                           914      ;dy is first
00001610  B681                     915      cmp.l   d1,d3 
00001612  6C00 000C                916      bge     .SubBallYPegY ; if peg y bigger
00001616                           917      
00001616  9283                     918      sub.l   d3,d1
00001618  2A01                     919      move.l  d1,d5               ;dy
0000161A  4EF9 00001624            920      jmp     .CheckDy
00001620                           921  
00001620                           922  .SubBallYPegY:
00001620                           923  
00001620  9681                     924      sub.l   d1,d3
00001622  2A03                     925      move.l  d3, d5              ;dy
00001624                           926  
00001624                           927  .CheckDy:
00001624                           928  
00001624  BABC 0000002A            929      cmp.l   #(MIN_DY_TO_CHECK_COLLISION), d5
0000162A  6E00 0062                930      bgt     .DidntCollide
0000162E                           931  
0000162E                           932      ;dx is second
0000162E  B480                     933      cmp.l   d0,d2 
00001630  6C00 000C                934      bge     .SubBallXPegX ; if peg x bigger
00001634                           935      
00001634  9082                     936      sub.l   d2,d0
00001636  2800                     937      move.l  d0,d4               ;dx
00001638  4EF9 00001642            938      jmp     .CheckDx
0000163E                           939  
0000163E                           940  .SubBallXPegX:
0000163E                           941  
0000163E  9480                     942      sub.l   d0,d2
00001640  2802                     943      move.l  d2, d4              ;dx
00001642                           944  
00001642                           945  .CheckDx:
00001642                           946  
00001642  B8BC 0000002A            947      cmp.l   #(MIN_DX_TO_CHECK_COLLISION), d4
00001648  6E00 0044                948      bgt     .DidntCollide
0000164C                           949  
0000164C                           950      ;store the closest peg coor
0000164C  23EF 0008 0051C8E2       951      move.l  CURRENT_PEG_X_STACK_OFFSET(sp),(ClosestPegX)
00001654  23EF 0004 0051C8E6       952      move.l  CURRENT_PEG_Y_STACK_OFFSET(sp),(ClosestPegY)
0000165C                           953  
0000165C                           954      ;if we're here. we check for collision
0000165C  2004                     955      move.l  d4,d0   ;dx
0000165E  C0C4                     956      mulu.w  d4,d0   ;d0 = dx^2
00001660  2205                     957      move.l  d5,d1   ;dy
00001662  C2C5                     958      mulu.w  d5,d1   ;d1 = dy^2
00001664                           959  
00001664  D280                     960      add.l   d0, d1  ;d1 = dx^2 + dy^2
00001666  E589                     961      lsl.l   #2, d1  
00001668  4DF9 004EBADE            962      lea     (Sqrts), a6
0000166E  DDC1                     963      add.l   d1, a6
00001670  2016                     964      move.l  (a6), d0
00001672                           965      ;move.l (a6, d1), d0    ;d0 = sqrt(dx^2 + dy^2) with no byte swap
00001672                           966      
00001672  4EB8 15C0                967      jsr     SwapBytes       ;d0 bytes are swapped, so it has the correct sqrt
00001676                           968  
00001676  E088                     969      lsr.l   #(FRACTION_BITS),d0
00001678                           970  
00001678                           971      ;combine radiuses
00001678  7219                     972      move.l  #(BALL_RADIUS), d1
0000167A  0681 00000011            973      add.l   #(PEG_RADIUS), d1
00001680                           974  
00001680  B081                     975      cmp.l   d1, d0
00001682  6E00 000A                976      bgt     .DidntCollide
00001686                           977  
00001686  7001                     978      move.l  #(TRUE), d0
00001688                           979  
00001688  4EF9 00001690            980      jmp     .CheckEnd
0000168E                           981  
0000168E                           982  
0000168E                           983  .DidntCollide:
0000168E                           984  
0000168E  7000                     985      move.l  #(FALSE), d0
00001690                           986  
00001690                           987  .CheckEnd:
00001690                           988      ;movem.l    (sp)+, ALL_REG
00001690                           989  
00001690  4E75                     990      rts
00001692                           991  
00001692                           992  
00001692                           993  BounceBallOffWall:
00001692                           994      
00001692                           995  
00001692  2039 0051C84A            996      move.l  (BallXVelocity), d0
00001698                           997      ;muls.w     #(HALF), d0     
00001698                           998      ;asr.l   #(FRACTION_BITS),d0        ;soften collision
00001698                           999  
00001698  4480                    1000      neg.l   d0
0000169A  23C0 0051C84A           1001      move.l  d0, (BallXVelocity)
000016A0                          1002  
000016A0  4E75                    1003      rts
000016A2                          1004  
000016A2                          1005  
000016A2                          1006  
000016A2                          1007  BounceBallOffPeg:
000016A2                          1008  
000016A2                          1009      ;set tangent vect
000016A2  2039 0051C8E6           1010      move.l  (ClosestPegY),d0
000016A8  90B9 0051C842           1011      sub.l   (BallYPosition), d0     
000016AE  0680 00000019           1012      add.l   #(BALL_RADIUS), d0      ;d0 = tgX = Ypeg - Yball
000016B4  2239 0051C83A           1013      move.l  (BallXPosition), d1
000016BA  0681 00000019           1014      add.l   #(BALL_RADIUS), d1      
000016C0  92B9 0051C8E2           1015      sub.l   (ClosestPegX), d1       ;d1 = tgY = Xball - Xpeg
000016C6                          1016  
000016C6                          1017  
000016C6                          1018      ;get vect length
000016C6  2C00                    1019      move.l  d0, d6
000016C8  2E01                    1020      move.l  d1, d7
000016CA                          1021  
000016CA  CDC0                    1022      muls.w  d0, d6                  ;d6 = tgX ^ 2
000016CC  CFC1                    1023      muls.w  d1, d7                  ;d7 = tgY ^ 2
000016CE                          1024  
000016CE  DE86                    1025      add.l   d6, d7                  ;d7 = tgX ^ 2 + tgY ^ 2
000016D0                          1026  
000016D0  E58F                    1027      lsl.l   #2, d7  
000016D2  4DF9 004EBADE           1028      lea     (Sqrts), a6
000016D8                          1029  
000016D8  DDC7                    1030      add.l   d7, a6
000016DA  2416                    1031      move.l  (a6), d2
000016DC                          1032      ;move.l (a6, d7), d2            ;d2 = TgMag = sqrt(tgX ^ 2 + tgY ^ 2) with no byte swap
000016DC                          1033  
000016DC  2E00                    1034      move.l  d0, d7                  ;store tgX
000016DE  2002                    1035      move.l  d2, d0
000016E0                          1036      
000016E0  4EB8 15C0               1037      jsr     SwapBytes               
000016E4  E088                    1038      lsr.l   #(FRACTION_BITS),d0
000016E6                          1039  
000016E6  2400                    1040      move.l  d0, d2                  ;d2 bytes are swapped, so it has the correct sqrt
000016E8  2007                    1041      move.l  d7, d0                  ;restore d0
000016EA                          1042  
000016EA  B4BC 00000000           1043      cmp.l   #0, d2
000016F0  6600 0004               1044      bne     .NotZeroSqrt
000016F4                          1045  
000016F4                          1046      ; to avoid div by 0
000016F4  7401                    1047      move.l  #1, d2
000016F6                          1048  
000016F6                          1049  
000016F6                          1050  .NotZeroSqrt:   
000016F6                          1051  
000016F6                          1052      ;get normalized tangent
000016F6  81C2                    1053      divs.w  d2, d0                  ;Xtg
000016F8  4840                    1054      swap    d0
000016FA  4240                    1055      clr.w   d0
000016FC  4840                    1056      swap    d0
000016FE  83C2                    1057      divs.w  d2, d1                  ;Ytg
00001700  4841                    1058      swap    d1
00001702  4241                    1059      clr.w   d1
00001704  4841                    1060      swap    d1
00001706                          1061  
00001706                          1062  
00001706                          1063      ;get length by calculating the dot product
00001706                          1064      ;copy x and y
00001706  2400                    1065      move.l  d0, d2                  ;Xtg
00001708  2601                    1066      move.l  d1, d3                  ;Ytg
0000170A                          1067  
0000170A                          1068      ;get velocity
0000170A  2C39 0051C84A           1069      move.l  (BallXVelocity), d6
00001710  2E39 0051C84E           1070      move.l  (BallYVelocity), d7
00001716                          1071      ; dot product
00001716  C5C6                    1072      muls.w  d6, d2                  
00001718  C7C7                    1073      muls.w  d7, d3
0000171A                          1074  
0000171A  E082                    1075      asr.l   #(FRACTION_BITS),d2
0000171C  E083                    1076      asr.l   #(FRACTION_BITS),d3
0000171E                          1077  
0000171E                          1078  
0000171E  D682                    1079      add.l   d2, d3                  
00001720  2803                    1080      move.l  d3, d4                  ;d4 = length
00001722                          1081  
00001722                          1082      ;get the velocity comp parallel to the tg
00001722                          1083      ;copy x and y of tg
00001722  2400                    1084      move.l  d0, d2                  ;Xtg
00001724  2601                    1085      move.l  d1, d3                  ;Ytg
00001726                          1086  
00001726  C5C4                    1087      muls.w  d4, d2                  ;d2 = Xparal = length * Xtg
00001728  C7C4                    1088      muls.w  d4, d3                  ;d3 = Yparal = length * Ytg
0000172A                          1089  
0000172A                          1090      ;get velocity
0000172A  2039 0051C84A           1091      move.l  (BallXVelocity), d0     ;Xvel
00001730  2239 0051C84E           1092      move.l  (BallYVelocity), d1     ;Yvel
00001736                          1093  
00001736                          1094      ;get the velocity comp perpendicular to the tg
00001736  9082                    1095      sub.l   d2, d0                  ;d0 = Xper = Xvel - Xparal
00001738  9283                    1096      sub.l   d3, d1                  ;d1 = Yper = Yvel - Yparal
0000173A                          1097  
0000173A                          1098      ;get the new velocity
0000173A  E580                    1099      asl.l   #2, d0  
0000173C  E581                    1100      asl.l   #2, d1
0000173E                          1101  
0000173E  2439 0051C84A           1102      move.l  (BallXVelocity), d2     ;Xvel
00001744  2639 0051C84E           1103      move.l  (BallYVelocity), d3     ;Yvel
0000174A                          1104          
0000174A  9480                    1105      sub.l   d0, d2                  ;d2 = NewXvel = Xvel - 2 * Xper
0000174C  9681                    1106      sub.l   d1, d3                  ;d3 = NewYvel = Yvel - 2 * Yper
0000174E                          1107  
0000174E  C7FC 0020               1108      muls.w  #(Y_VELOCITY_SOFTNER), d3
00001752  E083                    1109      asr.l   #(FRACTION_BITS),d3         ;soften y velocity
00001754                          1110  
00001754                          1111      ;get the abs to test on it
00001754  2202                    1112      move.l  d2, d1
00001756                          1113  
00001756  4EB9 00001830           1114      jsr     GetAbsoluteValue            ;abs will be in d0
0000175C                          1115  
0000175C  B0BC 00000070           1116      cmp.l   #(MIN_RAND_X_VEL_ALLOWED),d0        
00001762  6D00 000E               1117      blt     .NoXSoftening
00001766                          1118  
00001766  C5FC 0055               1119      muls.w  #(X_VELOCITY_SOFTNER), d2   ;soften x velocity
0000176A  E082                    1120      asr.l   #(FRACTION_BITS),d2 
0000176C                          1121  
0000176C  4EF9 0000177A           1122      jmp     .NoRandVelX
00001772                          1123  
00001772                          1124  
00001772                          1125  .NoXSoftening:
00001772                          1126  
00001772  4EB9 00001788           1127      jsr     GetRandomXVel
00001778                          1128  
00001778  2400                    1129      move.l  d0, d2
0000177A                          1130  
0000177A                          1131  
0000177A                          1132  .NoRandVelX:
0000177A                          1133      ;update the velocity
0000177A  23C2 0051C84A           1134      move.l  d2, (BallXVelocity)
00001780  23C3 0051C84E           1135      move.l  d3, (BallYVelocity)
00001786                          1136  
00001786                          1137  
00001786  4E75                    1138      rts 
00001788                          1139  
00001788                          1140  
00001788                          1141  GetRandomXVel:
00001788                          1142                              
00001788  48E7 4000               1143      movem.l d1,-(sp)
0000178C                          1144  
0000178C  4EB9 000017F4           1145      jsr GetRandomNumber
00001792                          1146  
00001792  C0BC 00000079           1147      and.l   #(MAX_RAND_X_VELOCITY), d0
00001798  0680 00000070           1148      add.l   #(MIN_RAND_X_VELOCITY), d0  ;between min and max
0000179E                          1149  
0000179E                          1150      ;on first drop
0000179E  0CB9 00000000 0051C836  1151      cmp.l   #(FALSE), (BallDropped)
000017A8  6700 0020               1152      beq     .RandFirstXVel
000017AC                          1153  
000017AC                          1154      ;decide if negative or positive based on the ball x position compared to peg
000017AC  2239 0051C83A           1155      move.l  (BallXPosition), d1
000017B2  92B9 0051C8E2           1156      sub.l   (ClosestPegX), d1
000017B8                          1157  
000017B8  B2BC 00000000           1158      cmp.l   #0, d1
000017BE  6C00 002E               1159      bge     .EndRand
000017C2                          1160      ;go right else go left
000017C2                          1161  
000017C2  4480                    1162      neg.l   d0
000017C4                          1163  
000017C4  4EF9 000017EE           1164      jmp     .EndRand
000017CA                          1165  
000017CA                          1166  .RandFirstXVel:
000017CA  2200                    1167      move.l  d0, d1          ;store rand
000017CC                          1168  
000017CC  4EB9 000017F4           1169      jsr GetRandomNumber     ; get new rand
000017D2                          1170  
000017D2  C0BC 00000001           1171      and.l   #1, d0
000017D8                          1172  
000017D8  B0BC 00000000           1173      cmp.l   #0, d0
000017DE  6600 000A               1174      bne     .MakeVelNegative    
000017E2                          1175      ;go right
000017E2  2001                    1176      move.l  d1, d0          ;restore pos rand
000017E4                          1177  
000017E4  4EF9 000017EE           1178      jmp     .EndRand
000017EA                          1179  
000017EA                          1180  .MakeVelNegative:           ;go left
000017EA                          1181  
000017EA  4481                    1182      neg.l   d1
000017EC  2001                    1183      move.l  d1, d0          ;restore neg rand
000017EE                          1184  
000017EE                          1185  .EndRand:
000017EE                          1186  
000017EE  4CDF 0002               1187      movem.l (sp)+,d1
000017F2                          1188  
000017F2  4E75                    1189      rts
000017F4                          1190  
000017F4                          1191  
000017F4                          1192  
000017F4                          1193  
000017F4                          1194  
000017F4                          1195  
000017F4                          1196  
000017F4                          1197  -------------------- end include --------------------
000017F4                          1198      include "RandomNumberGenerator.x68"
000017F4                          1199  ;GET RANDOM NUmBER
000017F4                          1200  
000017F4                          1201  GetRandomNumber:
000017F4  48E7 4000               1202      movem.l d1,-(sp)
000017F8  48E7 2000               1203      movem.l d2,-(sp)
000017FC                          1204      
000017FC  2039 0051C8F2           1205      move.l  Rand,d0
00001802  72AF                    1206      moveq   #$AF-$100,d1
00001804  7412                    1207      moveq   #18,d2
00001806                          1208  .Ninc0  
00001806  D080                    1209      add.l   d0,d0
00001808  6400 0004               1210      bcc .Ninc1
0000180C  B300                    1211      eor.b   d1,d0
0000180E                          1212  .Ninc1
0000180E  51CA FFF6               1213      dbf d2,.Ninc0
00001812                          1214      
00001812  23C0 0051C8F2           1215      move.l  d0,Rand
00001818                          1216      
00001818  4CDF 0004               1217      movem.l (sp)+,d2
0000181C  4CDF 0002               1218      movem.l (sp)+,d1
00001820                          1219      
00001820  4E75                    1220      rts
00001822                          1221  
00001822                          1222  SeedRandomNumber:
00001822                          1223      
00001822  103C 0008               1224      move.b  #GET_TIME_COMMAND,d0
00001826  4E4F                    1225      TRAP    #15
00001828                          1226  
00001828  23C1 0051C8F2           1227      move.l  d1,Rand
0000182E                          1228  
0000182E  4E75                    1229      rts
0000182E  4E75                    1230  -------------------- end include --------------------
00001830                          1231      include "Math.x68"
00001830                          1232  ;math
00001830                          1233  
00001830                          1234  ;param:d1, returns d0 as the abs
00001830                          1235  GetAbsoluteValue:
00001830                          1236  
00001830  48E7 4000               1237      movem.l d1,-(sp)
00001834  48E7 0200               1238      movem.l d6,-(sp)
00001838  48E7 0100               1239      movem.l d7,-(sp)
0000183C                          1240  
0000183C                          1241  
0000183C  2C01                    1242      move.l  d1, d6      ;y = x
0000183E  E086                    1243      asr.l   #8,d6   
00001840  E086                    1244      asr.l   #8,d6   
00001842  E086                    1245      asr.l   #8,d6   
00001844  EE86                    1246      asr.l   #7,d6       ;y >>> 31
00001846                          1247  
00001846  2E06                    1248      move.l  d6, d7      ;store y
00001848  B386                    1249      eor.l   d1, d6      ;x xor y
0000184A                          1250  
0000184A  9C87                    1251      sub.l   d7, d6      ;(x xor y) - y
0000184C                          1252  
0000184C  2006                    1253      move.l  d6, d0
0000184E                          1254  
0000184E  4CDF 0080               1255      movem.l (sp)+,d7
00001852  4CDF 0040               1256      movem.l (sp)+,d6
00001856  4CDF 0002               1257      movem.l (sp)+,d1
0000185A                          1258  
0000185A                          1259  
0000185A  4E75                    1260      rts
0000185A  4E75                    1261  -------------------- end include --------------------
0000185C                          1262  
0000185C                          1263  
0000185C                          1264  
0000185C                          1265  ;bitmaps
0000185C                          1266  BackgroundBitmap    INCBIN "bg.bmp"
00275A94                          1267  BallBitmap          INCBIN "ironBall.bmp"
0027787C                          1268  LoadingBitmap       INCBIN "loading.bmp"
004EBAB4                          1269  
004EBAB4                          1270  ;Sounds 
004EBAB4= 43 6F 6C 6C 69 73 ...   1271  CollisionSound      dc.b    'Collision.wav', 0
004EBAC2= 57 61 6C 6C 43 6F ...   1272  WallCollisionSound  dc.b    'WallCollision.wav', 0
004EBAD4= 53 63 6F 72 65 2E ...   1273  ScoreSound          dc.b    'Score.wav', 0
004EBADE                          1274  
004EBADE                          1275  ;sqrts
004EBADE                          1276  Sqrts               INCBIN  "Sqrts.bin" 
0051C81E                          1277  
0051C81E                          1278  ;input
0051C81E= 00000000                1279  PlayerInput         dc.l    0 ;nothing
0051C822                          1280  
0051C822                          1281  ;frame rate
0051C822= 00000000                1282  FrameBeginTime      dc.l    0
0051C826                          1283  
0051C826                          1284  ;ball variables
0051C826= 000010AE 000010B0 ...   1285  BallCalls           dc.l    EndBallUpdate, DropBall, MoveBallToLeft, MoveBallToRight
0051C836= 00                      1286  BallDropped         dc.b    (FALSE)
0051C837= 00                      1287  BallMoved           dc.b    (FALSE)
0051C838= 00                      1288  BallJustPegCol      dc.b    (FALSE)
0051C839= 00                      1289  BallJustWallCol     dc.b    (FALSE)
0051C83A= 000000F9                1290  BallXPosition       dc.l    (BALL_INITIAL_X_POS)     
0051C83E= 0000F900                1291  BallXPositionFixed  dc.l    (BALL_INITIAL_X_POS<<FRACTION_BITS)
0051C842= 00000030                1292  BallYPosition       dc.l    (BALL_INITIAL_Y_POS)     
0051C846= 00003000                1293  BallYPositionFixed  dc.l    (BALL_INITIAL_Y_POS<<FRACTION_BITS)
0051C84A= 00000000                1294  BallXVelocity       dc.l    (BALL_INIT_X_VELOCITY)
0051C84E= 00000000                1295  BallYVelocity       dc.l    (BALL_INIT_Y_VELOCITY)
0051C852                          1296  
0051C852= 0000018A 00000221 ...   1297  PegsXs              dc.l    394, 545, 696           
0051C85E= 00000154 000001D9 ...   1298                      dc.l    340, 473, 616, 742
0051C86E= 0000018A 00000221 ...   1299                      dc.l    394, 545, 696           
0051C87A= 00000154 000001D9 ...   1300                      dc.l    340, 473, 616, 742
0051C88A= 00000176 000001EA ...   1301                      dc.l    374, 490, 606, 708          ; for the lower part of the board
0051C89A                          1302  
0051C89A                          1303  
0051C89A= 000000A7 000000A7 ...   1304  PegsYs              dc.l    167, 167, 167
0051C8A6= 00000129 00000129 ...   1305                      dc.l    297, 297, 297, 297
0051C8B6= 000001AE 000001AE ...   1306                      dc.l    430, 430, 430
0051C8C2= 00000234 00000234 ...   1307                      dc.l    564, 564, 564, 564
0051C8D2= 000002BA 000002BA ...   1308                      dc.l    698, 698, 698, 698          ; for the lower part of the board           
0051C8E2                          1309  
0051C8E2= 00000000                1310  ClosestPegX         dc.l    0
0051C8E6= 00000000                1311  ClosestPegY         dc.l    0
0051C8EA= 00000012                1312  NumberOfPegs        dc.l    (PegsYs-PegsXs)>>2
0051C8EE= 00000000                1313  LoopCounter         dc.l    0
0051C8F2                          1314  
0051C8F2                          1315  Rand                ds.l    1
0051C8F6                          1316  
0051C8F6= 00000000                1317  HaveToRestart       dc.l    (FALSE)
0051C8FA                          1318  
0051C8FA= 00000000                1319  UsedBalls           dc.l    0
0051C8FE                          1320  
0051C8FE= 00000000                1321  Score               dc.l    0
0051C902= 00000181 000001E0 ...   1322  ScoresBounds        dc.l    385, 480, 500, 596, 618, 698
0051C91A= 02 05 03                1323  ScoresInGame        dc.b    2, 5, 3             
0051C91D                          1324  EndScoresInGame
0051C91D                          1325      
0051C91D                          1326      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALL_REG             7FFF
BACKGROUNDBITMAP    185C
BALLBITMAP          275A94
BALLCALLS           51C826
BALLDROPPED         51C836
BALLDROPPING        1118
BALLDROPPING:ADDSCORE  1242
BALLDROPPING:BALLNOTCOLWITHWALL  113A
BALLDROPPING:CONTINUEBALLUPDATE  11F6
BALLDROPPING:DONTMOVE  123E
BALLDROPPING:ENDPEGLOOP  1196
BALLDROPPING:EXITLOOP  128A
BALLDROPPING:FOUNDSCORE  1278
BALLDROPPING:JUSTPEGCOLLIDED  11D6
BALLDROPPING:JUSTWALLCOLLIDED  11B6
BALLDROPPING:MOVEONTOPEGS  1148
BALLDROPPING:NEXTITERATION  126C
BALLDROPPING:NEXTPEG  115A
BALLDROPPING:NOTCOLLIDING  11A8
BALLDROPPING:SCORELOOP  125C
BALLDROPPING:SKIPBOUNCEOFFPEG  11F6
BALLJUSTPEGCOL      51C838
BALLJUSTWALLCOL     51C839
BALLMOVED           51C837
BALLXPOSITION       51C83A
BALLXPOSITIONFIXED  51C83E
BALLXVELOCITY       51C84A
BALLYPOSITION       51C842
BALLYPOSITIONFIXED  51C846
BALLYVELOCITY       51C84E
BALL_HEIGHT         32
BALL_INITIAL_X_POS  F9
BALL_INITIAL_Y_POS  30
BALL_INIT_X_VELOCITY  0
BALL_INIT_Y_VELOCITY  0
BALL_RADIUS         19
BALL_SLIDE_VELOCITY  500
BALL_WIDTH          32
BALL_Y_ACCELERATION  30
BOARD_HEIGHT        27E
BOARD_WIDTH         243
BOTTOM_RIGHT_BOARD_X_POS  33C
BOTTOM_RIGHT_BOARD_Y_POS  2AE
BOUNCEBALLOFFPEG    16A2
BOUNCEBALLOFFPEG:NORANDVELX  177A
BOUNCEBALLOFFPEG:NOTZEROSQRT  16F6
BOUNCEBALLOFFPEG:NOXSOFTENING  1772
BOUNCEBALLOFFWALL   1692
CHECKPEGCOLLISION   15F0
CHECKPEGCOLLISION:CHECKDX  1642
CHECKPEGCOLLISION:CHECKDY  1624
CHECKPEGCOLLISION:CHECKEND  1690
CHECKPEGCOLLISION:DIDNTCOLLIDE  168E
CHECKPEGCOLLISION:SUBBALLXPEGX  163E
CHECKPEGCOLLISION:SUBBALLYPEGY  1620
CHECKWALLCOLLISION  15C8
CHECKWALLCOLLISION:COLLIDED  15EC
CHECKWALLCOLLISION:ENDCHECK  15EE
CHUNK_HEIGHT_STACK_OFFSET  4
CHUNK_WIDTH_STACK_OFFSET  8
CHUNK_X_POS_STACK_OFFSET  10
CHUNK_Y_POS_STACK_OFFSET  C
CLOSESTPEGX         51C8E2
CLOSESTPEGY         51C8E6
COLLISIONSOUND      4EBAB4
CURRENT_PEG_X_STACK_OFFSET  8
CURRENT_PEG_Y_STACK_OFFSET  4
DOUBLE_BUFFERING_MODE  11
DRAWACHUNK          14EC
DRAWALLBACKGROUND   13A6
DRAWBACKGROUNDCHUNK  13CC
DRAWBACKGROUNDCHUNK:DONTDRAW  13E4
DRAWBALL            13F4
DRAWBALL:DONTDRAW   140C
DRAWBALLFIRSTTIME   13E6
DRAWCOLUMN          1520
DRAWEND             1578
DRAWLOADING         13BA
DRAWPIC             1498
DRAW_A_PIXEL_COMMAND  52
DRAW_X_POS_STACK_OFFSET  18
DRAW_Y_POS_STACK_OFFSET  14
DROPBALL            10B0
DROPBALLINPUT       1376
EIGHT_TENTH         CD
ENABLEDOUBLEBUFFER  157A
ENDBALLUPDATE       10AE
ENDHANDLEINPUT      1374
ENDSCORESINGAME     51C91D
FALSE               0
FIRST_PIXEL_ADDRESS_STACK_OFFSET  24
FRACTION_BITS       8
FRAMEBEGINTIME      51C822
GAMELOOP            102A
GETABSOLUTEVALUE    1830
GETFIRSTPIXELADDRESS  1588
GETIMAGEHEIGHT      15B0
GETIMAGEWIDTH       15A0
GETRANDOMNUMBER     17F4
GETRANDOMNUMBER:NINC0  1806
GETRANDOMNUMBER:NINC1  180E
GETRANDOMXVEL       1788
GETRANDOMXVEL:ENDRAND  17EE
GETRANDOMXVEL:MAKEVELNEGATIVE  17EA
GETRANDOMXVEL:RANDFIRSTXVEL  17CA
GET_TIME_COMMAND    8
GREEN               FF00
HALF                80
HANDLEINPUT         1334
HAVETORESTART       51C8F6
IMAGE_HEIGHT_STACK_OFFSET  1C
IMAGE_WIDTH_STACK_OFFSET  20
INPUT_COMMAND       13
LEFT_ARROW          25
LEFT_ARROW_LOCATION  8
LOADINGBITMAP       27787C
LOOPCOUNTER         51C8EE
MAIN                1000
MAX_RAND_X_VELOCITY  79
MIN_DX_TO_CHECK_COLLISION  2A
MIN_DY_TO_CHECK_COLLISION  2A
MIN_RAND_X_VELOCITY  70
MIN_RAND_X_VEL_ALLOWED  70
MOVEBALLTOLEFT      10BC
MOVEBALLTOLEFT:DONTMOVE  10E6
MOVEBALLTOLEFTINPUT  1384
MOVEBALLTORIGHT     10EA
MOVEBALLTORIGHT:DONTMOVE  1114
MOVEBALLTORIGHTINPUT  1398
NEXTPIXEL           154C
NUMBEROFPEGS        51C8EA
OFFSET_IMAGE_HEIGHT  16
OFFSET_IMAGE_WIDTH  12
OFFSET_TO_PIXEL_ARRAY  A
ONE_EIGHTH          20
ONE_FIFTEENTH       11
ONE_FOURTH          40
ONE_TENTH           1A
ONE_THIRD           55
ONE_TWENTIETH       D
OUTPUT_WINDOW_HEIGHT  320
OUTPUT_WINDOW_WIDTH  42F
PAINTSCREENBUFFER   1582
PEGSXS              51C852
PEGSYS              51C89A
PEG_HEIGHT          22
PEG_RADIUS          11
PEG_WIDTH           22
PLAYERINPUT         51C81E
PLAYSOUND           12F0
PLAY_SOUND_COMMAND  49
RAND                51C8F2
RANDOMIZEXVEL       1326
REPAINT_SCREEN_COMMAND  5E
RESTARTGAME         12A2
RIGHT_ARROW         27
RIGHT_ARROW_LOCATION  0
SCORE               51C8FE
SCORESBOUNDS        51C902
SCORESINGAME        51C91A
SCORESOUND          4EBAD4
SEEDRANDOMNUMBER    1822
SETBALLDRAWPARAMS   1462
SETBGDRAWPARAMS     1430
SETFIRSTDRAWPARAMS  140E
SETFRAMEBEGINTIME   12F6
SETOUTPUTWINDOW     105C
SETSOMEVARS         1318
SET_DRAWING_MODE_COMMAND  5C
SET_OUTPUT_WINDOW_COMMAND  21
SET_PEN_COLOR_COMMAND  50
SPACE_KEY           20
SPACE_KEY_LOCATION  10
SQRTS               4EBADE
STACK_OFFSET_IN_PEG_COL  8
STACK_OFFSET_WHEN_DRAWING  28
START               1000
SWAPBYTES           15C0
TIME_PER_FRAME      1
TOP_LEFT_BOARD_X_POS  F9
TOP_LEFT_BOARD_Y_POS  30
TRUE                1
UPDATEBALLPOSITION  106E
USEDBALLS           51C8FA
WAITTOENDFRAME      1302
WAITTOENDFRAME:LOOPAGAIN  1308
WALLCOLLISIONSOUND  4EBAC2
X_VELOCITY_SOFTNER  55
Y_VELOCITY_SOFTNER  20
