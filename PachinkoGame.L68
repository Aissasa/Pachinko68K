00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 10/12/2016 8:00:58 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Pachinko Game
00000000                             3  * Written by : Aissa Ben Zayed
00000000                             4  * Date       : 10-7-2016
00000000                             5  * Description: 
00000000                             6  *
00000000                             7  *-----------------------------------------------------------
00000000                             8  
00000000                             9  *
00000000                            10  
00001000                            11  START  ORG    $1000
00001000                            12  
00001000                            13      include "equates.X68"
00001000                            14  
00001000                            15  ALL_REG                     REG d0-d7/a0-a6
00001000                            16  
00001000  =00000001                 17  TRUE                        EQU 1
00001000  =00000000                 18  FALSE                       EQU 0
00001000                            19  
00001000  =0000FF00                 20  GREEN                       EQU $00FF00
00001000                            21  
00001000                            22  ;math
00001000  =00000008                 23  FRACTION_BITS               EQU 8
00001000  =0000001A                 24  ONE_TENTH                   EQU 26
00001000  =00000033                 25  TWO_TENTH                   EQU 51
00001000  =000000CD                 26  EIGHT_TENTH                 EQU 205
00001000  =00000080                 27  HALF                        EQU 128
00001000                            28  
00001000                            29  ;output window
00001000  =00000320                 30  OUTPUT_WINDOW_WIDTH         EQU 800     ;the output screen width in pixels
00001000  =00000256                 31  OUTPUT_WINDOW_HEIGHT        EQU 598     ;the output screen height in pixels
00001000                            32  
00001000                            33  ;pachinko board dimesions and key points
00001000  =000000E8                 34  TOP_LEFT_BOARD_X_POS        EQU 232
00001000  =0000001E                 35  TOP_LEFT_BOARD_Y_POS        EQU 30
00001000  =00000236                 36  BOTTOM_RIGHT_BOARD_X_POS    EQU 566
00001000  =000001F3                 37  BOTTOM_RIGHT_BOARD_Y_POS    EQU 499
00001000  =0000014E                 38  BOARD_WIDTH                 EQU (BOTTOM_RIGHT_BOARD_X_POS-TOP_LEFT_BOARD_X_POS)
00001000  =000001D5                 39  BOARD_HEIGHT                EQU (BOTTOM_RIGHT_BOARD_Y_POS-TOP_LEFT_BOARD_Y_POS)
00001000                            40  
00001000                            41  ;ball
00001000  =00000028                 42  BALL_WIDTH                  EQU 40
00001000  =00000028                 43  BALL_HEIGHT                 EQU 40
00001000  =00000014                 44  BALL_RADIUS                 EQU 20
00001000  =00000028                 45  BALL_OFFSET                 EQU 40
00001000  =000000E8                 46  BALL_INITIAL_X_POS          EQU TOP_LEFT_BOARD_X_POS
00001000  =0000001E                 47  BALL_INITIAL_Y_POS          EQU TOP_LEFT_BOARD_Y_POS
00001000  =000000FC                 48  BALL_CENTER_X_POS           EQU (BALL_INITIAL_X_POS+(BALL_WIDTH/2))
00001000  =00000032                 49  BALL_CENTER_Y_POS           EQU (BALL_INITIAL_Y_POS+(BALL_HEIGHT/2))
00001000                            50  
00001000                            51  
00001000  =00000200                 52  BALL_SLIDE_VELOCITY         EQU $200
00001000                            53  
00001000  =00000010                 54  BALL_Y_ACCELERATION         EQU $10
00001000                            55  
00001000  =00000000                 56  BALL_INIT_X_VELOCITY        EQU 0      ****************************** make random between -2,2
00001000  =00000000                 57  BALL_INIT_Y_VELOCITY        EQU 0
00001000                            58  
00001000                            59  
00001000                            60  ;pegs
00001000  =00000004                 61  PEG_WIDTH                   EQU 4
00001000  =00000004                 62  PEG_HEIGHT                  EQU 4
00001000  =00000002                 63  PEG_RADIUS                  EQU 2
00001000                            64  
00001000                            65  
00001000                            66  ;collision
00001000  =0000002A                 67  MIN_DX_TO_CHECK_COLLISION   EQU 20+(BALL_RADIUS+PEG_RADIUS)
00001000  =0000002A                 68  MIN_DY_TO_CHECK_COLLISION   EQU 20+(BALL_RADIUS+PEG_RADIUS)
00001000                            69  
00001000                            70  
00001000                            71  ;commands
00001000  =00000008                 72  GET_TIME_COMMAND            EQU 8       ;get current time trap code
00001000  =00000013                 73  INPUT_COMMAND               EQU 19      ;get input keys    
00001000  =00000021                 74  SET_OUTPUT_WINDOW_COMMAND   EQU 33      ;set output trap code
00001000  =00000050                 75  SET_PEN_COLOR_COMMAND       EQU 80      ;set pen color trap code
00001000  =00000052                 76  DRAW_A_PIXEL_COMMAND        EQU 82      ;draw pixel trap code
00001000  =0000005C                 77  SET_DRAWING_MODE_COMMAND    EQU 92      ;set drawing mode used for enabeling double buffering
00001000  =0000005E                 78  REPAINT_SCREEN_COMMAND      EQU 94      ;repaints screen command from a buffer
00001000                            79  
00001000  =00000011                 80  DOUBLE_BUFFERING_MODE       EQU 17      ;double buffering mode option
00001000                            81  
00001000                            82  ;offsets in the bitmap
00001000  =0000000A                 83  OFFSET_TO_PIXEL_ARRAY       EQU $0A      ;the offset to the address containing the pixel array starting byte
00001000  =00000012                 84  OFFSET_IMAGE_WIDTH          EQU $12      ;the offset to the address containing the image width
00001000  =00000016                 85  OFFSET_IMAGE_HEIGHT         EQU $16      ;the offset to the address containing the image height
00001000                            86  
00001000                            87  
00001000                            88  ;Stack pointers for drawing chunks
00001000  =00000024                 89  FIRST_PIXEL_ADDRESS_STACK_OFFSET    EQU 36
00001000  =00000020                 90  IMAGE_WIDTH_STACK_OFFSET            EQU 32
00001000  =0000001C                 91  IMAGE_HEIGHT_STACK_OFFSET           EQU 28
00001000  =00000018                 92  DRAW_X_POS_STACK_OFFSET             EQU 24
00001000  =00000014                 93  DRAW_Y_POS_STACK_OFFSET             EQU 20
00001000  =00000010                 94  CHUNK_X_POS_STACK_OFFSET            EQU 16
00001000  =0000000C                 95  CHUNK_Y_POS_STACK_OFFSET            EQU 12
00001000  =00000008                 96  CHUNK_WIDTH_STACK_OFFSET            EQU 8
00001000  =00000004                 97  CHUNK_HEIGHT_STACK_OFFSET           EQU 4
00001000  =00000028                 98  STACK_OFFSET_WHEN_DRAWING           EQU FIRST_PIXEL_ADDRESS_STACK_OFFSET+CHUNK_HEIGHT_STACK_OFFSET
00001000                            99  
00001000                           100  
00001000                           101  ;input keycodes
00001000  =00000020                102  SPACE_KEY   EQU $20
00001000  =00000025                103  LEFT_ARROW  EQU $25
00001000  =00000027                104  RIGHT_ARROW EQU $27
00001000                           105  
00001000                           106  ;input location of keycode in d1
00001000  =00000010                107  SPACE_KEY_LOCATION   EQU 16
00001000  =00000008                108  LEFT_ARROW_LOCATION  EQU 8
00001000  =00000000                109  RIGHT_ARROW_LOCATION EQU 0
00001000                           110  
00001000                           111  ;frame rate
00001000  =00000001                112  TIME_PER_FRAME       EQU 1
00001000                           113  
00001000                           114  
00001000                           115  
00001000                           116  
00001000                           117  
00001000                           118  
00001000                           119  
00001000                           120  
00001000                           121  -------------------- end include --------------------
00001000                           122  
00001000                           123  Main:
00001000                           124      
00001000  4EB9 00001050            125      jsr SetOutputWindow 
00001006  4EB9 000013EA            126      jsr EnableDoubleBuffer
0000100C  4EB9 00001222            127      jsr DrawAllBackground
00001012  4EB9 0000124A            128      jsr DrawBallFirstTime
00001018  4EB9 000013F2            129      jsr PaintScreenBuffer
0000101E                           130      
0000101E                           131  GameLoop:
0000101E                           132      
0000101E  4EB9 0000118E            133      jsr SetFrameBeginTime
00001024                           134  
00001024  4EB9 000011B0            135      jsr HandleInput
0000102A                           136      
0000102A  4EB9 00001062            137      jsr UpdateBallPosition
00001030                           138  
00001030  4EB9 00001230            139      jsr DrawBackgroundChunk
00001036  4EB9 00001258            140      jsr DrawBall
0000103C                           141  
0000103C  4EB9 0000119A            142      jsr WaitToEndFrame
00001042                           143      
00001042  4EB9 000013F2            144      jsr PaintScreenBuffer
00001048                           145  
00001048  4EF8 101E                146      jmp GameLoop          
0000104C                           147      
0000104C  4E72 3000                148      STOP    #$3000                     
00001050                           149  
00001050                           150  SetOutputWindow:
00001050                           151  
00001050                           152      ;set the output window dimensions
00001050  7021                     153      move.l  #SET_OUTPUT_WINDOW_COMMAND, d0
00001052  223C 00000320            154      move.l  #OUTPUT_WINDOW_WIDTH, d1
00001058  4841                     155      swap.w  d1
0000105A  323C 0256                156      move.w  #OUTPUT_WINDOW_HEIGHT, d1
0000105E  4E4F                     157      Trap    #15
00001060                           158  
00001060  4E75                     159      rts
00001062                           160  
00001062                           161      
00001062                           162  
00001062                           163  UpdateBallPosition:
00001062                           164  
00001062                           165      ;initialize ball moved to false
00001062  13FC 0000 00161DBF       166      move.b  #(FALSE), (BallMoved)
0000106A                           167  
0000106A                           168      ;see if the ball is already dropped
0000106A  0C39 0001 00161DBE       169      cmp.b   #(TRUE), (BallDropped)
00001072  6700 008C                170      beq     BallDropping
00001076                           171      
00001076                           172      ;depending on user input, call drop or Move
00001076  2039 00161DA6            173      move.l  (PlayerInput), d0
0000107C  E588                     174      lsl.l   #2,d0
0000107E  43F9 00161DAE            175      lea BallCalls, a1
00001084  2231 0000                176      move.l  (a1, d0),d1
00001088                           177      
00001088                           178      ;avoid null calls
00001088  0C81 00000000            179      cmpi.l  #0, d1
0000108E  6700 0006                180      beq     EndBallUpdate
00001092                           181      
00001092  2441                     182      move.l  d1,a2
00001094  4ED2                     183      jmp     (a2)
00001096                           184  
00001096                           185  EndBallUpdate:
00001096                           186      
00001096  4E75                     187      rts
00001098                           188  
00001098                           189  DropBall:
00001098                           190  
00001098                           191      ;add drop ball code
00001098                           192      
00001098  13FC 0001 00161DBE       193      move.b  #(TRUE), (BallDropped)
000010A0                           194  
000010A0  4EF8 1096                195      jmp     EndBallUpdate
000010A4                           196  
000010A4                           197  MoveBallToLeft:
000010A4                           198  
000010A4                           199      ;cmp.b   #(TRUE), (BallDropped)
000010A4                           200      ;beq     EndBallUpdate                ; change this after making the game work
000010A4                           201  
000010A4                           202      ;check if in bounds
000010A4  0CB9 000000E8 00161DC2   203      cmp.l   #(TOP_LEFT_BOARD_X_POS), (BallXPosition)
000010AE  6F00 001E                204      ble     .DontMove
000010B2                           205  
000010B2  2039 00161DC2            206      move.l  (BallXPosition),d0
000010B8  E188                     207      lsl.l   #8,d0
000010BA                           208  
000010BA  0480 00000200            209      sub.l   #(BALL_SLIDE_VELOCITY), d0
000010C0  23C0 00161DC6            210      move.l  d0, (BallXPositionFixed)
000010C6                           211  
000010C6                           212      ;ball moved
000010C6  13FC 0001 00161DBF       213      move.b  #(TRUE), (BallMoved)
000010CE                           214  
000010CE                           215  .DontMove:
000010CE                           216  
000010CE  4EF8 1096                217      jmp     EndBallUpdate
000010D2                           218  
000010D2                           219  MoveBallToRight:
000010D2                           220  
000010D2                           221      ;cmp.b   #(TRUE), (BallDropped)
000010D2                           222      ;beq     EndBallUpdate                ; change this after making the game work
000010D2                           223  
000010D2                           224      ;check if in bounds
000010D2  0CB9 0000020E 00161DC2   225      cmp.l   #(BOTTOM_RIGHT_BOARD_X_POS-BALL_WIDTH), (BallXPosition)
000010DC  6C00 001E                226      bge     .DontMove
000010E0                           227  
000010E0  2039 00161DC2            228      move.l  (BallXPosition),d0
000010E6  E188                     229      lsl.l   #8,d0
000010E8                           230      
000010E8  0680 00000200            231      add.l   #(BALL_SLIDE_VELOCITY), d0
000010EE  23C0 00161DC6            232      move.l  d0, (BallXPositionFixed)
000010F4                           233  
000010F4                           234      ;ball moved
000010F4  13FC 0001 00161DBF       235      move.b  #(TRUE), (BallMoved)
000010FC                           236  
000010FC                           237  .DontMove:
000010FC                           238  
000010FC  4EF8 1096                239      jmp     EndBallUpdate
00001100                           240  
00001100                           241  
00001100                           242  BallDropping:
00001100                           243      
00001100                           244      ;check collisions with pegs here *************************************
00001100  4EB9 00001438            245      jsr     CheckCollision
00001106                           246  
00001106  B0BC 00000001            247      cmp.l   #(TRUE), d0
0000110C  6600 0014                248      bne     .NotColliding
00001110                           249  
00001110                           250      ;check if it just collided
00001110  0C39 0000 00161DC0       251      cmp.b   #(FALSE), (BallJustCollided)
00001118  6700 0016                252      beq     .JustCollided
0000111C                           253  
0000111C  4EF9 00001156            254      jmp     .ContinueCheckingCol
00001122                           255  
00001122                           256  .NotColliding:
00001122                           257  
00001122  13FC 0000 00161DC0       258      move.b  #(FALSE), (BallJustCollided)
0000112A  4EF9 00001156            259      jmp     .ContinueCheckingCol
00001130                           260  
00001130                           261  .JustCollided:  
00001130                           262  
00001130                           263      ;bounce
00001130  2039 00161DD6            264      move.l  (BallYVelocity), d0
00001136  E188                     265      lsl.l   #(FRACTION_BITS),d0
00001138  C0FC 00CD                266      mulu.w  #(EIGHT_TENTH), d0
0000113C  E088                     267      lsr.l   #(FRACTION_BITS),d0
0000113E  E088                     268      lsr.l   #(FRACTION_BITS),d0
00001140  4480                     269      neg.l   d0
00001142  23C0 00161DD6            270      move.l  d0, (BallYVelocity)
00001148                           271  
00001148  13FC 0001 00161DC0       272      move.b  #(TRUE), (BallJustCollided)
00001150  4EF9 0000118A            273      jmp     .DontMove
00001156                           274  
00001156                           275  .ContinueCheckingCol:
00001156                           276  .SkipBounceOffPeg:
00001156                           277  
00001156  0CB9 000001CB 00161DCA   278      cmp.l   #(BOTTOM_RIGHT_BOARD_Y_POS-BALL_HEIGHT), (BallYPosition)
00001160  6C00 0028                279      bge     .DontMove ; bounce instead
00001164                           280  
00001164                           281  
00001164                           282      ;update Y vel
00001164  06B9 00000010 00161DD6   283      add.l   #(BALL_Y_ACCELERATION), (BallYVelocity)
0000116E                           284  
0000116E                           285      ;add the velocity to the y pos
0000116E  2039 00161DCA            286      move.l  (BallYPosition),d0
00001174  E188                     287      lsl.l   #8,d0
00001176                           288      
00001176  D0B9 00161DD6            289      add.l   (BallYVelocity), d0
0000117C  23C0 00161DCE            290      move.l  d0, (BallYPositionFixed)
00001182                           291  
00001182  13FC 0001 00161DBF       292      move.b  #(TRUE), BallMoved
0000118A                           293  
0000118A                           294  
0000118A                           295  .DontMove:
0000118A                           296  
0000118A  4EF8 1096                297      jmp     EndBallUpdate
0000118E                           298  
0000118E                           299  
0000118E                           300  
0000118E                           301  SetFrameBeginTime:
0000118E                           302  
0000118E                           303      ;get current time
0000118E  7008                     304      move.l  #(GET_TIME_COMMAND), d0
00001190  4E4F                     305      Trap    #15
00001192                           306      ;set FrameBeginTime
00001192  23C1 00161DAA            307      move.l  d1, (FrameBeginTime)
00001198                           308  
00001198  4E75                     309      rts
0000119A                           310  
0000119A                           311  
0000119A                           312  WaitToEndFrame:
0000119A                           313  
0000119A  2439 00161DAA            314      move.l  (FrameBeginTime),d2
000011A0                           315  
000011A0                           316  .LoopAgain:
000011A0                           317      ;get current time
000011A0  7008                     318      move.l  #(GET_TIME_COMMAND), d0
000011A2  4E4F                     319      Trap    #15
000011A4                           320      
000011A4                           321      ;get DeltaTime in d1
000011A4  9282                     322      sub.l   d2,d1
000011A6                           323  
000011A6  B2BC 00000001            324      cmp.l   #(TIME_PER_FRAME), d1
000011AC  6DF2                     325      blt     .LoopAgain
000011AE                           326  
000011AE  4E75                     327      rts
000011B0                           328  
000011B0                           329  
000011B0                           330  
000011B0                           331  
000011B0                           332      include "InputHandler.x68"
000011B0                           333  
000011B0                           334  
000011B0                           335  HandleInput:  
000011B0                           336  
000011B0                           337      ;reset PlayerInput
000011B0  23FC 00000000 00161DA6   338      move.l  #0,(PlayerInput)
000011BA                           339      ;Set the inputs    
000011BA  7013                     340      move.l  #(INPUT_COMMAND),d0
000011BC                           341      ;d1: $00202527 => space, left arrow, right arrow
000011BC                           342      ;move.l  $20<<$16+$25<<$8+$27,d1
000011BC  7220                     343      move.l  #(SPACE_KEY),d1
000011BE  E189                     344      lsl.l   #8,d1
000011C0  123C 0025                345      move.b  #(LEFT_ARROW),d1
000011C4  E189                     346      lsl.l   #8,d1
000011C6  123C 0027                347      move.b  #(RIGHT_ARROW),d1
000011CA                           348  
000011CA  4E4F                     349      Trap    #15
000011CC                           350  
000011CC                           351      ;check if ball is droped, if yes skip
000011CC  0C39 0001 00161DBE       352      cmpi.b  #(TRUE),(BallDropped)
000011D4  6700 001A                353      beq     EndHandleInput
000011D8                           354  
000011D8                           355      ;check the pressed key and call subroutines accordingly
000011D8  0801 0010                356      btst.l  #(SPACE_KEY_LOCATION), d1       
000011DC  6600 0014                357      bne     DropBallInput
000011E0                           358  
000011E0  0801 0008                359      btst.l  #(LEFT_ARROW_LOCATION), d1       
000011E4  6600 001A                360      bne     MoveBallToLeftInput
000011E8                           361  
000011E8  0801 0000                362      btst.l  #(RIGHT_ARROW_LOCATION), d1       
000011EC  6600 0026                363      bne     MoveBallToRightInput
000011F0                           364  
000011F0                           365  EndHandleInput:
000011F0                           366  
000011F0  4E75                     367      rts
000011F2                           368  
000011F2                           369  DropBallInput:
000011F2                           370  
000011F2  23FC 00000001 00161DA6   371      move.l #1,(PlayerInput)
000011FC                           372  
000011FC  4EF8 11F0                373      jmp EndHandleInput
00001200                           374  
00001200                           375  MoveBallToLeftInput:
00001200                           376      
00001200                           377      ;if both arrows are pressed, do nothing
00001200  0801 0000                378      btst.l  #(RIGHT_ARROW_LOCATION), d1       
00001204  66EA                     379      bne     EndHandleInput
00001206                           380  
00001206  23FC 00000002 00161DA6   381      move.l #2,(PlayerInput)
00001210                           382  
00001210  4EF8 11F0                383      jmp     EndHandleInput
00001214                           384  
00001214                           385  MoveBallToRightInput:
00001214                           386      
00001214  23FC 00000003 00161DA6   387      move.l #3,(PlayerInput)  
0000121E                           388  
0000121E  4EF8 11F0                389      jmp     EndHandleInput
00001222                           390    
00001222                           391  -------------------- end include --------------------
00001222                           392      include "drawingModule.X68"
00001222                           393  ; this module contains drawing related subroutines
00001222                           394  
00001222                           395  DrawAllBackground:
00001222                           396      
00001222                           397      ;a0 has the address to the bitmap
00001222  4EB9 00001272            398      jsr SetFirstDrawParams
00001228  4EB9 00001308            399      jsr DrawPic
0000122E                           400  
0000122E  4E75                     401      rts
00001230                           402  
00001230                           403  DrawBackgroundChunk:
00001230                           404      
00001230  0C39 0000 00161DBF       405      cmp.b #(FALSE),(BallMoved)
00001238  6700 000E                406      beq .DontDraw
0000123C                           407      
0000123C  4EB9 0000129A            408      jsr SetBgDrawParams
00001242  4EB9 00001308            409      jsr DrawPic
00001248                           410  
00001248                           411  .DontDraw:
00001248  4E75                     412      rts
0000124A                           413  
0000124A                           414  DrawBallFirstTime:
0000124A                           415  
0000124A  13FC 0001 00161DBF       416      move.b  #(TRUE), (BallMoved)
00001252                           417  
00001252  4EF9 00001258            418      jmp     DrawBall
00001258                           419  
00001258                           420  DrawBall:
00001258                           421  
00001258  0C39 0000 00161DBF       422      cmp.b #(FALSE),(BallMoved)
00001260  6700 000E                423      beq .DontDraw
00001264                           424  
00001264  4EB9 000012CC            425      jsr SetBallDrawParams
0000126A  4EB9 00001308            426      jsr DrawPic
00001270                           427  
00001270                           428  .DontDraw:
00001270  4E75                     429      rts
00001272                           430  
00001272                           431  
00001272                           432  SetFirstDrawParams:
00001272                           433  
00001272  41F9 00001498            434      lea BackgroundBitmap, a0
00001278                           435  
00001278                           436      ;set draw start position to 0,0    
00001278  223C 00000256            437      move.l  #(OUTPUT_WINDOW_HEIGHT),d1  ;y
0000127E  4841                     438      swap    d1
00001280  323C 0000                439      move.w  #0,d1                       ;x
00001284                           440      
00001284                           441      ;set chunk start position to 0,0    
00001284  7400                     442      move.l  #0,d2                       ;y
00001286  4842                     443      swap    d2
00001288  343C 0000                444      move.w  #0,d2                       ;x
0000128C                           445      
0000128C                           446      ;set chunk width and height to the screen resol
0000128C  263C 00000320            447      move.l  #(OUTPUT_WINDOW_WIDTH),d3
00001292  4843                     448      swap    d3
00001294  363C 0256                449      move.w  #(OUTPUT_WINDOW_HEIGHT),d3
00001298                           450      
00001298  4E75                     451      rts
0000129A                           452  
0000129A                           453  SetBgDrawParams:
0000129A                           454  
0000129A  41F9 00001498            455      lea BackgroundBitmap, a0
000012A0                           456  
000012A0                           457      ;set draw start position   
000012A0  2239 00161DCA            458      move.l  (BallYPosition),d1           
000012A6  0681 00000028            459      add.l   #(BALL_HEIGHT),d1               ;y
000012AC  4841                     460      swap    d1
000012AE  D2B9 00161DC2            461      add.l   (BallXPosition),d1              ;x
000012B4                           462      ;sub.l   #(BALL_OFFSET),d1
000012B4                           463      
000012B4                           464      ;set chunk start position
000012B4  2439 00161DCA            465      move.l  (BallYPosition),d2              ;y          
000012BA  4842                     466      swap    d2
000012BC  D4B9 00161DC2            467      add.l  (BallXPosition),d2              ;x
000012C2                           468      
000012C2                           469      ;set chunk width and height
000012C2  7628                     470      move.l  #(BALL_WIDTH),d3                ;add offset maybe
000012C4  4843                     471      swap    d3
000012C6  363C 0028                472      move.w  #(BALL_HEIGHT),d3               ;add offset maybe
000012CA                           473      
000012CA  4E75                     474      rts
000012CC                           475  
000012CC                           476  SetBallDrawParams:
000012CC                           477  
000012CC  41F9 0015FB0E            478      lea BallBitmap, a0
000012D2                           479  
000012D2                           480      ;set draw start position   
000012D2  7228                     481      move.l  #(BALL_HEIGHT),d1
000012D4  2E39 00161DCE            482      move.l  (BallYPositionFixed),d7
000012DA  E08F                     483      lsr.l   #(FRACTION_BITS),d7
000012DC  D287                     484      add.l   d7,d1
000012DE                           485      ;update the y position
000012DE  23C7 00161DCA            486      move.l  d7, (BallYPosition)
000012E4                           487            
000012E4  4841                     488      swap    d1
000012E6                           489  
000012E6  2E39 00161DC6            490      move.l  (BallXPositionFixed),d7
000012EC  E08F                     491      lsr.l   #(FRACTION_BITS),d7
000012EE  3207                     492      move.w  d7, d1
000012F0                           493      ;update the x position
000012F0  23C7 00161DC2            494      move.l  d7, (BallXPosition)
000012F6                           495  
000012F6                           496      
000012F6                           497      ;set chunk start position
000012F6  7400                     498      move.l  #0,d2 
000012F8  4842                     499      swap    d2
000012FA  343C 0000                500      move.w  #0,d2
000012FE                           501      
000012FE                           502      ;set chunk width and height
000012FE  7628                     503      move.l  #(BALL_WIDTH),d3
00001300  4843                     504      swap    d3
00001302  363C 0028                505      move.w  #(BALL_HEIGHT),d3
00001306                           506      
00001306  4E75                     507      rts
00001308                           508  
00001308                           509       
00001308                           510  DrawPic:
00001308                           511      ;push the first pixel pos
00001308  2C48                     512      move.l  a0, a6
0000130A  4EB9 000013F8            513      jsr GetFirstPixelAddress
00001310  2F0E                     514      move.l  a6, -(sp)                               
00001312                           515      
00001312                           516      ;push image width
00001312  2C48                     517      move.l  a0, a6
00001314  4EB9 00001410            518      jsr GetImageWidth
0000131A  2F00                     519      move.l  d0,-(sp)
0000131C                           520      
0000131C                           521      ;push image height
0000131C  2C48                     522      move.l  a0, a6
0000131E  4EB9 00001420            523      jsr GetImageHeight
00001324  2F00                     524      move.l  d0,-(sp)
00001326                           525  
00001326                           526      ;push the draw start pos
00001326  4284                     527      clr.l   d4
00001328  3801                     528      move.w  d1, d4
0000132A  2F04                     529      move.l  d4,-(sp)    ;push x
0000132C  4841                     530      swap    d1
0000132E  3801                     531      move.w  d1,d4
00001330  2F04                     532      move.l  d4,-(sp)    ;push y
00001332                           533      
00001332                           534      ;push the chunk start pos
00001332  3802                     535      move.w  d2,d4
00001334  2F04                     536      move.l  d4,-(sp)    ;push x
00001336                           537      ;convert the y pos of chunk to bitmap coor
00001336  4842                     538      swap    d2
00001338  3802                     539      move.w  d2,d4
0000133A  D843                     540      add.w   d3,d4           ;add chunk height
0000133C                           541      ;d0 have the image height
0000133C  2200                     542      move.l  d0,d1 
0000133E  9284                     543      sub.l   d4,d1
00001340  2F01                     544      move.l  d1, -(sp)   ;push y
00001342                           545      
00001342                           546      ;push the chunk dimensions
00001342  4843                     547      swap    d3
00001344  3803                     548      move.w  d3, d4  
00001346  2F04                     549      move.l  d4,-(sp)    ;push width
00001348  4843                     550      swap    d3
0000134A  3803                     551      move.w  d3, d4
0000134C  2F04                     552      move.l  d4,-(sp)    ;push height
0000134E                           553   
0000134E  4EB9 0000135C            554      jsr DrawAChunk
00001354                           555      
00001354                           556      ;reinit the stack pointer
00001354  DFFC 00000028            557      add.l   #(STACK_OFFSET_WHEN_DRAWING),sp
0000135A  4E75                     558      rts                
0000135C                           559      
0000135C                           560  DrawAChunk:
0000135C                           561      
0000135C  2E2F 0020                562      move.l  IMAGE_WIDTH_STACK_OFFSET(sp),d7                 ;get the image width into d7
00001360  0287 00000003            563      andi.l  #3,d7                                           ;get the rest of division by 4, which is the padding     
00001366                           564      
00001366  286F 0024                565      move.l  FIRST_PIXEL_ADDRESS_STACK_OFFSET(sp),a4         ;a4 points to the first pixel
0000136A                           566      
0000136A  222F 0020                567      move.l  IMAGE_WIDTH_STACK_OFFSET(sp),d1                 ;image width into d1
0000136E  2401                     568      move.l  d1, d2                                          ;temp value to avoid mul
00001370  D282                     569      add.l   d2, d1
00001372  D282                     570      add.l   d2, d1                                          ;get the width number of bytes
00001374  DE81                     571      add.l   d1,d7                                           ;width bytes
00001376                           572      
00001376  2407                     573      move.l  d7, d2                                          ;store width bytes into d2
00001378                           574      
00001378  222F 000C                575      move.l  CHUNK_Y_POS_STACK_OFFSET(sp),d1                 ;get the chunk y pos
0000137C  C4C1                     576      mulu.w  d1,d2                                           ;mutiply the y with the width bytes to get the y bytes offset
0000137E                           577      
0000137E  202F 0010                578      move.l  CHUNK_X_POS_STACK_OFFSET(sp),d0                 ;put chunk x start pos into d0
00001382  2200                     579      move.l  d0, d1                                          ;temp value to avoid mul
00001384  D081                     580      add.l   d1, d0
00001386  D081                     581      add.l   d1, d0                                          ;get the x number of bytes
00001388                           582      
00001388  D480                     583      add.l   d0,d2                                           ;add the x bytes to the y bytes offset to have the total offset
0000138A                           584      
0000138A  D9C2                     585      add.l   d2, a4                                          ;add the offset to get the new first position
0000138C                           586      
0000138C  7A00                     587      move.l  #0, d5                                          ;x counter
0000138E  7C00                     588      move.l  #0, d6                                          ;y counter
00001390                           589      
00001390                           590      
00001390                           591  DrawColumn:
00001390                           592      ;set pen color
00001390  4281                     593      clr.l d1
00001392  121C                     594      move.b   (a4)+,d1                                       ;set blue
00001394  E189                     595      lsl.l   #8,d1                                           ;shift the byte to the left
00001396  121C                     596      move.b  (a4)+,d1                                        ;set green
00001398  E189                     597      lsl.l   #8,d1                                           ;shift the byte to the left
0000139A  121C                     598      move.b  (a4)+,d1                                        ;set red    => d1 has 00BBGGRR
0000139C                           599      
0000139C                           600      ;if green, skip that pixel
0000139C  B2BC 0000FF00            601      cmp.l   #(GREEN),d1
000013A2  6700 0018                602      beq     NextPixel
000013A6                           603      
000013A6  7050                     604      move.l  #SET_PEN_COLOR_COMMAND, d0
000013A8  4E4F                     605      Trap #15
000013AA                           606      
000013AA                           607      ;draw a pixel
000013AA                           608      ;set x in d1 and y in d2
000013AA  4281                     609      clr.l   d1
000013AC  222F 0018                610      move.l  DRAW_X_POS_STACK_OFFSET(sp),d1                                               
000013B0  D285                     611      add.l   d5,d1                                           ;set x position on screen
000013B2                           612      
000013B2  242F 0014                613      move.l  DRAW_Y_POS_STACK_OFFSET(sp),d2
000013B6  9486                     614      sub.l   d6,d2                                           ;set the y position on screen
000013B8                           615      
000013B8  7052                     616      move.l  #DRAW_A_PIXEL_COMMAND, d0
000013BA  4E4F                     617      Trap #15
000013BC                           618  
000013BC                           619  NextPixel:    
000013BC  5285                     620      addi.l  #1, d5                                          ;increment x counter
000013BE  202F 0008                621      move.l  CHUNK_WIDTH_STACK_OFFSET(sp),d0
000013C2  BA80                     622      cmp.l  d0,d5
000013C4  66CA                     623      bne DrawColumn                                          ;if not done with the column, continue drawing
000013C6                           624      
000013C6  5286                     625      addi.l  #1, d6                                          ;increment y counter
000013C8  202F 0004                626      move.l  CHUNK_HEIGHT_STACK_OFFSET(sp),d0
000013CC  BC80                     627      cmp.l   d0,d6
000013CE  6700 0018                628      beq     DrawEnd                                         ;if done with the rows, then stop drawing
000013D2                           629      
000013D2  7A00                     630      move.l  #0, d5                                          ;reset x counter
000013D4  222F 0008                631      move.l  CHUNK_WIDTH_STACK_OFFSET(sp),d1                 ;put chunk width in d1
000013D8  2001                     632      move.l  d1, d0                                          ;d0 has the temp to avoid mul
000013DA  D280                     633      add.l   d0, d1
000013DC  D280                     634      add.l   d0, d1                                          ;multiply it by 3 to get the bytes number
000013DE                           635      
000013DE  2007                     636      move.l  d7, d0                                          ;d0 = width bytes
000013E0  9081                     637      sub.l   d1,d0                                           ;sub the chunk bytes from the width bytes
000013E2  D9C0                     638      add.l   d0, a4                                          ;and then add it to a4 to get the next pixel
000013E4                           639      
000013E4  4EF8 1390                640      jmp DrawColumn                                          ;draw next column
000013E8                           641  
000013E8                           642  DrawEnd:
000013E8                           643  
000013E8  4E75                     644      rts
000013EA                           645  
000013EA                           646  
000013EA                           647  EnableDoubleBuffer:
000013EA                           648      ;double buffering mode enabled
000013EA  705C                     649      move.l  #SET_DRAWING_MODE_COMMAND, d0
000013EC  7211                     650      move.l  #DOUBLE_BUFFERING_MODE, d1
000013EE  4E4F                     651      Trap    #15
000013F0                           652  
000013F0  4E75                     653      rts
000013F2                           654  
000013F2                           655  PaintScreenBuffer:
000013F2                           656      ;repaint screen from buffer
000013F2  705E                     657      move.l  #REPAINT_SCREEN_COMMAND, d0
000013F4  4E4F                     658      Trap    #15
000013F6                           659          
000013F6  4E75                     660      rts    
000013F8                           661  
000013F8                           662  ;param a6:image address
000013F8                           663  GetFirstPixelAddress:
000013F8  DDFC 0000000A            664      add.l   #(OFFSET_TO_PIXEL_ARRAY),a6                     ;a6 has the pixel offset address
000013FE  2016                     665      move.l  (a6),d0                                         ;put it in d0
00001400  4EB9 00001430            666      jsr SwapBytes                                           ;swap to get the right value
00001406  DDC0                     667      add.l   d0,a6                                           ;a6 has the 0, h-1 pixel address
00001408  9DFC 0000000A            668      sub.l   #(OFFSET_TO_PIXEL_ARRAY),a6
0000140E                           669      
0000140E  4E75                     670      rts
00001410                           671  
00001410                           672  ;param a6:imaage address, return d0: image width
00001410                           673  
00001410                           674  GetImageWidth:
00001410  DDFC 00000012            675      add.l   #(OFFSET_IMAGE_WIDTH),a6                        ;a6 has the image width address
00001416  2016                     676      move.l  (a6),d0                                         ;put it in d0
00001418  4EB9 00001430            677      jsr SwapBytes                                           ;swap to get the right value
0000141E                           678      
0000141E  4E75                     679      rts
00001420                           680  
00001420                           681  ;param a6:imaage address, return d0: image height
00001420                           682  GetImageHeight:
00001420  DDFC 00000016            683      add.l   #(OFFSET_IMAGE_HEIGHT),a6                       ;a6 has the image width address
00001426  2016                     684      move.l  (a6),d0                                         ;put it in d0
00001428  4EB9 00001430            685      jsr SwapBytes                                           ;swap to get the right value
0000142E                           686  
0000142E  4E75                     687      rts
00001430                           688  
00001430                           689  
00001430                           690  SwapBytes:
00001430                           691      ;DDCCBBAA
00001430  E158                     692      rol.w   #8,d0   ;DDCCAABB
00001432  4840                     693      swap.w    d0    ;AABBDDCC
00001434  E158                     694      rol.w   #8,d0   ;AABBCCDD
00001436                           695      
00001436  4E75                     696      rts
00001438                           697  
00001438                           698  
00001438                           699  ;BackgroundBitmap  INCBIN "bg.bmp"
00001438                           700  
00001438                           701          
00001438                           702  
00001438                           703  
00001438                           704  
00001438                           705  
00001438                           706  
00001438                           707  
00001438                           708  
00001438                           709  
00001438                           710  
00001438                           711  
00001438                           712  -------------------- end include --------------------
00001438                           713      include "CollisionModule.x68"
00001438                           714  ;Collision stuff file
00001438                           715  
00001438                           716  CheckCollision:
00001438                           717      
00001438                           718      ;movem.l    ALL_REG, -(sp)
00001438                           719      ;set params
00001438  2039 00161DC2            720      move.l  (BallXPosition), d0
0000143E  2239 00161DCA            721      move.l  (BallYPosition), d1
00001444                           722  
00001444                           723      ;clr.l  d2
00001444                           724      ;clr.l  d3
00001444  2439 00161DDA            725      move.l  (PegsXs),d2
0000144A  2639 00161DE2            726      move.l  (PegsYs),d3
00001450                           727  
00001450                           728      ;check if we even should do collision check
00001450                           729      ;dy is first
00001450  B681                     730      cmp.l   d1,d3 
00001452  6C00 000C                731      bge     .SubBallYFromPegY ; if peg y bigger
00001456                           732      
00001456  9283                     733      sub.l   d3,d1
00001458  2A01                     734      move.l  d1,d5               ;dy
0000145A  4EF9 00001464            735      jmp     .CheckDy
00001460                           736  
00001460                           737  .SubBallYFromPegY:
00001460                           738  
00001460  9681                     739      sub.l   d1,d3
00001462  2A03                     740      move.l  d3, d5              ;dy
00001464                           741  
00001464                           742  .CheckDy:
00001464                           743  
00001464  BABC 0000002A            744      cmp.l   #(MIN_DY_TO_CHECK_COLLISION), d5
0000146A  6E00 0028                745      bgt     .DidntCollide
0000146E                           746  
0000146E                           747      ;dx is second
0000146E  B480                     748      cmp.l   d0,d2 
00001470  6C00 000C                749      bge     .SubBallXFromPegX ; if peg x bigger
00001474                           750      
00001474  9082                     751      sub.l   d2,d0
00001476  2800                     752      move.l  d0,d4               ;dx
00001478  4EF9 00001482            753      jmp     .CheckDx
0000147E                           754  
0000147E                           755  .SubBallXFromPegX:
0000147E                           756  
0000147E  9480                     757      sub.l   d0,d2
00001480  2802                     758      move.l  d2, d4              ;dx
00001482                           759  
00001482                           760  .CheckDx:
00001482                           761  
00001482  B8BC 0000002A            762      cmp.l   #(MIN_DX_TO_CHECK_COLLISION), d4
00001488  6E00 000A                763      bgt     .DidntCollide
0000148C                           764  
0000148C                           765      
0000148C                           766      ;if we're here. we check for collision
0000148C                           767      ;move.l d4,d0   ;dx
0000148C                           768      ;mulu.w     d4,d0   ;d0 = dx^2
0000148C                           769      ;move.l d5,d1   ;dy
0000148C                           770      ;mulu.w     d5,d1   ;d1 = dy^2
0000148C                           771  
0000148C                           772      ;add.l  d0, d1  ;d1 = dx^2 + dy^2
0000148C                           773  
0000148C                           774      ;lea    (Sqrts), a6
0000148C                           775      ;move.l (a6, d1), d0  ;d0 = sqrt(dx^2 + dy^2) with now byte swap
0000148C                           776      
0000148C                           777      ;jsr    SwapBytes       ;d0 bytes are swapped, so it has the correct sqrt
0000148C                           778  
0000148C                           779      ;lsr.l  #(FRACTION_BITS),d0
0000148C                           780  
0000148C                           781  
0000148C                           782      ;comnine radiuses
0000148C                           783      ;move.l     #(BALL_RADIUS), d1
0000148C                           784      ;add.l  #(PEG_RADIUS), d1
0000148C                           785  
0000148C                           786      ;cmp.l  d1, d0
0000148C                           787      ;bgt        .DidntCollide
0000148C                           788  
0000148C  7001                     789      move.l  #(TRUE), d0
0000148E                           790  
0000148E  4EF9 00001496            791      jmp     .CheckEnd
00001494                           792  
00001494                           793  
00001494                           794  .DidntCollide:
00001494                           795  
00001494  7000                     796      move.l  #(FALSE), d0
00001496                           797  
00001496                           798  .CheckEnd:
00001496                           799      ;movem.l    (sp)+, ALL_REG
00001496                           800  
00001496  4E75                     801      rts
00001498                           802  
00001498                           803  
00001498                           804  
00001498                           805  
00001498                           806  
00001498                           807  
00001498                           808  
00001498                           809  
00001498                           810  
00001498                           811  
00001498                           812  
00001498                           813  
00001498                           814  
00001498                           815  -------------------- end include --------------------
00001498                           816  
00001498                           817  
00001498                           818  
00001498                           819  ;bitmaps
00001498                           820  BackgroundBitmap    INCBIN "bg.bmp"
0015FB0E                           821  BallBitmap          INCBIN "ironBall.bmp"
00160E06                           822  
00160E06                           823  ;sqrts
00160E06                           824  Sqrts               INCBIN  "Sqrts.bin" 
00161DA6                           825  
00161DA6                           826  ;input
00161DA6= 00000000                 827  PlayerInput         dc.l    0 ;nothing
00161DAA                           828  
00161DAA                           829  ;frame rate
00161DAA= 00000000                 830  FrameBeginTime      dc.l    0
00161DAE                           831  
00161DAE                           832  ;ball variables
00161DAE= 00001096 00001098 ...    833  BallCalls           dc.l    EndBallUpdate, DropBall, MoveBallToLeft, MoveBallToRight
00161DBE= 00                       834  BallDropped         dc.b    (FALSE)
00161DBF= 00                       835  BallMoved           dc.b    (FALSE)
00161DC0= 00                       836  BallJustCollided    dc.b    (FALSE)
00161DC2= 000000E8                 837  BallXPosition       dc.l    (BALL_INITIAL_X_POS)     
00161DC6= 0000E800                 838  BallXPositionFixed  dc.l    (BALL_INITIAL_X_POS<<FRACTION_BITS)
00161DCA= 0000001E                 839  BallYPosition       dc.l    (BALL_INITIAL_Y_POS)     
00161DCE= 00001E00                 840  BallYPositionFixed  dc.l    (BALL_INITIAL_Y_POS<<FRACTION_BITS)
00161DD2= 00000000                 841  BallXVelocity       dc.l    (BALL_INIT_X_VELOCITY)
00161DD6= 00000000                 842  BallYVelocity       dc.l    (BALL_INIT_Y_VELOCITY)
00161DDA= 00000192 00000000        843  PegsXs              dc.l    402, 0
00161DE2= 000000E7 00000000        844  PegsYs              dc.l    231, 0
00161DEA                           845  
00161DEA                           846      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALL_REG             7FFF
BACKGROUNDBITMAP    1498
BALLBITMAP          15FB0E
BALLCALLS           161DAE
BALLDROPPED         161DBE
BALLDROPPING        1100
BALLDROPPING:CONTINUECHECKINGCOL  1156
BALLDROPPING:DONTMOVE  118A
BALLDROPPING:JUSTCOLLIDED  1130
BALLDROPPING:NOTCOLLIDING  1122
BALLDROPPING:SKIPBOUNCEOFFPEG  1156
BALLJUSTCOLLIDED    161DC0
BALLMOVED           161DBF
BALLXPOSITION       161DC2
BALLXPOSITIONFIXED  161DC6
BALLXVELOCITY       161DD2
BALLYPOSITION       161DCA
BALLYPOSITIONFIXED  161DCE
BALLYVELOCITY       161DD6
BALL_CENTER_X_POS   FC
BALL_CENTER_Y_POS   32
BALL_HEIGHT         28
BALL_INITIAL_X_POS  E8
BALL_INITIAL_Y_POS  1E
BALL_INIT_X_VELOCITY  0
BALL_INIT_Y_VELOCITY  0
BALL_OFFSET         28
BALL_RADIUS         14
BALL_SLIDE_VELOCITY  200
BALL_WIDTH          28
BALL_Y_ACCELERATION  10
BOARD_HEIGHT        1D5
BOARD_WIDTH         14E
BOTTOM_RIGHT_BOARD_X_POS  236
BOTTOM_RIGHT_BOARD_Y_POS  1F3
CHECKCOLLISION      1438
CHECKCOLLISION:CHECKDX  1482
CHECKCOLLISION:CHECKDY  1464
CHECKCOLLISION:CHECKEND  1496
CHECKCOLLISION:DIDNTCOLLIDE  1494
CHECKCOLLISION:SUBBALLXFROMPEGX  147E
CHECKCOLLISION:SUBBALLYFROMPEGY  1460
CHUNK_HEIGHT_STACK_OFFSET  4
CHUNK_WIDTH_STACK_OFFSET  8
CHUNK_X_POS_STACK_OFFSET  10
CHUNK_Y_POS_STACK_OFFSET  C
DOUBLE_BUFFERING_MODE  11
DRAWACHUNK          135C
DRAWALLBACKGROUND   1222
DRAWBACKGROUNDCHUNK  1230
DRAWBACKGROUNDCHUNK:DONTDRAW  1248
DRAWBALL            1258
DRAWBALL:DONTDRAW   1270
DRAWBALLFIRSTTIME   124A
DRAWCOLUMN          1390
DRAWEND             13E8
DRAWPIC             1308
DRAW_A_PIXEL_COMMAND  52
DRAW_X_POS_STACK_OFFSET  18
DRAW_Y_POS_STACK_OFFSET  14
DROPBALL            1098
DROPBALLINPUT       11F2
EIGHT_TENTH         CD
ENABLEDOUBLEBUFFER  13EA
ENDBALLUPDATE       1096
ENDHANDLEINPUT      11F0
FALSE               0
FIRST_PIXEL_ADDRESS_STACK_OFFSET  24
FRACTION_BITS       8
FRAMEBEGINTIME      161DAA
GAMELOOP            101E
GETFIRSTPIXELADDRESS  13F8
GETIMAGEHEIGHT      1420
GETIMAGEWIDTH       1410
GET_TIME_COMMAND    8
GREEN               FF00
HALF                80
HANDLEINPUT         11B0
IMAGE_HEIGHT_STACK_OFFSET  1C
IMAGE_WIDTH_STACK_OFFSET  20
INPUT_COMMAND       13
LEFT_ARROW          25
LEFT_ARROW_LOCATION  8
MAIN                1000
MIN_DX_TO_CHECK_COLLISION  2A
MIN_DY_TO_CHECK_COLLISION  2A
MOVEBALLTOLEFT      10A4
MOVEBALLTOLEFT:DONTMOVE  10CE
MOVEBALLTOLEFTINPUT  1200
MOVEBALLTORIGHT     10D2
MOVEBALLTORIGHT:DONTMOVE  10FC
MOVEBALLTORIGHTINPUT  1214
NEXTPIXEL           13BC
OFFSET_IMAGE_HEIGHT  16
OFFSET_IMAGE_WIDTH  12
OFFSET_TO_PIXEL_ARRAY  A
ONE_TENTH           1A
OUTPUT_WINDOW_HEIGHT  256
OUTPUT_WINDOW_WIDTH  320
PAINTSCREENBUFFER   13F2
PEGSXS              161DDA
PEGSYS              161DE2
PEG_HEIGHT          4
PEG_RADIUS          2
PEG_WIDTH           4
PLAYERINPUT         161DA6
REPAINT_SCREEN_COMMAND  5E
RIGHT_ARROW         27
RIGHT_ARROW_LOCATION  0
SETBALLDRAWPARAMS   12CC
SETBGDRAWPARAMS     129A
SETFIRSTDRAWPARAMS  1272
SETFRAMEBEGINTIME   118E
SETOUTPUTWINDOW     1050
SET_DRAWING_MODE_COMMAND  5C
SET_OUTPUT_WINDOW_COMMAND  21
SET_PEN_COLOR_COMMAND  50
SPACE_KEY           20
SPACE_KEY_LOCATION  10
SQRTS               160E06
STACK_OFFSET_WHEN_DRAWING  28
START               1000
SWAPBYTES           1430
TIME_PER_FRAME      1
TOP_LEFT_BOARD_X_POS  E8
TOP_LEFT_BOARD_Y_POS  1E
TRUE                1
TWO_TENTH           33
UPDATEBALLPOSITION  1062
WAITTOENDFRAME      119A
WAITTOENDFRAME:LOOPAGAIN  11A0
