00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 10/13/2016 2:34:26 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Pachinko Game
00000000                             3  * Written by : Aissa Ben Zayed
00000000                             4  * Date       : 10-7-2016
00000000                             5  * Description: 
00000000                             6  *
00000000                             7  *-----------------------------------------------------------
00000000                             8  
00000000                             9  *
00000000                            10  
00001000                            11  START  ORG    $1000
00001000                            12  
00001000                            13      include "equates.X68"
00001000                            14  
00001000                            15  ALL_REG                     REG d0-d7/a0-a6
00001000                            16  
00001000  =00000001                 17  TRUE                        EQU 1
00001000  =00000000                 18  FALSE                       EQU 0
00001000                            19  
00001000  =0000FF00                 20  GREEN                       EQU $00FF00
00001000                            21  
00001000                            22  ;math
00001000  =00000008                 23  FRACTION_BITS               EQU 8
00001000  =0000001A                 24  ONE_TENTH                   EQU 26
00001000  =00000033                 25  TWO_TENTH                   EQU 51
00001000  =000000CD                 26  EIGHT_TENTH                 EQU 205
00001000  =00000080                 27  HALF                        EQU 128
00001000                            28  
00001000                            29  ;output window
00001000  =0000042F                 30  OUTPUT_WINDOW_WIDTH         EQU 1071        ;the output screen width in pixels
00001000  =00000320                 31  OUTPUT_WINDOW_HEIGHT        EQU 800         ;the output screen height in pixels
00001000                            32  
00001000                            33  ;pachinko board dimesions and key points
00001000  =00000139                 34  TOP_LEFT_BOARD_X_POS        EQU 313
00001000  =0000002A                 35  TOP_LEFT_BOARD_Y_POS        EQU 42
00001000  =000002F5                 36  BOTTOM_RIGHT_BOARD_X_POS    EQU 757
00001000  =0000029A                 37  BOTTOM_RIGHT_BOARD_Y_POS    EQU 666
00001000  =000001BC                 38  BOARD_WIDTH                 EQU (BOTTOM_RIGHT_BOARD_X_POS-TOP_LEFT_BOARD_X_POS)
00001000  =00000270                 39  BOARD_HEIGHT                EQU (BOTTOM_RIGHT_BOARD_Y_POS-TOP_LEFT_BOARD_Y_POS)
00001000                            40  
00001000                            41  ;ball
00001000  =0000001E                 42  BALL_WIDTH                  EQU 30
00001000  =0000001E                 43  BALL_HEIGHT                 EQU 30
00001000  =0000000F                 44  BALL_RADIUS                 EQU 15
00001000                            45  ;BALL_OFFSET                    EQU 30
00001000  =00000139                 46  BALL_INITIAL_X_POS          EQU TOP_LEFT_BOARD_X_POS
00001000  =0000002A                 47  BALL_INITIAL_Y_POS          EQU TOP_LEFT_BOARD_Y_POS
00001000                            48  ;BALL_CENTER_X_POS          EQU (BALL_INITIAL_X_POS+(BALL_WIDTH/2))
00001000                            49  ;BALL_CENTER_Y_POS          EQU (BALL_INITIAL_Y_POS+(BALL_HEIGHT/2))
00001000                            50  
00001000                            51  
00001000  =00000250                 52  BALL_SLIDE_VELOCITY         EQU $250
00001000                            53  
00001000  =00000015                 54  BALL_Y_ACCELERATION         EQU $15
00001000                            55  
00001000  =00000000                 56  BALL_INIT_X_VELOCITY        EQU 0      ;****************************** make random between -2,2***************************************************************
00001000  =00000000                 57  BALL_INIT_Y_VELOCITY        EQU 0
00001000                            58  
00001000                            59  
00001000                            60  ;pegs
00001000  =0000000E                 61  PEG_WIDTH                   EQU 14
00001000  =0000000E                 62  PEG_HEIGHT                  EQU 14
00001000  =00000007                 63  PEG_RADIUS                  EQU 7
00001000                            64  
00001000                            65  
00001000                            66  ;collision
00001000  =00000018                 67  MIN_DX_TO_CHECK_COLLISION   EQU 2+(BALL_RADIUS+PEG_RADIUS)
00001000  =00000018                 68  MIN_DY_TO_CHECK_COLLISION   EQU 2+(BALL_RADIUS+PEG_RADIUS)
00001000                            69  
00001000                            70  
00001000                            71  ;commands
00001000  =00000008                 72  GET_TIME_COMMAND            EQU 8       ;get current time trap code
00001000  =00000013                 73  INPUT_COMMAND               EQU 19      ;get input keys    
00001000  =00000021                 74  SET_OUTPUT_WINDOW_COMMAND   EQU 33      ;set output trap code
00001000  =00000050                 75  SET_PEN_COLOR_COMMAND       EQU 80      ;set pen color trap code
00001000  =00000052                 76  DRAW_A_PIXEL_COMMAND        EQU 82      ;draw pixel trap code
00001000  =0000005C                 77  SET_DRAWING_MODE_COMMAND    EQU 92      ;set drawing mode used for enabeling double buffering
00001000  =0000005E                 78  REPAINT_SCREEN_COMMAND      EQU 94      ;repaints screen command from a buffer
00001000                            79  
00001000  =00000011                 80  DOUBLE_BUFFERING_MODE       EQU 17      ;double buffering mode option
00001000                            81  
00001000                            82  ;offsets in the bitmap
00001000  =0000000A                 83  OFFSET_TO_PIXEL_ARRAY       EQU $0A      ;the offset to the address containing the pixel array starting byte
00001000  =00000012                 84  OFFSET_IMAGE_WIDTH          EQU $12      ;the offset to the address containing the image width
00001000  =00000016                 85  OFFSET_IMAGE_HEIGHT         EQU $16      ;the offset to the address containing the image height
00001000                            86  
00001000                            87  
00001000                            88  ;Stack pointers for drawing chunks
00001000  =00000024                 89  FIRST_PIXEL_ADDRESS_STACK_OFFSET    EQU 36
00001000  =00000020                 90  IMAGE_WIDTH_STACK_OFFSET            EQU 32
00001000  =0000001C                 91  IMAGE_HEIGHT_STACK_OFFSET           EQU 28
00001000  =00000018                 92  DRAW_X_POS_STACK_OFFSET             EQU 24
00001000  =00000014                 93  DRAW_Y_POS_STACK_OFFSET             EQU 20
00001000  =00000010                 94  CHUNK_X_POS_STACK_OFFSET            EQU 16
00001000  =0000000C                 95  CHUNK_Y_POS_STACK_OFFSET            EQU 12
00001000  =00000008                 96  CHUNK_WIDTH_STACK_OFFSET            EQU 8
00001000  =00000004                 97  CHUNK_HEIGHT_STACK_OFFSET           EQU 4
00001000  =00000028                 98  STACK_OFFSET_WHEN_DRAWING           EQU FIRST_PIXEL_ADDRESS_STACK_OFFSET+CHUNK_HEIGHT_STACK_OFFSET
00001000                            99  
00001000                           100  
00001000                           101  ;input keycodes
00001000  =00000020                102  SPACE_KEY   EQU $20
00001000  =00000025                103  LEFT_ARROW  EQU $25
00001000  =00000027                104  RIGHT_ARROW EQU $27
00001000                           105  
00001000                           106  ;input location of keycode in d1
00001000  =00000010                107  SPACE_KEY_LOCATION   EQU 16
00001000  =00000008                108  LEFT_ARROW_LOCATION  EQU 8
00001000  =00000000                109  RIGHT_ARROW_LOCATION EQU 0
00001000                           110  
00001000                           111  ;frame rate
00001000  =00000001                112  TIME_PER_FRAME       EQU 1
00001000                           113  
00001000                           114  
00001000                           115  
00001000                           116  
00001000                           117  
00001000                           118  
00001000                           119  
00001000                           120  
00001000                           121  -------------------- end include --------------------
00001000                           122  
00001000                           123  Main:
00001000                           124      
00001000  4EB9 00001050            125      jsr SetOutputWindow 
00001006  4EB9 0000141C            126      jsr EnableDoubleBuffer
0000100C  4EB9 0000125A            127      jsr DrawAllBackground
00001012  4EB9 00001282            128      jsr DrawBallFirstTime
00001018  4EB9 00001424            129      jsr PaintScreenBuffer
0000101E                           130      
0000101E                           131  GameLoop:
0000101E                           132      
0000101E  4EB9 000011C6            133      jsr SetFrameBeginTime
00001024                           134  
00001024  4EB9 000011E8            135      jsr HandleInput
0000102A                           136      
0000102A  4EB9 00001062            137      jsr UpdateBallPosition
00001030                           138  
00001030  4EB9 00001268            139      jsr DrawBackgroundChunk
00001036  4EB9 00001290            140      jsr DrawBall
0000103C                           141  
0000103C  4EB9 000011D2            142      jsr WaitToEndFrame
00001042                           143      
00001042  4EB9 00001424            144      jsr PaintScreenBuffer
00001048                           145  
00001048  4EF8 101E                146      jmp GameLoop          
0000104C                           147      
0000104C  4E72 3000                148      STOP    #$3000                     
00001050                           149  
00001050                           150  SetOutputWindow:
00001050                           151  
00001050                           152      ;set the output window dimensions
00001050  7021                     153      move.l  #SET_OUTPUT_WINDOW_COMMAND, d0
00001052  223C 0000042F            154      move.l  #OUTPUT_WINDOW_WIDTH, d1
00001058  4841                     155      swap.w  d1
0000105A  323C 0320                156      move.w  #OUTPUT_WINDOW_HEIGHT, d1
0000105E  4E4F                     157      Trap    #15
00001060                           158  
00001060  4E75                     159      rts
00001062                           160  
00001062                           161      
00001062                           162  
00001062                           163  UpdateBallPosition:
00001062                           164  
00001062                           165      ;initialize ball moved to false
00001062  13FC 0000 002A7083       166      move.b  #(FALSE), (BallMoved)
0000106A                           167  
0000106A                           168      ;see if the ball is already dropped
0000106A  0C39 0001 002A7082       169      cmp.b   #(TRUE), (BallDropped)
00001072  6700 008C                170      beq     BallDropping
00001076                           171      
00001076                           172      ;depending on user input, call drop or Move
00001076  2039 002A706A            173      move.l  (PlayerInput), d0
0000107C  E588                     174      lsl.l   #2,d0
0000107E  43F9 002A7072            175      lea BallCalls, a1
00001084  2231 0000                176      move.l  (a1, d0),d1
00001088                           177      
00001088                           178      ;avoid null calls
00001088  0C81 00000000            179      cmpi.l  #0, d1
0000108E  6700 0006                180      beq     EndBallUpdate
00001092                           181      
00001092  2441                     182      move.l  d1,a2
00001094  4ED2                     183      jmp     (a2)
00001096                           184  
00001096                           185  EndBallUpdate:
00001096                           186      
00001096  4E75                     187      rts
00001098                           188  
00001098                           189  DropBall:
00001098                           190  
00001098                           191      ;add drop ball code
00001098                           192      
00001098  13FC 0001 002A7082       193      move.b  #(TRUE), (BallDropped)
000010A0                           194  
000010A0  4EF8 1096                195      jmp     EndBallUpdate
000010A4                           196  
000010A4                           197  MoveBallToLeft:
000010A4                           198  
000010A4                           199      ;cmp.b   #(TRUE), (BallDropped)
000010A4                           200      ;beq     EndBallUpdate                ; change this after making the game work
000010A4                           201  
000010A4                           202      ;check if in bounds
000010A4  0CB9 00000139 002A7086   203      cmp.l   #(TOP_LEFT_BOARD_X_POS), (BallXPosition)
000010AE  6F00 001E                204      ble     .DontMove
000010B2                           205  
000010B2  2039 002A7086            206      move.l  (BallXPosition),d0
000010B8  E188                     207      lsl.l   #8,d0
000010BA                           208  
000010BA  0480 00000250            209      sub.l   #(BALL_SLIDE_VELOCITY), d0
000010C0  23C0 002A708A            210      move.l  d0, (BallXPositionFixed)
000010C6                           211  
000010C6                           212      ;ball moved
000010C6  13FC 0001 002A7083       213      move.b  #(TRUE), (BallMoved)
000010CE                           214  
000010CE                           215  .DontMove:
000010CE                           216  
000010CE  4EF8 1096                217      jmp     EndBallUpdate
000010D2                           218  
000010D2                           219  MoveBallToRight:
000010D2                           220  
000010D2                           221      ;cmp.b   #(TRUE), (BallDropped)
000010D2                           222      ;beq     EndBallUpdate                ; change this after making the game work
000010D2                           223  
000010D2                           224      ;check if in bounds
000010D2  0CB9 000002D7 002A7086   225      cmp.l   #(BOTTOM_RIGHT_BOARD_X_POS-BALL_WIDTH), (BallXPosition)
000010DC  6C00 001E                226      bge     .DontMove
000010E0                           227  
000010E0  2039 002A7086            228      move.l  (BallXPosition),d0
000010E6  E188                     229      lsl.l   #8,d0
000010E8                           230      
000010E8  0680 00000250            231      add.l   #(BALL_SLIDE_VELOCITY), d0
000010EE  23C0 002A708A            232      move.l  d0, (BallXPositionFixed)
000010F4                           233  
000010F4                           234      ;ball moved
000010F4  13FC 0001 002A7083       235      move.b  #(TRUE), (BallMoved)
000010FC                           236  
000010FC                           237  .DontMove:
000010FC                           238  
000010FC  4EF8 1096                239      jmp     EndBallUpdate
00001100                           240  
00001100                           241  
00001100                           242  BallDropping:
00001100                           243  
00001100  4EB9 0000146A            244      jsr     CheckWallCollision
00001106  B0BC 00000001            245      cmp.l   #(TRUE), d0
0000110C  6600 0014                246      bne     .MoveOnToPegs 
00001110                           247  
00001110  0C39 0001 002A7084       248      cmp.b   #(TRUE), (BallJustCollided)
00001118  6600 0038                249      bne     .JustWallCollided
0000111C                           250  
0000111C  4EF9 0000117A            251      jmp     .ContinueBallUpdate
00001122                           252  
00001122                           253  
00001122                           254  .MoveOnToPegs:
00001122                           255      ;check collisions with pegs here *************************************
00001122  4EB9 00001492            256      jsr     CheckPegCollision
00001128  B0BC 00000001            257      cmp.l   #(TRUE), d0
0000112E  6600 0014                258      bne     .NotColliding
00001132                           259  
00001132                           260      ;check if it just collided
00001132  0C39 0001 002A7084       261      cmp.b   #(TRUE), (BallJustCollided)
0000113A  6600 002A                262      bne     .JustPegCollided
0000113E                           263  
0000113E  4EF9 0000117A            264      jmp     .ContinueBallUpdate
00001144                           265  
00001144                           266  .NotColliding:
00001144                           267  
00001144  13FC 0000 002A7084       268      move.b  #(FALSE), (BallJustCollided)
0000114C  4EF9 0000117A            269      jmp     .ContinueBallUpdate
00001152                           270  
00001152                           271  .JustWallCollided:  
00001152                           272  
00001152                           273      ;bounce
00001152  4EB9 00001524            274      jsr BounceBallOffWall
00001158                           275  
00001158  13FC 0001 002A7084       276      move.b  #(TRUE), (BallJustCollided)
00001160  4EF9 000011C2            277      jmp     .DontMove
00001166                           278  
00001166                           279  .JustPegCollided:   
00001166                           280  
00001166                           281      ;bounce
00001166  4EB9 0000153A            282      jsr BounceBallOffPeg
0000116C                           283  
0000116C  13FC 0001 002A7084       284      move.b  #(TRUE), (BallJustCollided)
00001174  4EF9 000011C2            285      jmp     .DontMove
0000117A                           286  
0000117A                           287  .ContinueBallUpdate:
0000117A                           288  .SkipBounceOffPeg:
0000117A                           289  
0000117A  0CB9 0000027C 002A708E   290      cmp.l   #(BOTTOM_RIGHT_BOARD_Y_POS-BALL_HEIGHT), (BallYPosition)
00001184  6C00 003C                291      bge     .DontMove ;reached destination, do something ***********************************
00001188                           292  
00001188                           293      ;update x pos
00001188  2039 002A7086            294      move.l  (BallXPosition),d0
0000118E  E188                     295      lsl.l   #8,d0
00001190                           296      
00001190  D0B9 002A7096            297      add.l   (BallXVelocity), d0
00001196  23C0 002A708A            298      move.l  d0, (BallXPositionFixed)
0000119C                           299  
0000119C                           300  
0000119C                           301      ;update Y vel
0000119C  06B9 00000015 002A709A   302      add.l   #(BALL_Y_ACCELERATION), (BallYVelocity)
000011A6                           303  
000011A6                           304      ;add the velocity to the y pos
000011A6  2039 002A708E            305      move.l  (BallYPosition),d0
000011AC  E188                     306      lsl.l   #8,d0
000011AE                           307      
000011AE  D0B9 002A709A            308      add.l   (BallYVelocity), d0
000011B4  23C0 002A7092            309      move.l  d0, (BallYPositionFixed)
000011BA                           310  
000011BA  13FC 0001 002A7083       311      move.b  #(TRUE), BallMoved
000011C2                           312  
000011C2                           313  
000011C2                           314  .DontMove:
000011C2                           315  
000011C2  4EF8 1096                316      jmp     EndBallUpdate
000011C6                           317  
000011C6                           318  
000011C6                           319  
000011C6                           320  SetFrameBeginTime:
000011C6                           321  
000011C6                           322      ;get current time
000011C6  7008                     323      move.l  #(GET_TIME_COMMAND), d0
000011C8  4E4F                     324      Trap    #15
000011CA                           325      ;set FrameBeginTime
000011CA  23C1 002A706E            326      move.l  d1, (FrameBeginTime)
000011D0                           327  
000011D0  4E75                     328      rts
000011D2                           329  
000011D2                           330  
000011D2                           331  WaitToEndFrame:
000011D2                           332  
000011D2  2439 002A706E            333      move.l  (FrameBeginTime),d2
000011D8                           334  
000011D8                           335  .LoopAgain:
000011D8                           336      ;get current time
000011D8  7008                     337      move.l  #(GET_TIME_COMMAND), d0
000011DA  4E4F                     338      Trap    #15
000011DC                           339      
000011DC                           340      ;get DeltaTime in d1
000011DC  9282                     341      sub.l   d2,d1
000011DE                           342  
000011DE  B2BC 00000001            343      cmp.l   #(TIME_PER_FRAME), d1
000011E4  6DF2                     344      blt     .LoopAgain
000011E6                           345  
000011E6  4E75                     346      rts
000011E8                           347  
000011E8                           348  
000011E8                           349  
000011E8                           350  
000011E8                           351      include "InputHandler.x68"
000011E8                           352  
000011E8                           353  
000011E8                           354  HandleInput:  
000011E8                           355  
000011E8                           356      ;reset PlayerInput
000011E8  23FC 00000000 002A706A   357      move.l  #0,(PlayerInput)
000011F2                           358      ;Set the inputs    
000011F2  7013                     359      move.l  #(INPUT_COMMAND),d0
000011F4                           360      ;d1: $00202527 => space, left arrow, right arrow
000011F4                           361      ;move.l  $20<<$16+$25<<$8+$27,d1
000011F4  7220                     362      move.l  #(SPACE_KEY),d1
000011F6  E189                     363      lsl.l   #8,d1
000011F8  123C 0025                364      move.b  #(LEFT_ARROW),d1
000011FC  E189                     365      lsl.l   #8,d1
000011FE  123C 0027                366      move.b  #(RIGHT_ARROW),d1
00001202                           367  
00001202  4E4F                     368      Trap    #15
00001204                           369  
00001204                           370      ;check if ball is droped, if yes skip
00001204  0C39 0001 002A7082       371      cmpi.b  #(TRUE),(BallDropped)
0000120C  6700 001A                372      beq     EndHandleInput
00001210                           373  
00001210                           374      ;check the pressed key and call subroutines accordingly
00001210  0801 0010                375      btst.l  #(SPACE_KEY_LOCATION), d1       
00001214  6600 0014                376      bne     DropBallInput
00001218                           377  
00001218  0801 0008                378      btst.l  #(LEFT_ARROW_LOCATION), d1       
0000121C  6600 001A                379      bne     MoveBallToLeftInput
00001220                           380  
00001220  0801 0000                381      btst.l  #(RIGHT_ARROW_LOCATION), d1       
00001224  6600 0026                382      bne     MoveBallToRightInput
00001228                           383  
00001228                           384  EndHandleInput:
00001228                           385  
00001228  4E75                     386      rts
0000122A                           387  
0000122A                           388  DropBallInput:
0000122A                           389  
0000122A  23FC 00000001 002A706A   390      move.l #1,(PlayerInput)
00001234                           391  
00001234  4EF8 1228                392      jmp EndHandleInput
00001238                           393  
00001238                           394  MoveBallToLeftInput:
00001238                           395      
00001238                           396      ;if both arrows are pressed, do nothing
00001238  0801 0000                397      btst.l  #(RIGHT_ARROW_LOCATION), d1       
0000123C  66EA                     398      bne     EndHandleInput
0000123E                           399  
0000123E  23FC 00000002 002A706A   400      move.l #2,(PlayerInput)
00001248                           401  
00001248  4EF8 1228                402      jmp     EndHandleInput
0000124C                           403  
0000124C                           404  MoveBallToRightInput:
0000124C                           405      
0000124C  23FC 00000003 002A706A   406      move.l #3,(PlayerInput)  
00001256                           407  
00001256  4EF8 1228                408      jmp     EndHandleInput
0000125A                           409    
0000125A                           410  -------------------- end include --------------------
0000125A                           411      include "drawingModule.X68"
0000125A                           412  ; this module contains drawing related subroutines
0000125A                           413  
0000125A                           414  DrawAllBackground:
0000125A                           415      
0000125A                           416      ;a0 has the address to the bitmap
0000125A  4EB9 000012AA            417      jsr SetFirstDrawParams
00001260  4EB9 0000133A            418      jsr DrawPic
00001266                           419  
00001266  4E75                     420      rts
00001268                           421  
00001268                           422  DrawBackgroundChunk:
00001268                           423      
00001268  0C39 0000 002A7083       424      cmp.b #(FALSE),(BallMoved)
00001270  6700 000E                425      beq .DontDraw
00001274                           426      
00001274  4EB9 000012D2            427      jsr SetBgDrawParams
0000127A  4EB9 0000133A            428      jsr DrawPic
00001280                           429  
00001280                           430  .DontDraw:
00001280  4E75                     431      rts
00001282                           432  
00001282                           433  DrawBallFirstTime:
00001282                           434  
00001282  13FC 0001 002A7083       435      move.b  #(TRUE), (BallMoved)
0000128A                           436  
0000128A  4EF9 00001290            437      jmp     DrawBall
00001290                           438  
00001290                           439  DrawBall:
00001290                           440  
00001290  0C39 0000 002A7083       441      cmp.b #(FALSE),(BallMoved)
00001298  6700 000E                442      beq .DontDraw
0000129C                           443  
0000129C  4EB9 00001304            444      jsr SetBallDrawParams
000012A2  4EB9 0000133A            445      jsr DrawPic
000012A8                           446  
000012A8                           447  .DontDraw:
000012A8  4E75                     448      rts
000012AA                           449  
000012AA                           450  
000012AA                           451  SetFirstDrawParams:
000012AA                           452  
000012AA  41F9 000015F4            453      lea BackgroundBitmap, a0
000012B0                           454  
000012B0                           455      ;set draw start position to 0,0    
000012B0  223C 00000320            456      move.l  #(OUTPUT_WINDOW_HEIGHT),d1  ;y
000012B6  4841                     457      swap    d1
000012B8  323C 0000                458      move.w  #0,d1                       ;x
000012BC                           459      
000012BC                           460      ;set chunk start position to 0,0    
000012BC  7400                     461      move.l  #0,d2                       ;y
000012BE  4842                     462      swap    d2
000012C0  343C 0000                463      move.w  #0,d2                       ;x
000012C4                           464      
000012C4                           465      ;set chunk width and height to the screen resol
000012C4  263C 0000042F            466      move.l  #(OUTPUT_WINDOW_WIDTH),d3
000012CA  4843                     467      swap    d3
000012CC  363C 0320                468      move.w  #(OUTPUT_WINDOW_HEIGHT),d3
000012D0                           469      
000012D0  4E75                     470      rts
000012D2                           471  
000012D2                           472  SetBgDrawParams:
000012D2                           473  
000012D2  41F9 000015F4            474      lea BackgroundBitmap, a0
000012D8                           475  
000012D8                           476      ;set draw start position   
000012D8  2239 002A708E            477      move.l  (BallYPosition),d1           
000012DE  0681 0000001E            478      add.l   #(BALL_HEIGHT),d1               ;y
000012E4  4841                     479      swap    d1
000012E6  D2B9 002A7086            480      add.l   (BallXPosition),d1              ;x
000012EC                           481      ;sub.l   #(BALL_OFFSET),d1
000012EC                           482      
000012EC                           483      ;set chunk start position
000012EC  2439 002A708E            484      move.l  (BallYPosition),d2              ;y          
000012F2  4842                     485      swap    d2
000012F4  D4B9 002A7086            486      add.l  (BallXPosition),d2              ;x
000012FA                           487      
000012FA                           488      ;set chunk width and height
000012FA  761E                     489      move.l  #(BALL_WIDTH),d3                ;add offset maybe
000012FC  4843                     490      swap    d3
000012FE  363C 001E                491      move.w  #(BALL_HEIGHT),d3               ;add offset maybe
00001302                           492      
00001302  4E75                     493      rts
00001304                           494  
00001304                           495  SetBallDrawParams:
00001304                           496  
00001304  41F9 0027582A            497      lea BallBitmap, a0
0000130A                           498  
0000130A                           499      ;set draw start position   
0000130A  721E                     500      move.l  #(BALL_HEIGHT),d1
0000130C  2E39 002A7092            501      move.l  (BallYPositionFixed),d7
00001312  E08F                     502      lsr.l   #(FRACTION_BITS),d7
00001314  D287                     503      add.l   d7,d1
00001316                           504      ;update the y position
00001316  23C7 002A708E            505      move.l  d7, (BallYPosition)
0000131C                           506            
0000131C  4841                     507      swap    d1
0000131E                           508  
0000131E  2E39 002A708A            509      move.l  (BallXPositionFixed),d7
00001324  E08F                     510      lsr.l   #(FRACTION_BITS),d7
00001326  3207                     511      move.w  d7, d1
00001328                           512      ;update the x position
00001328  23C7 002A7086            513      move.l  d7, (BallXPosition)
0000132E                           514  
0000132E                           515      
0000132E                           516      ;set chunk start position
0000132E  7400                     517      move.l  #0,d2 
00001330                           518      
00001330                           519      ;set chunk width and height
00001330  761E                     520      move.l  #(BALL_WIDTH),d3
00001332  4843                     521      swap    d3
00001334  363C 001E                522      move.w  #(BALL_HEIGHT),d3
00001338                           523      
00001338  4E75                     524      rts
0000133A                           525  
0000133A                           526       
0000133A                           527  DrawPic:
0000133A                           528      ;push the first pixel pos
0000133A  2C48                     529      move.l  a0, a6
0000133C  4EB9 0000142A            530      jsr GetFirstPixelAddress
00001342  2F0E                     531      move.l  a6, -(sp)                               
00001344                           532      
00001344                           533      ;push image width
00001344  2C48                     534      move.l  a0, a6
00001346  4EB9 00001442            535      jsr GetImageWidth
0000134C  2F00                     536      move.l  d0,-(sp)
0000134E                           537      
0000134E                           538      ;push image height
0000134E  2C48                     539      move.l  a0, a6
00001350  4EB9 00001452            540      jsr GetImageHeight
00001356  2F00                     541      move.l  d0,-(sp)
00001358                           542  
00001358                           543      ;push the draw start pos
00001358  4284                     544      clr.l   d4
0000135A  3801                     545      move.w  d1, d4
0000135C  2F04                     546      move.l  d4,-(sp)    ;push x
0000135E  4841                     547      swap    d1
00001360  3801                     548      move.w  d1,d4
00001362  2F04                     549      move.l  d4,-(sp)    ;push y
00001364                           550      
00001364                           551      ;push the chunk start pos
00001364  3802                     552      move.w  d2,d4
00001366  2F04                     553      move.l  d4,-(sp)    ;push x
00001368                           554      ;convert the y pos of chunk to bitmap coor
00001368  4842                     555      swap    d2
0000136A  3802                     556      move.w  d2,d4
0000136C  D843                     557      add.w   d3,d4           ;add chunk height
0000136E                           558      ;d0 have the image height
0000136E  2200                     559      move.l  d0,d1 
00001370  9284                     560      sub.l   d4,d1
00001372  2F01                     561      move.l  d1, -(sp)   ;push y
00001374                           562      
00001374                           563      ;push the chunk dimensions
00001374  4843                     564      swap    d3
00001376  3803                     565      move.w  d3, d4  
00001378  2F04                     566      move.l  d4,-(sp)    ;push width
0000137A  4843                     567      swap    d3
0000137C  3803                     568      move.w  d3, d4
0000137E  2F04                     569      move.l  d4,-(sp)    ;push height
00001380                           570   
00001380  4EB9 0000138E            571      jsr DrawAChunk
00001386                           572      
00001386                           573      ;reinit the stack pointer
00001386  DFFC 00000028            574      add.l   #(STACK_OFFSET_WHEN_DRAWING),sp
0000138C  4E75                     575      rts                
0000138E                           576      
0000138E                           577  DrawAChunk:
0000138E                           578      
0000138E  2E2F 0020                579      move.l  IMAGE_WIDTH_STACK_OFFSET(sp),d7                 ;get the image width into d7
00001392  0287 00000003            580      andi.l  #3,d7                                           ;get the rest of division by 4, which is the padding     
00001398                           581      
00001398  286F 0024                582      move.l  FIRST_PIXEL_ADDRESS_STACK_OFFSET(sp),a4         ;a4 points to the first pixel
0000139C                           583      
0000139C  222F 0020                584      move.l  IMAGE_WIDTH_STACK_OFFSET(sp),d1                 ;image width into d1
000013A0  2401                     585      move.l  d1, d2                                          ;temp value to avoid mul
000013A2  D282                     586      add.l   d2, d1
000013A4  D282                     587      add.l   d2, d1                                          ;get the width number of bytes
000013A6  DE81                     588      add.l   d1,d7                                           ;width bytes
000013A8                           589      
000013A8  2407                     590      move.l  d7, d2                                          ;store width bytes into d2
000013AA                           591      
000013AA  222F 000C                592      move.l  CHUNK_Y_POS_STACK_OFFSET(sp),d1                 ;get the chunk y pos
000013AE  C4C1                     593      mulu.w  d1,d2                                           ;mutiply the y with the width bytes to get the y bytes offset
000013B0                           594      
000013B0  202F 0010                595      move.l  CHUNK_X_POS_STACK_OFFSET(sp),d0                 ;put chunk x start pos into d0
000013B4  2200                     596      move.l  d0, d1                                          ;temp value to avoid mul
000013B6  D081                     597      add.l   d1, d0
000013B8  D081                     598      add.l   d1, d0                                          ;get the x number of bytes
000013BA                           599      
000013BA  D480                     600      add.l   d0,d2                                           ;add the x bytes to the y bytes offset to have the total offset
000013BC                           601      
000013BC  D9C2                     602      add.l   d2, a4                                          ;add the offset to get the new first position
000013BE                           603      
000013BE  7A00                     604      move.l  #0, d5                                          ;x counter
000013C0  7C00                     605      move.l  #0, d6                                          ;y counter
000013C2                           606      
000013C2                           607      
000013C2                           608  DrawColumn:
000013C2                           609      ;set pen color
000013C2  4281                     610      clr.l d1
000013C4  121C                     611      move.b   (a4)+,d1                                       ;set blue
000013C6  E189                     612      lsl.l   #8,d1                                           ;shift the byte to the left
000013C8  121C                     613      move.b  (a4)+,d1                                        ;set green
000013CA  E189                     614      lsl.l   #8,d1                                           ;shift the byte to the left
000013CC  121C                     615      move.b  (a4)+,d1                                        ;set red    => d1 has 00BBGGRR
000013CE                           616      
000013CE                           617      ;if green, skip that pixel
000013CE  B2BC 0000FF00            618      cmp.l   #(GREEN),d1
000013D4  6700 0018                619      beq     NextPixel
000013D8                           620      
000013D8  7050                     621      move.l  #SET_PEN_COLOR_COMMAND, d0
000013DA  4E4F                     622      Trap #15
000013DC                           623      
000013DC                           624      ;draw a pixel
000013DC                           625      ;set x in d1 and y in d2
000013DC  4281                     626      clr.l   d1
000013DE  222F 0018                627      move.l  DRAW_X_POS_STACK_OFFSET(sp),d1                                               
000013E2  D285                     628      add.l   d5,d1                                           ;set x position on screen
000013E4                           629      
000013E4  242F 0014                630      move.l  DRAW_Y_POS_STACK_OFFSET(sp),d2
000013E8  9486                     631      sub.l   d6,d2                                           ;set the y position on screen
000013EA                           632      
000013EA  7052                     633      move.l  #DRAW_A_PIXEL_COMMAND, d0
000013EC  4E4F                     634      Trap #15
000013EE                           635  
000013EE                           636  NextPixel:    
000013EE  5285                     637      addi.l  #1, d5                                          ;increment x counter
000013F0  202F 0008                638      move.l  CHUNK_WIDTH_STACK_OFFSET(sp),d0
000013F4  BA80                     639      cmp.l  d0,d5
000013F6  66CA                     640      bne DrawColumn                                          ;if not done with the column, continue drawing
000013F8                           641      
000013F8  5286                     642      addi.l  #1, d6                                          ;increment y counter
000013FA  202F 0004                643      move.l  CHUNK_HEIGHT_STACK_OFFSET(sp),d0
000013FE  BC80                     644      cmp.l   d0,d6
00001400  6700 0018                645      beq     DrawEnd                                         ;if done with the rows, then stop drawing
00001404                           646      
00001404  7A00                     647      move.l  #0, d5                                          ;reset x counter
00001406  222F 0008                648      move.l  CHUNK_WIDTH_STACK_OFFSET(sp),d1                 ;put chunk width in d1
0000140A  2001                     649      move.l  d1, d0                                          ;d0 has the temp to avoid mul
0000140C  D280                     650      add.l   d0, d1
0000140E  D280                     651      add.l   d0, d1                                          ;multiply it by 3 to get the bytes number
00001410                           652      
00001410  2007                     653      move.l  d7, d0                                          ;d0 = width bytes
00001412  9081                     654      sub.l   d1,d0                                           ;sub the chunk bytes from the width bytes
00001414  D9C0                     655      add.l   d0, a4                                          ;and then add it to a4 to get the next pixel
00001416                           656      
00001416  4EF8 13C2                657      jmp DrawColumn                                          ;draw next column
0000141A                           658  
0000141A                           659  DrawEnd:
0000141A                           660  
0000141A  4E75                     661      rts
0000141C                           662  
0000141C                           663  
0000141C                           664  EnableDoubleBuffer:
0000141C                           665      ;double buffering mode enabled
0000141C  705C                     666      move.l  #SET_DRAWING_MODE_COMMAND, d0
0000141E  7211                     667      move.l  #DOUBLE_BUFFERING_MODE, d1
00001420  4E4F                     668      Trap    #15
00001422                           669  
00001422  4E75                     670      rts
00001424                           671  
00001424                           672  PaintScreenBuffer:
00001424                           673      ;repaint screen from buffer
00001424  705E                     674      move.l  #REPAINT_SCREEN_COMMAND, d0
00001426  4E4F                     675      Trap    #15
00001428                           676          
00001428  4E75                     677      rts    
0000142A                           678  
0000142A                           679  ;param a6:image address
0000142A                           680  GetFirstPixelAddress:
0000142A  DDFC 0000000A            681      add.l   #(OFFSET_TO_PIXEL_ARRAY),a6                     ;a6 has the pixel offset address
00001430  2016                     682      move.l  (a6),d0                                         ;put it in d0
00001432  4EB9 00001462            683      jsr SwapBytes                                           ;swap to get the right value
00001438  DDC0                     684      add.l   d0,a6                                           ;a6 has the 0, h-1 pixel address
0000143A  9DFC 0000000A            685      sub.l   #(OFFSET_TO_PIXEL_ARRAY),a6
00001440                           686      
00001440  4E75                     687      rts
00001442                           688  
00001442                           689  ;param a6:imaage address, return d0: image width
00001442                           690  
00001442                           691  GetImageWidth:
00001442  DDFC 00000012            692      add.l   #(OFFSET_IMAGE_WIDTH),a6                        ;a6 has the image width address
00001448  2016                     693      move.l  (a6),d0                                         ;put it in d0
0000144A  4EB9 00001462            694      jsr SwapBytes                                           ;swap to get the right value
00001450                           695      
00001450  4E75                     696      rts
00001452                           697  
00001452                           698  ;param a6:imaage address, return d0: image height
00001452                           699  GetImageHeight:
00001452  DDFC 00000016            700      add.l   #(OFFSET_IMAGE_HEIGHT),a6                       ;a6 has the image width address
00001458  2016                     701      move.l  (a6),d0                                         ;put it in d0
0000145A  4EB9 00001462            702      jsr SwapBytes                                           ;swap to get the right value
00001460                           703  
00001460  4E75                     704      rts
00001462                           705  
00001462                           706  
00001462                           707  SwapBytes:
00001462                           708      ;DDCCBBAA
00001462  E158                     709      rol.w   #8,d0   ;DDCCAABB
00001464  4840                     710      swap.w    d0    ;AABBDDCC
00001466  E158                     711      rol.w   #8,d0   ;AABBCCDD
00001468                           712      
00001468  4E75                     713      rts
0000146A                           714  
0000146A                           715  
0000146A                           716  ;BackgroundBitmap  INCBIN "bg.bmp"
0000146A                           717  
0000146A                           718          
0000146A                           719  
0000146A                           720  
0000146A                           721  
0000146A                           722  
0000146A                           723  
0000146A                           724  
0000146A                           725  
0000146A                           726  
0000146A                           727  
0000146A                           728  
0000146A                           729  -------------------- end include --------------------
0000146A                           730      include "CollisionModule.x68"
0000146A                           731  ;Collision stuff file
0000146A                           732  
0000146A                           733  CheckWallCollision:
0000146A                           734  
0000146A                           735      ;check if in bounds
0000146A  0CB9 00000139 002A7086   736      cmp.l   #(TOP_LEFT_BOARD_X_POS), (BallXPosition)
00001474  6F00 0018                737      ble     .Collided
00001478                           738  
00001478  0CB9 000002D7 002A7086   739      cmp.l   #(BOTTOM_RIGHT_BOARD_X_POS-BALL_WIDTH), (BallXPosition)
00001482  6C00 000A                740      bge     .Collided
00001486                           741  
00001486  7000                     742      move.l  #(FALSE),d0
00001488                           743  
00001488  4EF9 00001490            744      jmp .EndCheck
0000148E                           745  
0000148E                           746  .Collided:
0000148E                           747  
0000148E  7001                     748      move.l  #(TRUE), d0
00001490                           749  
00001490                           750  .EndCheck:
00001490                           751  
00001490  4E75                     752      rts
00001492                           753  
00001492                           754  
00001492                           755  CheckPegCollision:
00001492                           756      
00001492                           757      ;movem.l    ALL_REG, -(sp)
00001492                           758      ;set params
00001492  2039 002A7086            759      move.l  (BallXPosition), d0
00001498  0680 0000000F            760      add.l   #(BALL_RADIUS), d0  ;shift to center
0000149E  2239 002A708E            761      move.l  (BallYPosition), d1
000014A4  0681 0000000F            762      add.l   #(BALL_RADIUS), d1  ;shift to center
000014AA                           763  
000014AA  2439 002A709E            764      move.l  (PegsXs),d2
000014B0  2639 002A70A6            765      move.l  (PegsYs),d3
000014B6                           766  
000014B6                           767      ;check if we even should do collision check
000014B6                           768      ;dy is first
000014B6  B681                     769      cmp.l   d1,d3 
000014B8  6C00 000C                770      bge     .SubBallYPegY ; if peg y bigger
000014BC                           771      
000014BC  9283                     772      sub.l   d3,d1
000014BE  2A01                     773      move.l  d1,d5               ;dy
000014C0  4EF9 000014CA            774      jmp     .CheckDy
000014C6                           775  
000014C6                           776  .SubBallYPegY:
000014C6                           777  
000014C6  9681                     778      sub.l   d1,d3
000014C8  2A03                     779      move.l  d3, d5              ;dy
000014CA                           780  
000014CA                           781  .CheckDy:
000014CA                           782  
000014CA  BABC 00000018            783      cmp.l   #(MIN_DY_TO_CHECK_COLLISION), d5
000014D0  6E00 004E                784      bgt     .DidntCollide
000014D4                           785  
000014D4                           786      ;dx is second
000014D4  B480                     787      cmp.l   d0,d2 
000014D6  6C00 000C                788      bge     .SubBallXPegX ; if peg x bigger
000014DA                           789      
000014DA  9082                     790      sub.l   d2,d0
000014DC  2800                     791      move.l  d0,d4               ;dx
000014DE  4EF9 000014E8            792      jmp     .CheckDx
000014E4                           793  
000014E4                           794  .SubBallXPegX:
000014E4                           795  
000014E4  9480                     796      sub.l   d0,d2
000014E6  2802                     797      move.l  d2, d4              ;dx
000014E8                           798  
000014E8                           799  .CheckDx:
000014E8                           800  
000014E8  B8BC 00000018            801      cmp.l   #(MIN_DX_TO_CHECK_COLLISION), d4
000014EE  6E00 0030                802      bgt     .DidntCollide
000014F2                           803  
000014F2                           804      ;****************************************************************************todo store the closest peg coor
000014F2                           805      ;if we're here. we check for collision
000014F2  2004                     806      move.l  d4,d0   ;dx
000014F4  C0C4                     807      mulu.w  d4,d0   ;d0 = dx^2
000014F6  2205                     808      move.l  d5,d1   ;dy
000014F8  C2C5                     809      mulu.w  d5,d1   ;d1 = dy^2
000014FA                           810  
000014FA  D280                     811      add.l   d0, d1  ;d1 = dx^2 + dy^2
000014FC  E589                     812      lsl.l   #2, d1  
000014FE  4DF9 0027632A            813      lea     (Sqrts), a6
00001504                           814  
00001504  2036 1000                815      move.l  (a6, d1), d0    ;d0 = sqrt(dx^2 + dy^2) with no byte swap
00001508                           816      
00001508  4EB8 1462                817      jsr     SwapBytes       ;d0 bytes are swapped, so it has the correct sqrt
0000150C                           818  
0000150C  E088                     819      lsr.l   #(FRACTION_BITS),d0
0000150E                           820  
0000150E                           821      ;combine radiuses
0000150E  720F                     822      move.l  #(BALL_RADIUS), d1
00001510  5E81                     823      add.l   #(PEG_RADIUS), d1
00001512                           824  
00001512  B081                     825      cmp.l   d1, d0
00001514  6E00 000A                826      bgt     .DidntCollide
00001518                           827  
00001518  7001                     828      move.l  #(TRUE), d0
0000151A                           829  
0000151A  4EF9 00001522            830      jmp     .CheckEnd
00001520                           831  
00001520                           832  
00001520                           833  .DidntCollide:
00001520                           834  
00001520  7000                     835      move.l  #(FALSE), d0
00001522                           836  
00001522                           837  .CheckEnd:
00001522                           838      ;movem.l    (sp)+, ALL_REG
00001522                           839  
00001522  4E75                     840      rts
00001524                           841  
00001524                           842  
00001524                           843  BounceBallOffWall:
00001524                           844  
00001524  2039 002A7096            845      move.l  (BallXVelocity), d0
0000152A  C1FC 0080                846      muls.w  #(HALF), d0     
0000152E  E080                     847      asr.l   #(FRACTION_BITS),d0     ;soften collision
00001530                           848  
00001530  4480                     849      neg.l   d0
00001532  23C0 002A7096            850      move.l  d0, (BallXVelocity)
00001538                           851  
00001538  4E75                     852      rts
0000153A                           853  
0000153A                           854  
0000153A                           855  
0000153A                           856  BounceBallOffPeg:
0000153A                           857  
0000153A                           858      ;set tangent vect
0000153A  2039 002A70B2            859      move.l  (ClosestPegY),d0
00001540  90B9 002A708E            860      sub.l   (BallYPosition), d0     
00001546  0680 0000000F            861      add.l   #(BALL_RADIUS), d0      ;d0 = tgX = Ypeg - Yball
0000154C  2239 002A7086            862      move.l  (BallXPosition), d1
00001552  92B9 002A70AE            863      sub.l   (ClosestPegX), d1       
00001558  0681 0000000F            864      add.l   #(BALL_RADIUS), d1      ;d1 = tgY = Xball - Xpeg
0000155E                           865  
0000155E                           866  
0000155E                           867      ;get vect length
0000155E  2C00                     868      move.l  d0, d6
00001560  2E01                     869      move.l  d1, d7
00001562                           870  
00001562  CDC0                     871      muls.w  d0, d6                  ;d6 = tgX ^ 2
00001564  CFC1                     872      muls.w  d1, d7                  ;d7 = tgY ^ 2
00001566                           873  
00001566  DE86                     874      add.l   d6, d7                  ;d7 = tgX ^ 2 + tgY ^ 2
00001568                           875  
00001568  E58F                     876      lsl.l   #2, d7  
0000156A  4DF9 0027632A            877      lea     (Sqrts), a6
00001570                           878  
00001570  2436 7000                879      move.l  (a6, d7), d2            ;d2 = TgMag = sqrt(tgX ^ 2 + tgY ^ 2) with no byte swap
00001574                           880  
00001574  2E00                     881      move.l  d0, d7                  ;store tgX
00001576  2002                     882      move.l  d2, d0
00001578                           883      
00001578  4EB8 1462                884      jsr     SwapBytes               
0000157C  E088                     885      lsr.l   #(FRACTION_BITS),d0
0000157E                           886  
0000157E  2400                     887      move.l  d0, d2                  ;d2 bytes are swapped, so it has the correct sqrt
00001580  2007                     888      move.l  d7, d0                  ;restore d0
00001582                           889  
00001582                           890  
00001582                           891      ;get normalized tangent
00001582  81C2                     892      divs.w  d2, d0                  ;Xtg
00001584  4840                     893      swap    d0
00001586  4240                     894      clr.w   d0
00001588  4840                     895      swap    d0
0000158A  83C2                     896      divs.w  d2, d1                  ;Ytg
0000158C  4841                     897      swap    d1
0000158E  4241                     898      clr.w   d1
00001590  4841                     899      swap    d1
00001592                           900  
00001592                           901  
00001592                           902      ;get length by calculating the dot product
00001592                           903      ;copy x and y
00001592  2400                     904      move.l  d0, d2                  ;Xtg
00001594  2601                     905      move.l  d1, d3                  ;Ytg
00001596                           906  
00001596                           907      ;get velocity
00001596  2C39 002A7096            908      move.l  (BallXVelocity), d6
0000159C  2E39 002A709A            909      move.l  (BallYVelocity), d7
000015A2                           910      ; dot product
000015A2  C5C6                     911      muls.w  d6, d2                  
000015A4  C7C7                     912      muls.w  d7, d3
000015A6                           913  
000015A6  E082                     914      asr.l   #(FRACTION_BITS),d2
000015A8  E083                     915      asr.l   #(FRACTION_BITS),d3
000015AA                           916  
000015AA                           917  
000015AA  D682                     918      add.l   d2, d3                  
000015AC  2803                     919      move.l  d3, d4                  ;d4 = length
000015AE                           920  
000015AE                           921      ;get the velocity comp parallel to the tg
000015AE                           922      ;copy x and y of tg
000015AE  2400                     923      move.l  d0, d2                  ;Xtg
000015B0  2601                     924      move.l  d1, d3                  ;Ytg
000015B2                           925  
000015B2  C5C4                     926      muls.w  d4, d2                  ;d2 = Xparal = length * Xtg
000015B4  C7C4                     927      muls.w  d4, d3                  ;d3 = Yparal = length * Ytg
000015B6                           928  
000015B6                           929      ;get velocity
000015B6  2039 002A7096            930      move.l  (BallXVelocity), d0     ;Xvel
000015BC  2239 002A709A            931      move.l  (BallYVelocity), d1     ;Yvel
000015C2                           932  
000015C2                           933      ;get the velocity comp perpendicular to the tg
000015C2  9082                     934      sub.l   d2, d0                  ;d0 = Xper = Xvel - Xparal
000015C4  9283                     935      sub.l   d3, d1                  ;d1 = Yper = Yvel - Yparal
000015C6                           936  
000015C6                           937      ;get the new velocity
000015C6  E580                     938      asl.l   #2, d0  
000015C8  E581                     939      asl.l   #2, d1
000015CA                           940  
000015CA  2439 002A7096            941      move.l  (BallXVelocity), d2     ;Xvel
000015D0  2639 002A709A            942      move.l  (BallYVelocity), d3     ;Yvel
000015D6                           943          
000015D6  9480                     944      sub.l   d0, d2                  ;d2 = NewXvel = Xvel - 2 * Xper
000015D8  9681                     945      sub.l   d1, d3                  ;d3 = NewYvel = Yvel - 2 * Yper
000015DA                           946  
000015DA  C5FC 0080                947      muls.w  #(HALF), d2     ;soften collision
000015DE  E082                     948      asr.l   #(FRACTION_BITS),d2 
000015E0  C7FC 001A                949      muls.w  #(ONE_TENTH), d3
000015E4  E083                     950      asr.l   #(FRACTION_BITS),d3
000015E6                           951  
000015E6                           952  
000015E6                           953      ;update the velocity
000015E6  23C2 002A7096            954      move.l  d2, (BallXVelocity)
000015EC  23C3 002A709A            955      move.l  d3, (BallYVelocity)
000015F2                           956  
000015F2                           957  
000015F2  4E75                     958      rts
000015F4                           959  
000015F4                           960  
000015F4                           961  
000015F4                           962  
000015F4                           963  
000015F4                           964  
000015F4                           965  
000015F4                           966  
000015F4                           967  
000015F4                           968  
000015F4                           969  -------------------- end include --------------------
000015F4                           970  
000015F4                           971  
000015F4                           972  
000015F4                           973  ;bitmaps
000015F4                           974  BackgroundBitmap    INCBIN "bg.bmp"
0027582A                           975  BallBitmap          INCBIN "ironBall.bmp"
0027632A                           976  
0027632A                           977  ;sqrts
0027632A                           978  Sqrts               INCBIN  "Sqrts.bin" 
002A706A                           979  
002A706A                           980  ;input
002A706A= 00000000                 981  PlayerInput         dc.l    0 ;nothing
002A706E                           982  
002A706E                           983  ;frame rate
002A706E= 00000000                 984  FrameBeginTime      dc.l    0
002A7072                           985  
002A7072                           986  ;ball variables
002A7072= 00001096 00001098 ...    987  BallCalls           dc.l    EndBallUpdate, DropBall, MoveBallToLeft, MoveBallToRight
002A7082= 00                       988  BallDropped         dc.b    (FALSE)
002A7083= 00                       989  BallMoved           dc.b    (FALSE)
002A7084= 00                       990  BallJustCollided    dc.b    (FALSE)
002A7086= 00000139                 991  BallXPosition       dc.l    (BALL_INITIAL_X_POS)     
002A708A= 00013900                 992  BallXPositionFixed  dc.l    (BALL_INITIAL_X_POS<<FRACTION_BITS)
002A708E= 0000002A                 993  BallYPosition       dc.l    (BALL_INITIAL_Y_POS)     
002A7092= 00002A00                 994  BallYPositionFixed  dc.l    (BALL_INITIAL_Y_POS<<FRACTION_BITS)
002A7096= 00000000                 995  BallXVelocity       dc.l    (BALL_INIT_X_VELOCITY)
002A709A= 00000000                 996  BallYVelocity       dc.l    (BALL_INIT_Y_VELOCITY)
002A709E= 0000021A 00000000        997  PegsXs              dc.l    538, 0
002A70A6= 00000135 00000000        998  PegsYs              dc.l    309, 0
002A70AE= 0000021A                 999  ClosestPegX         dc.l    538
002A70B2= 00000135                1000  ClosestPegY         dc.l    309
002A70B6                          1001  
002A70B6                          1002  
002A70B6                          1003      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALL_REG             7FFF
BACKGROUNDBITMAP    15F4
BALLBITMAP          27582A
BALLCALLS           2A7072
BALLDROPPED         2A7082
BALLDROPPING        1100
BALLDROPPING:CONTINUEBALLUPDATE  117A
BALLDROPPING:DONTMOVE  11C2
BALLDROPPING:JUSTPEGCOLLIDED  1166
BALLDROPPING:JUSTWALLCOLLIDED  1152
BALLDROPPING:MOVEONTOPEGS  1122
BALLDROPPING:NOTCOLLIDING  1144
BALLDROPPING:SKIPBOUNCEOFFPEG  117A
BALLJUSTCOLLIDED    2A7084
BALLMOVED           2A7083
BALLXPOSITION       2A7086
BALLXPOSITIONFIXED  2A708A
BALLXVELOCITY       2A7096
BALLYPOSITION       2A708E
BALLYPOSITIONFIXED  2A7092
BALLYVELOCITY       2A709A
BALL_HEIGHT         1E
BALL_INITIAL_X_POS  139
BALL_INITIAL_Y_POS  2A
BALL_INIT_X_VELOCITY  0
BALL_INIT_Y_VELOCITY  0
BALL_RADIUS         F
BALL_SLIDE_VELOCITY  250
BALL_WIDTH          1E
BALL_Y_ACCELERATION  15
BOARD_HEIGHT        270
BOARD_WIDTH         1BC
BOTTOM_RIGHT_BOARD_X_POS  2F5
BOTTOM_RIGHT_BOARD_Y_POS  29A
BOUNCEBALLOFFPEG    153A
BOUNCEBALLOFFWALL   1524
CHECKPEGCOLLISION   1492
CHECKPEGCOLLISION:CHECKDX  14E8
CHECKPEGCOLLISION:CHECKDY  14CA
CHECKPEGCOLLISION:CHECKEND  1522
CHECKPEGCOLLISION:DIDNTCOLLIDE  1520
CHECKPEGCOLLISION:SUBBALLXPEGX  14E4
CHECKPEGCOLLISION:SUBBALLYPEGY  14C6
CHECKWALLCOLLISION  146A
CHECKWALLCOLLISION:COLLIDED  148E
CHECKWALLCOLLISION:ENDCHECK  1490
CHUNK_HEIGHT_STACK_OFFSET  4
CHUNK_WIDTH_STACK_OFFSET  8
CHUNK_X_POS_STACK_OFFSET  10
CHUNK_Y_POS_STACK_OFFSET  C
CLOSESTPEGX         2A70AE
CLOSESTPEGY         2A70B2
DOUBLE_BUFFERING_MODE  11
DRAWACHUNK          138E
DRAWALLBACKGROUND   125A
DRAWBACKGROUNDCHUNK  1268
DRAWBACKGROUNDCHUNK:DONTDRAW  1280
DRAWBALL            1290
DRAWBALL:DONTDRAW   12A8
DRAWBALLFIRSTTIME   1282
DRAWCOLUMN          13C2
DRAWEND             141A
DRAWPIC             133A
DRAW_A_PIXEL_COMMAND  52
DRAW_X_POS_STACK_OFFSET  18
DRAW_Y_POS_STACK_OFFSET  14
DROPBALL            1098
DROPBALLINPUT       122A
EIGHT_TENTH         CD
ENABLEDOUBLEBUFFER  141C
ENDBALLUPDATE       1096
ENDHANDLEINPUT      1228
FALSE               0
FIRST_PIXEL_ADDRESS_STACK_OFFSET  24
FRACTION_BITS       8
FRAMEBEGINTIME      2A706E
GAMELOOP            101E
GETFIRSTPIXELADDRESS  142A
GETIMAGEHEIGHT      1452
GETIMAGEWIDTH       1442
GET_TIME_COMMAND    8
GREEN               FF00
HALF                80
HANDLEINPUT         11E8
IMAGE_HEIGHT_STACK_OFFSET  1C
IMAGE_WIDTH_STACK_OFFSET  20
INPUT_COMMAND       13
LEFT_ARROW          25
LEFT_ARROW_LOCATION  8
MAIN                1000
MIN_DX_TO_CHECK_COLLISION  18
MIN_DY_TO_CHECK_COLLISION  18
MOVEBALLTOLEFT      10A4
MOVEBALLTOLEFT:DONTMOVE  10CE
MOVEBALLTOLEFTINPUT  1238
MOVEBALLTORIGHT     10D2
MOVEBALLTORIGHT:DONTMOVE  10FC
MOVEBALLTORIGHTINPUT  124C
NEXTPIXEL           13EE
OFFSET_IMAGE_HEIGHT  16
OFFSET_IMAGE_WIDTH  12
OFFSET_TO_PIXEL_ARRAY  A
ONE_TENTH           1A
OUTPUT_WINDOW_HEIGHT  320
OUTPUT_WINDOW_WIDTH  42F
PAINTSCREENBUFFER   1424
PEGSXS              2A709E
PEGSYS              2A70A6
PEG_HEIGHT          E
PEG_RADIUS          7
PEG_WIDTH           E
PLAYERINPUT         2A706A
REPAINT_SCREEN_COMMAND  5E
RIGHT_ARROW         27
RIGHT_ARROW_LOCATION  0
SETBALLDRAWPARAMS   1304
SETBGDRAWPARAMS     12D2
SETFIRSTDRAWPARAMS  12AA
SETFRAMEBEGINTIME   11C6
SETOUTPUTWINDOW     1050
SET_DRAWING_MODE_COMMAND  5C
SET_OUTPUT_WINDOW_COMMAND  21
SET_PEN_COLOR_COMMAND  50
SPACE_KEY           20
SPACE_KEY_LOCATION  10
SQRTS               27632A
STACK_OFFSET_WHEN_DRAWING  28
START               1000
SWAPBYTES           1462
TIME_PER_FRAME      1
TOP_LEFT_BOARD_X_POS  139
TOP_LEFT_BOARD_Y_POS  2A
TRUE                1
TWO_TENTH           33
UPDATEBALLPOSITION  1062
WAITTOENDFRAME      11D2
WAITTOENDFRAME:LOOPAGAIN  11D8
